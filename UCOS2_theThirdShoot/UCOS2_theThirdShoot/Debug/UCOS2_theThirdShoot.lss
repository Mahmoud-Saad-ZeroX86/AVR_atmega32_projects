
UCOS2_theThirdShoot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  00001e54  00001ee8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000d60  0080018c  0080018c  00002014  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002044  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000550  00000000  00000000  00002080  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008d75  00000000  00000000  000025d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001964  00000000  00000000  0000b345  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003d6a  00000000  00000000  0000cca9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000012c8  00000000  00000000  00010a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000167e  00000000  00000000  00011cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000768b  00000000  00000000  0001335a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000430  00000000  00000000  0001a9e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	21 c1       	rjmp	.+578    	; 0x244 <__ctors_end>
       2:	00 00       	nop
       4:	27 c0       	rjmp	.+78     	; 0x54 <__vector_1>
       6:	00 00       	nop
       8:	27 c0       	rjmp	.+78     	; 0x58 <__vector_2>
       a:	00 00       	nop
       c:	27 c0       	rjmp	.+78     	; 0x5c <__vector_3>
       e:	00 00       	nop
      10:	27 c0       	rjmp	.+78     	; 0x60 <__vector_4>
      12:	00 00       	nop
      14:	27 c0       	rjmp	.+78     	; 0x64 <__vector_5>
      16:	00 00       	nop
      18:	27 c0       	rjmp	.+78     	; 0x68 <__vector_6>
      1a:	00 00       	nop
      1c:	27 c0       	rjmp	.+78     	; 0x6c <__vector_7>
      1e:	00 00       	nop
      20:	27 c0       	rjmp	.+78     	; 0x70 <__vector_8>
      22:	00 00       	nop
      24:	27 c0       	rjmp	.+78     	; 0x74 <__vector_9>
      26:	00 00       	nop
      28:	27 c0       	rjmp	.+78     	; 0x78 <__vector_10>
      2a:	00 00       	nop
      2c:	27 c0       	rjmp	.+78     	; 0x7c <__vector_11>
      2e:	00 00       	nop
      30:	27 c0       	rjmp	.+78     	; 0x80 <__vector_12>
      32:	00 00       	nop
      34:	27 c0       	rjmp	.+78     	; 0x84 <__vector_13>
      36:	00 00       	nop
      38:	27 c0       	rjmp	.+78     	; 0x88 <__vector_14>
      3a:	00 00       	nop
      3c:	27 c0       	rjmp	.+78     	; 0x8c <__vector_15>
      3e:	00 00       	nop
      40:	27 c0       	rjmp	.+78     	; 0x90 <__vector_16>
      42:	00 00       	nop
      44:	27 c0       	rjmp	.+78     	; 0x94 <__vector_17>
      46:	00 00       	nop
      48:	27 c0       	rjmp	.+78     	; 0x98 <__vector_18>
      4a:	00 00       	nop
      4c:	27 c0       	rjmp	.+78     	; 0x9c <__vector_19>
      4e:	00 00       	nop
      50:	27 c0       	rjmp	.+78     	; 0xa0 <__vector_20>
	...

00000054 <__vector_1>:

        .section .vectors, "ax"
                                                   ; Vector #   Address       Interrupt Definition
                                                   ; --------   -----------   ------------------------------------------
                                                   ;      0       0x0000       Reset
__vector_1:     JMP     __unhandled_interrupt      ;      1       0x0004       External Oscillator Failure (NMI)
      54:	f7 c0       	rjmp	.+494    	; 0x244 <__ctors_end>
	...

00000058 <__vector_2>:
__vector_2:     JMP     __unhandled_interrupt      ;      2       0x0008       Port C External Interrupt 0
      58:	f5 c0       	rjmp	.+490    	; 0x244 <__ctors_end>
	...

0000005c <__vector_3>:
__vector_3:     JMP     __unhandled_interrupt      ;      3       0x000C       Port C External Interrupt 1
      5c:	f3 c0       	rjmp	.+486    	; 0x244 <__ctors_end>
	...

00000060 <__vector_4>:
__vector_4:     JMP     __unhandled_interrupt      ;      4       0x0010       Port R External Interrupt 0
      60:	f1 c0       	rjmp	.+482    	; 0x244 <__ctors_end>
	...

00000064 <__vector_5>:
__vector_5:     JMP     __unhandled_interrupt      ;      5       0x0014       Port R External Interrupt 1
      64:	ef c0       	rjmp	.+478    	; 0x244 <__ctors_end>
	...

00000068 <__vector_6>:
__vector_6:     JMP     __unhandled_interrupt      ;      6       0x0018       DMA CH0
      68:	ed c0       	rjmp	.+474    	; 0x244 <__ctors_end>
	...

0000006c <__vector_7>:
__vector_7:     JMP     __unhandled_interrupt      ;      7       0x001C       DMA CH1
      6c:	eb c0       	rjmp	.+470    	; 0x244 <__ctors_end>
	...

00000070 <__vector_8>:
__vector_8:     JMP     __unhandled_interrupt      ;      8       0x0020       DMA CH2
      70:	e9 c0       	rjmp	.+466    	; 0x244 <__ctors_end>
	...

00000074 <__vector_9>:
__vector_9:     JMP     __unhandled_interrupt      ;      9       0x0024       DMA CH3
      74:	e7 c0       	rjmp	.+462    	; 0x244 <__ctors_end>
	...

00000078 <__vector_10>:
__vector_10:    JMP     __unhandled_interrupt      ;     10       0x0028       RTC Overflow
      78:	e5 c0       	rjmp	.+458    	; 0x244 <__ctors_end>
	...

0000007c <__vector_11>:
__vector_11:    JMP     __unhandled_interrupt      ;     11       0x002C       RTC Compare
      7c:	e3 c0       	rjmp	.+454    	; 0x244 <__ctors_end>
	...

00000080 <__vector_12>:
__vector_12:    JMP     __unhandled_interrupt      ;     12       0x0030       TWI C Slave Interrupt
      80:	e1 c0       	rjmp	.+450    	; 0x244 <__ctors_end>
	...

00000084 <__vector_13>:
__vector_13:    JMP     __unhandled_interrupt      ;     13       0x0034       TWI C Master Interrupt
      84:	df c0       	rjmp	.+446    	; 0x244 <__ctors_end>
	...

00000088 <__vector_14>:
__vector_14:    JMP     __unhandled_interrupt;pushbutton_timer_isr       ;     14       0x0038       Timer C0 Overflow	//modified_by_msa_to_meet_the_atmega32_constrains
      88:	dd c0       	rjmp	.+442    	; 0x244 <__ctors_end>
	...

0000008c <__vector_15>:
__vector_15:    JMP     __unhandled_interrupt      ;     15       0x003C       Timer C0 Error
      8c:	db c0       	rjmp	.+438    	; 0x244 <__ctors_end>
	...

00000090 <__vector_16>:
__vector_16:    JMP     __unhandled_interrupt      ;     16       0x0040       Timer C0 Compare or Capture A
      90:	d9 c0       	rjmp	.+434    	; 0x244 <__ctors_end>
	...

00000094 <__vector_17>:
__vector_17:    JMP     __unhandled_interrupt      ;     17       0x0044       Timer C0 Compare or Capture B
      94:	d7 c0       	rjmp	.+430    	; 0x244 <__ctors_end>
	...

00000098 <__vector_18>:
__vector_18:    JMP     __unhandled_interrupt      ;     18       0x0048       Timer C0 Compare or Capture C
      98:	d5 c0       	rjmp	.+426    	; 0x244 <__ctors_end>
	...

0000009c <__vector_19>:
__vector_19:    JMP     __unhandled_interrupt      ;     19       0x004C       Timer C0 Compare or Capture D
      9c:	d3 c0       	rjmp	.+422    	; 0x244 <__ctors_end>
	...

000000a0 <__vector_20>:
__vector_20:    JMP     TickISR 			       ;     20       0x0050       Timer C1 Overflow	//test_later_to_meet_the_atmega32_constrains>>is the add is the same or editting is needed
      a0:	ed c0       	rjmp	.+474    	; 0x27c <TickISR>
	...

000000a4 <__vector_21>:
__vector_21:    JMP     __unhandled_interrupt      ;     21       0x0054       Timer C1 Error
      a4:	cf c0       	rjmp	.+414    	; 0x244 <__ctors_end>
	...

000000a8 <__vector_22>:
__vector_22:    JMP     __unhandled_interrupt      ;     22       0x0058       Timer C1 Compare or Capture A
      a8:	cd c0       	rjmp	.+410    	; 0x244 <__ctors_end>
	...

000000ac <__vector_23>:
__vector_23:    JMP     __unhandled_interrupt      ;     23       0x005C       Timer C1 Compare or Capture B
      ac:	cb c0       	rjmp	.+406    	; 0x244 <__ctors_end>
	...

000000b0 <__vector_24>:
__vector_24:    JMP     __unhandled_interrupt      ;     24       0x0060       SPI C
      b0:	c9 c0       	rjmp	.+402    	; 0x244 <__ctors_end>
	...

000000b4 <__vector_25>:
__vector_25:    JMP     __unhandled_interrupt;usartc0_rx_isr             ;     25       0x0064       USART C0 Rx Complete	//modified_by_msa_to_meet_the_atmega32_constrains
      b4:	c7 c0       	rjmp	.+398    	; 0x244 <__ctors_end>
	...

000000b8 <__vector_26>:
__vector_26:    JMP     __unhandled_interrupt      ;     26       0x0068       USART C0 Data Register Empty
      b8:	c5 c0       	rjmp	.+394    	; 0x244 <__ctors_end>
	...

000000bc <__vector_27>:
__vector_27:    JMP     __unhandled_interrupt      ;     27       0x006C       USART C0 Tx Complete
      bc:	c3 c0       	rjmp	.+390    	; 0x244 <__ctors_end>
	...

000000c0 <__vector_28>:
__vector_28:    JMP     __unhandled_interrupt      ;     28       0x0070       USART C1 Rx Complete
      c0:	c1 c0       	rjmp	.+386    	; 0x244 <__ctors_end>
	...

000000c4 <__vector_29>:
__vector_29:    JMP     __unhandled_interrupt      ;     29       0x0074       USART C1 Data Register Empty
      c4:	bf c0       	rjmp	.+382    	; 0x244 <__ctors_end>
	...

000000c8 <__vector_30>:
__vector_30:    JMP     __unhandled_interrupt      ;     30       0x0078       USART C1 Tx Complete
      c8:	bd c0       	rjmp	.+378    	; 0x244 <__ctors_end>
	...

000000cc <__vector_31>:
__vector_31:    JMP     __unhandled_interrupt      ;     31       0x007C       AES interrupt vector
      cc:	bb c0       	rjmp	.+374    	; 0x244 <__ctors_end>
	...

000000d0 <__vector_32>:
__vector_32:    JMP     __unhandled_interrupt      ;     32       0x0080       NVM EE
      d0:	b9 c0       	rjmp	.+370    	; 0x244 <__ctors_end>
	...

000000d4 <__vector_33>:
__vector_33:    JMP     __unhandled_interrupt      ;     33       0x0084       NVM SPM
      d4:	b7 c0       	rjmp	.+366    	; 0x244 <__ctors_end>
	...

000000d8 <__vector_34>:
__vector_34:    JMP     __unhandled_interrupt      ;     34       0x0088       Port B External Interrupt 0
      d8:	b5 c0       	rjmp	.+362    	; 0x244 <__ctors_end>
	...

000000dc <__vector_35>:
__vector_35:    JMP     __unhandled_interrupt      ;     35       0x008C       Port B External  Interrupt 1
      dc:	b3 c0       	rjmp	.+358    	; 0x244 <__ctors_end>
	...

000000e0 <__vector_36>:
__vector_36:    JMP     __unhandled_interrupt      ;     36       0x008C       Analog Comparator B Window Mode
      e0:	b1 c0       	rjmp	.+354    	; 0x244 <__ctors_end>
	...

000000e4 <__vector_37>:
__vector_37:    JMP     __unhandled_interrupt      ;     37       0x0090       Analog Comparator B Comparator 1
      e4:	af c0       	rjmp	.+350    	; 0x244 <__ctors_end>
	...

000000e8 <__vector_38>:
__vector_38:    JMP     __unhandled_interrupt      ;     38       0x0094       Analog Comparator B Comparator 0
      e8:	ad c0       	rjmp	.+346    	; 0x244 <__ctors_end>
	...

000000ec <__vector_39>:
__vector_39:    JMP     __unhandled_interrupt      ;     39       0x0098       ADC B CH0
      ec:	ab c0       	rjmp	.+342    	; 0x244 <__ctors_end>
	...

000000f0 <__vector_40>:
__vector_40:    JMP     __unhandled_interrupt      ;     40       0x009C       ADC B CH1
      f0:	a9 c0       	rjmp	.+338    	; 0x244 <__ctors_end>
	...

000000f4 <__vector_41>:
__vector_41:    JMP     __unhandled_interrupt      ;     41       0x00A0       ADC B CH2
      f4:	a7 c0       	rjmp	.+334    	; 0x244 <__ctors_end>
	...

000000f8 <__vector_42>:
__vector_42:    JMP     __unhandled_interrupt      ;     42       0x00A4       ADC B CH3
      f8:	a5 c0       	rjmp	.+330    	; 0x244 <__ctors_end>
	...

000000fc <__vector_43>:
__vector_43:    JMP     __unhandled_interrupt      ;     43       0x00A8       Port E External Interrupt 0
      fc:	a3 c0       	rjmp	.+326    	; 0x244 <__ctors_end>
	...

00000100 <__vector_44>:
__vector_44:    JMP     __unhandled_interrupt      ;     44       0x00AC       Port E External Interrupt 1
     100:	a1 c0       	rjmp	.+322    	; 0x244 <__ctors_end>
	...

00000104 <__vector_45>:
__vector_45:    JMP     __unhandled_interrupt      ;     45       0x00B0       TWI E Slave Interrupt
     104:	9f c0       	rjmp	.+318    	; 0x244 <__ctors_end>
	...

00000108 <__vector_46>:
__vector_46:    JMP     __unhandled_interrupt      ;     46       0x00B4       TWI E Master Interrupt
     108:	9d c0       	rjmp	.+314    	; 0x244 <__ctors_end>
	...

0000010c <__vector_47>:
__vector_47:    JMP     __unhandled_interrupt      ;     47       0x00B8       Timer  E0  Overflow
     10c:	9b c0       	rjmp	.+310    	; 0x244 <__ctors_end>
	...

00000110 <__vector_48>:
__vector_48:    JMP     __unhandled_interrupt      ;     48       0x00BC       Timer  E0  Error
     110:	99 c0       	rjmp	.+306    	; 0x244 <__ctors_end>
	...

00000114 <__vector_49>:
__vector_49:    JMP     __unhandled_interrupt      ;     49       0x00C0       Timer  E0  Compare or Capture A
     114:	97 c0       	rjmp	.+302    	; 0x244 <__ctors_end>
	...

00000118 <__vector_50>:
__vector_50:    JMP     __unhandled_interrupt      ;     50       0x00C4       Timer  E0  Compare or Capture B
     118:	95 c0       	rjmp	.+298    	; 0x244 <__ctors_end>
	...

0000011c <__vector_51>:
__vector_51:    JMP     __unhandled_interrupt      ;     51       0x00C8       Timer  E0  Compare or Capture C
     11c:	93 c0       	rjmp	.+294    	; 0x244 <__ctors_end>
	...

00000120 <__vector_52>:
__vector_52:    JMP     __unhandled_interrupt      ;     52       0x00CC       Timer  E0  Compare or Capture D
     120:	91 c0       	rjmp	.+290    	; 0x244 <__ctors_end>
	...

00000124 <__vector_53>:
__vector_53:    JMP     __unhandled_interrupt      ;     53       0x00D0       Timer  E1  Overflow
     124:	8f c0       	rjmp	.+286    	; 0x244 <__ctors_end>
	...

00000128 <__vector_54>:
__vector_54:    JMP     __unhandled_interrupt      ;     54       0x00D4       Timer  E1  Error
     128:	8d c0       	rjmp	.+282    	; 0x244 <__ctors_end>
	...

0000012c <__vector_55>:
__vector_55:    JMP     __unhandled_interrupt      ;     55       0x00D8       Timer  E1  Compare or Capture A
     12c:	8b c0       	rjmp	.+278    	; 0x244 <__ctors_end>
	...

00000130 <__vector_56>:
__vector_56:    JMP     __unhandled_interrupt      ;     56       0x00DC       Timer  E1  Compare or Capture B
     130:	89 c0       	rjmp	.+274    	; 0x244 <__ctors_end>
	...

00000134 <__vector_57>:
__vector_57:    JMP     __unhandled_interrupt      ;     57       0x00E0       SPI    E
     134:	87 c0       	rjmp	.+270    	; 0x244 <__ctors_end>
	...

00000138 <__vector_58>:
__vector_58:    JMP     __unhandled_interrupt      ;     58       0x00E4       USART E0 Rx Complete
     138:	85 c0       	rjmp	.+266    	; 0x244 <__ctors_end>
	...

0000013c <__vector_59>:
__vector_59:    JMP     __unhandled_interrupt      ;     59       0x00E8       USART E0 Data Register Empty
     13c:	83 c0       	rjmp	.+262    	; 0x244 <__ctors_end>
	...

00000140 <__vector_60>:
__vector_60:    JMP     __unhandled_interrupt      ;     60       0x00EC       USART E0 Tx Complete
     140:	81 c0       	rjmp	.+258    	; 0x244 <__ctors_end>
	...

00000144 <__vector_61>:
__vector_61:    JMP     __unhandled_interrupt      ;     61       0x00F0       USART E1 Rx Complete
     144:	7f c0       	rjmp	.+254    	; 0x244 <__ctors_end>
	...

00000148 <__vector_62>:
__vector_62:    JMP     __unhandled_interrupt      ;     62       0x00F4       USART E1 Data Register Empty
     148:	7d c0       	rjmp	.+250    	; 0x244 <__ctors_end>
	...

0000014c <__vector_63>:
__vector_63:    JMP     __unhandled_interrupt      ;     63       0x00F8       USART E1 Tx Complete
     14c:	7b c0       	rjmp	.+246    	; 0x244 <__ctors_end>
	...

00000150 <__vector_64>:
__vector_64:    JMP     __unhandled_interrupt      ;     64       0x00FC       Port  D External Interrupt 0
     150:	79 c0       	rjmp	.+242    	; 0x244 <__ctors_end>
	...

00000154 <__vector_65>:
__vector_65:    JMP     __unhandled_interrupt      ;     65       0x0100       Port  D External Interrupt 1
     154:	77 c0       	rjmp	.+238    	; 0x244 <__ctors_end>
	...

00000158 <__vector_66>:
__vector_66:    JMP     __unhandled_interrupt      ;     66       0x0104       Port  A External Interrupt 0
     158:	75 c0       	rjmp	.+234    	; 0x244 <__ctors_end>
	...

0000015c <__vector_67>:
__vector_67:    JMP     __unhandled_interrupt      ;     67       0x0108       Port  A External Interrupt 1
     15c:	73 c0       	rjmp	.+230    	; 0x244 <__ctors_end>
	...

00000160 <__vector_68>:
__vector_68:    JMP     __unhandled_interrupt      ;     68       0x010C       Analog Comparator A Window Mode 
     160:	71 c0       	rjmp	.+226    	; 0x244 <__ctors_end>
	...

00000164 <__vector_69>:
__vector_69:    JMP     __unhandled_interrupt      ;     69       0x0110       Analog Comparator A Comparator 1
     164:	6f c0       	rjmp	.+222    	; 0x244 <__ctors_end>
	...

00000168 <__vector_70>:
__vector_70:    JMP     __unhandled_interrupt      ;     70       0x0114       Analog Comparator A Comparator 0
     168:	6d c0       	rjmp	.+218    	; 0x244 <__ctors_end>
	...

0000016c <__vector_71>:
__vector_71:    JMP     __unhandled_interrupt      ;     71       0x0118       ADC A CH0
     16c:	6b c0       	rjmp	.+214    	; 0x244 <__ctors_end>
	...

00000170 <__vector_72>:
__vector_72:    JMP     __unhandled_interrupt      ;     72       0x011C       ADC A CH1
     170:	69 c0       	rjmp	.+210    	; 0x244 <__ctors_end>
	...

00000174 <__vector_73>:
__vector_73:    JMP     __unhandled_interrupt      ;     73       0x0120       ADC A CH2
     174:	67 c0       	rjmp	.+206    	; 0x244 <__ctors_end>
	...

00000178 <__vector_74>:
__vector_74:    JMP     __unhandled_interrupt      ;     74       0x0124       ADC A CH3
     178:	65 c0       	rjmp	.+202    	; 0x244 <__ctors_end>
	...

0000017c <__vector_75>:
__vector_75:    JMP     __unhandled_interrupt      ;     75       0x0128       TWI D Slave Interrupt
     17c:	63 c0       	rjmp	.+198    	; 0x244 <__ctors_end>
	...

00000180 <__vector_76>:
__vector_76:    JMP     __unhandled_interrupt      ;     76       0x012C       TWI D Master Interrupt
     180:	61 c0       	rjmp	.+194    	; 0x244 <__ctors_end>
	...

00000184 <__vector_77>:
__vector_77:    JMP     __unhandled_interrupt      ;     77       0x0130       Timer D0 Overflow
     184:	5f c0       	rjmp	.+190    	; 0x244 <__ctors_end>
	...

00000188 <__vector_78>:
__vector_78:    JMP     __unhandled_interrupt      ;     78       0x0134       Timer D0 Error
     188:	5d c0       	rjmp	.+186    	; 0x244 <__ctors_end>
	...

0000018c <__vector_79>:
__vector_79:    JMP     __unhandled_interrupt      ;     79       0x0138       Timer D0 Compare or Capture A
     18c:	5b c0       	rjmp	.+182    	; 0x244 <__ctors_end>
	...

00000190 <__vector_80>:
__vector_80:    JMP     __unhandled_interrupt      ;     80       0x013C       Timer D0 Compare or Capture B
     190:	59 c0       	rjmp	.+178    	; 0x244 <__ctors_end>
	...

00000194 <__vector_81>:
__vector_81:    JMP     __unhandled_interrupt      ;     81       0x0140       Timer D0 Compare or Capture C
     194:	57 c0       	rjmp	.+174    	; 0x244 <__ctors_end>
	...

00000198 <__vector_82>:
__vector_82:    JMP     __unhandled_interrupt      ;     82       0x0144       Timer D0 Compare or Capture D
     198:	55 c0       	rjmp	.+170    	; 0x244 <__ctors_end>
	...

0000019c <__vector_83>:
__vector_83:    JMP     __unhandled_interrupt      ;     83       0x0148       Timer D1 Overflow
     19c:	53 c0       	rjmp	.+166    	; 0x244 <__ctors_end>
	...

000001a0 <__vector_84>:
__vector_84:    JMP     __unhandled_interrupt      ;     84       0x014C       Timer D1 Error
     1a0:	51 c0       	rjmp	.+162    	; 0x244 <__ctors_end>
	...

000001a4 <__vector_85>:
__vector_85:    JMP     __unhandled_interrupt      ;     85       0x0150       Timer D1 Compare or Capture A
     1a4:	4f c0       	rjmp	.+158    	; 0x244 <__ctors_end>
	...

000001a8 <__vector_86>:
__vector_86:    JMP     __unhandled_interrupt      ;     86       0x0154       Timer D1 Compare or Capture B
     1a8:	4d c0       	rjmp	.+154    	; 0x244 <__ctors_end>
	...

000001ac <__vector_87>:
__vector_87:    JMP     __unhandled_interrupt      ;     87       0x0158       SPI   D
     1ac:	4b c0       	rjmp	.+150    	; 0x244 <__ctors_end>
	...

000001b0 <__vector_88>:
__vector_88:    JMP     __unhandled_interrupt      ;     88       0x015C       USART D0 Rx Complete
     1b0:	49 c0       	rjmp	.+146    	; 0x244 <__ctors_end>
	...

000001b4 <__vector_89>:
__vector_89:    JMP     __unhandled_interrupt      ;     89       0x0160       USART D0 Data Register Empty
     1b4:	47 c0       	rjmp	.+142    	; 0x244 <__ctors_end>
	...

000001b8 <__vector_90>:
__vector_90:    JMP     __unhandled_interrupt      ;     90       0x0164       USART D0 Tx Complete
     1b8:	45 c0       	rjmp	.+138    	; 0x244 <__ctors_end>
	...

000001bc <__vector_91>:
__vector_91:    JMP     __unhandled_interrupt      ;     91       0x0168       USART D1 RxComplete
     1bc:	43 c0       	rjmp	.+134    	; 0x244 <__ctors_end>
	...

000001c0 <__vector_92>:
__vector_92:    JMP     __unhandled_interrupt      ;     92       0x016C       USART D1 Data Register Empty 
     1c0:	41 c0       	rjmp	.+130    	; 0x244 <__ctors_end>
	...

000001c4 <__vector_93>:
__vector_93:    JMP     __unhandled_interrupt      ;     93       0x0170       USART D1 Tx Complete
     1c4:	3f c0       	rjmp	.+126    	; 0x244 <__ctors_end>
	...

000001c8 <__vector_94>:
__vector_94:    JMP     __unhandled_interrupt      ;     94       0x0174       PortQ External Interrupt 0 
     1c8:	3d c0       	rjmp	.+122    	; 0x244 <__ctors_end>
	...

000001cc <__vector_95>:
__vector_95:    JMP     __unhandled_interrupt      ;     95       0x0178       PortQ External Interrupt 1.
     1cc:	3b c0       	rjmp	.+118    	; 0x244 <__ctors_end>
	...

000001d0 <__vector_96>:
__vector_96:    JMP     __unhandled_interrupt      ;     96       0x017C       PortH External Interrupt 0.
     1d0:	39 c0       	rjmp	.+114    	; 0x244 <__ctors_end>
	...

000001d4 <__vector_97>:
__vector_97:    JMP     __unhandled_interrupt      ;     97       0x0180       PortH External Interrupt 1.
     1d4:	37 c0       	rjmp	.+110    	; 0x244 <__ctors_end>
	...

000001d8 <__vector_98>:
__vector_98:    JMP     __unhandled_interrupt      ;     98       0x0184       PortJ External Interrupt 0.
     1d8:	35 c0       	rjmp	.+106    	; 0x244 <__ctors_end>
	...

000001dc <__vector_99>:
__vector_99:    JMP     __unhandled_interrupt      ;     99       0x0188       PortJ External Interrupt 1.
     1dc:	33 c0       	rjmp	.+102    	; 0x244 <__ctors_end>
	...

000001e0 <__vector_100>:
__vector_100:   JMP     __unhandled_interrupt      ;    100       0x018C       PortK External Interrupt 0 
     1e0:	31 c0       	rjmp	.+98     	; 0x244 <__ctors_end>
	...

000001e4 <__vector_101>:
__vector_101:   JMP     __unhandled_interrupt      ;    101       0x0190       PortK External Interrupt 1 
     1e4:	2f c0       	rjmp	.+94     	; 0x244 <__ctors_end>
	...

000001e8 <__vector_102>:
__vector_102:   JMP     __unhandled_interrupt      ;    102       Reserved
     1e8:	2d c0       	rjmp	.+90     	; 0x244 <__ctors_end>
	...

000001ec <__vector_103>:
__vector_103:   JMP     __unhandled_interrupt      ;    103       Reserved
     1ec:	2b c0       	rjmp	.+86     	; 0x244 <__ctors_end>
	...

000001f0 <__vector_104>:
__vector_104:   JMP     __unhandled_interrupt      ;    104       0x019C       Port F External Interrupt 0 
     1f0:	29 c0       	rjmp	.+82     	; 0x244 <__ctors_end>
	...

000001f4 <__vector_105>:
__vector_105:   JMP     __unhandled_interrupt      ;    105       0x01A0       Port F External Interrupt 1 
     1f4:	27 c0       	rjmp	.+78     	; 0x244 <__ctors_end>
	...

000001f8 <__vector_106>:
__vector_106:   JMP     __unhandled_interrupt      ;    106       0x01A4       TWI  F Slave    Interrupt
     1f8:	25 c0       	rjmp	.+74     	; 0x244 <__ctors_end>
	...

000001fc <__vector_107>:
__vector_107:   JMP     __unhandled_interrupt      ;    107       0x01A8       TWI  F Master   Interrupt
     1fc:	23 c0       	rjmp	.+70     	; 0x244 <__ctors_end>
	...

00000200 <__vector_108>:
__vector_108:   JMP     __unhandled_interrupt      ;    108       0x01AC       Timer F0 Overflow
     200:	21 c0       	rjmp	.+66     	; 0x244 <__ctors_end>
	...

00000204 <__vector_109>:
__vector_109:   JMP     __unhandled_interrupt      ;    109       0x01B0       Timer F0 Error
     204:	1f c0       	rjmp	.+62     	; 0x244 <__ctors_end>
	...

00000208 <__vector_110>:
__vector_110:   JMP     __unhandled_interrupt      ;    110       0x01B4       Timer F0 Compare or Capture A
     208:	1d c0       	rjmp	.+58     	; 0x244 <__ctors_end>
	...

0000020c <__vector_111>:
__vector_111:   JMP     __unhandled_interrupt      ;    111       0x01B8       Timer F0 Compare or Capture B
     20c:	1b c0       	rjmp	.+54     	; 0x244 <__ctors_end>
	...

00000210 <__vector_112>:
__vector_112:   JMP     __unhandled_interrupt      ;    112       0x01BC       Timer F0 Compare or Capture C
     210:	19 c0       	rjmp	.+50     	; 0x244 <__ctors_end>
	...

00000214 <__vector_113>:
__vector_113:   JMP     __unhandled_interrupt      ;    113       0x01C0       Timer F0 Compare or Capture D
     214:	17 c0       	rjmp	.+46     	; 0x244 <__ctors_end>
	...

00000218 <__vector_114>:
__vector_114:   JMP     __unhandled_interrupt      ;    114       0x01C4       Timer F1 Overflow
     218:	15 c0       	rjmp	.+42     	; 0x244 <__ctors_end>
	...

0000021c <__vector_115>:
__vector_115:   JMP     __unhandled_interrupt      ;    115       0x01C8       Timer F1 Error
     21c:	13 c0       	rjmp	.+38     	; 0x244 <__ctors_end>
	...

00000220 <__vector_116>:
__vector_116:   JMP     __unhandled_interrupt      ;    116       0x01CC       Timer F1 Compare or Capture A
     220:	11 c0       	rjmp	.+34     	; 0x244 <__ctors_end>
	...

00000224 <__vector_117>:
__vector_117:   JMP     __unhandled_interrupt      ;    117       0x01D0       Timer F1 Compare or Capture B
     224:	0f c0       	rjmp	.+30     	; 0x244 <__ctors_end>
	...

00000228 <__vector_118>:
__vector_118:   JMP     __unhandled_interrupt      ;    118       0x01D4       SPI F
     228:	0d c0       	rjmp	.+26     	; 0x244 <__ctors_end>
	...

0000022c <__vector_119>:
__vector_119:   JMP     __unhandled_interrupt;usartf0_rx_isr             ;    119       0x01D8       USART F0 Rx  Complete	//modified_by_msa_to_meet_the_atmega32_constrains
     22c:	0b c0       	rjmp	.+22     	; 0x244 <__ctors_end>
	...

00000230 <__vector_120>:
__vector_120:   JMP     __unhandled_interrupt      ;    120       0x01DC       USART F0 Data Register Empty
     230:	09 c0       	rjmp	.+18     	; 0x244 <__ctors_end>
	...

00000234 <__vector_121>:
__vector_121:   JMP     __unhandled_interrupt      ;    121       0x01E0       USART F0 Tx Complete
     234:	07 c0       	rjmp	.+14     	; 0x244 <__ctors_end>
	...

00000238 <__vector_122>:
__vector_122:   JMP     __unhandled_interrupt      ;    122       0x01E4       USART F1 Rx Complete
     238:	05 c0       	rjmp	.+10     	; 0x244 <__ctors_end>
	...

0000023c <__vector_123>:
__vector_123:   JMP     __unhandled_interrupt      ;    123       0x01E8       USART F1 Data Register Empty
     23c:	03 c0       	rjmp	.+6      	; 0x244 <__ctors_end>
	...

00000240 <__vector_124>:
__vector_124:   JMP     __unhandled_interrupt      ;    124       0x01EC       USART F1 Tx Complete
     240:	01 c0       	rjmp	.+2      	; 0x244 <__ctors_end>
	...

00000244 <__ctors_end>:
     244:	11 24       	eor	r1, r1
     246:	1f be       	out	0x3f, r1	; 63
     248:	cf e5       	ldi	r28, 0x5F	; 95
     24a:	d8 e0       	ldi	r29, 0x08	; 8
     24c:	de bf       	out	0x3e, r29	; 62
     24e:	cd bf       	out	0x3d, r28	; 61

00000250 <__do_copy_data>:
     250:	11 e0       	ldi	r17, 0x01	; 1
     252:	a0 e6       	ldi	r26, 0x60	; 96
     254:	b0 e0       	ldi	r27, 0x00	; 0
     256:	e4 e5       	ldi	r30, 0x54	; 84
     258:	fe e1       	ldi	r31, 0x1E	; 30
     25a:	02 c0       	rjmp	.+4      	; 0x260 <__do_copy_data+0x10>
     25c:	05 90       	lpm	r0, Z+
     25e:	0d 92       	st	X+, r0
     260:	ac 38       	cpi	r26, 0x8C	; 140
     262:	b1 07       	cpc	r27, r17
     264:	d9 f7       	brne	.-10     	; 0x25c <__do_copy_data+0xc>

00000266 <__do_clear_bss>:
     266:	2e e0       	ldi	r18, 0x0E	; 14
     268:	ac e8       	ldi	r26, 0x8C	; 140
     26a:	b1 e0       	ldi	r27, 0x01	; 1
     26c:	01 c0       	rjmp	.+2      	; 0x270 <.do_clear_bss_start>

0000026e <.do_clear_bss_loop>:
     26e:	1d 92       	st	X+, r1

00000270 <.do_clear_bss_start>:
     270:	ac 3e       	cpi	r26, 0xEC	; 236
     272:	b2 07       	cpc	r27, r18
     274:	e1 f7       	brne	.-8      	; 0x26e <.do_clear_bss_loop>
     276:	43 d1       	rcall	.+646    	; 0x4fe <main>
     278:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <_exit>

0000027c <TickISR>:
;               Return from interrupt
;********************************************************************************************************

               
TickISR:       
		PUSH_ALL                                                ; Save all registers and status register        	
     27c:	0f 92       	push	r0
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	0f 92       	push	r0
     282:	1f 92       	push	r1
     284:	11 24       	eor	r1, r1
     286:	2f 92       	push	r2
     288:	3f 92       	push	r3
     28a:	4f 92       	push	r4
     28c:	5f 92       	push	r5
     28e:	6f 92       	push	r6
     290:	7f 92       	push	r7
     292:	8f 92       	push	r8
     294:	9f 92       	push	r9
     296:	af 92       	push	r10
     298:	bf 92       	push	r11
     29a:	cf 92       	push	r12
     29c:	df 92       	push	r13
     29e:	ef 92       	push	r14
     2a0:	ff 92       	push	r15
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
     2a6:	2f 93       	push	r18
     2a8:	3f 93       	push	r19
     2aa:	4f 93       	push	r20
     2ac:	5f 93       	push	r21
     2ae:	6f 93       	push	r22
     2b0:	7f 93       	push	r23
     2b2:	8f 93       	push	r24
     2b4:	9f 93       	push	r25
     2b6:	af 93       	push	r26
     2b8:	bf 93       	push	r27
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	ef 93       	push	r30
     2c0:	ff 93       	push	r31
		LDS     R16,OSIntNesting                                ; Notify uC/OS-II of ISR
     2c2:	00 91 4a 0b 	lds	r16, 0x0B4A	; 0x800b4a <OSIntNesting>
        INC     R16                                             ;
     2c6:	03 95       	inc	r16
        STS     OSIntNesting,R16                                ;
     2c8:	00 93 4a 0b 	sts	0x0B4A, r16	; 0x800b4a <OSIntNesting>

        CPI     R16,1                                           ; if (OSIntNesting == 1) {
     2cc:	01 30       	cpi	r16, 0x01	; 1
        BRNE    TickISR_1
     2ce:	41 f4       	brne	.+16     	; 0x2e0 <TickISR_1>

        SAVE_SP				                                    ; X = SP 		
     2d0:	ad b7       	in	r26, 0x3d	; 61
     2d2:	be b7       	in	r27, 0x3e	; 62
		LDS     R28,OSTCBCur                                    ; OSTCBCur->OSTCBStkPtr = X
     2d4:	c0 91 4b 0b 	lds	r28, 0x0B4B	; 0x800b4b <OSTCBCur>
        LDS     R29,OSTCBCur+1                                  ;    
     2d8:	d0 91 4c 0b 	lds	r29, 0x0B4C	; 0x800b4c <OSTCBCur+0x1>
        
		ST      Y+,R26
     2dc:	a9 93       	st	Y+, r26
        ST      Y+,R27                                          ; }

TickISR_1:
        CALL    OSTimeTick                                  	; Handle the tick ISR

        CALL    OSIntExit                                       ; Notify uC/OS-II about end of ISR
     2de:	b9 93       	st	Y+, r27

000002e0 <TickISR_1>:
     2e0:	39 d3       	rcall	.+1650   	; 0x954 <OSTimeTick>
        		
        POP_ALL                                                 ; Restore all registers
     2e2:	96 d2       	rcall	.+1324   	; 0x810 <OSIntExit>
     2e4:	ff 91       	pop	r31
     2e6:	ef 91       	pop	r30
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	bf 91       	pop	r27
     2ee:	af 91       	pop	r26
     2f0:	9f 91       	pop	r25
     2f2:	8f 91       	pop	r24
     2f4:	7f 91       	pop	r23
     2f6:	6f 91       	pop	r22
     2f8:	5f 91       	pop	r21
     2fa:	4f 91       	pop	r20
     2fc:	3f 91       	pop	r19
     2fe:	2f 91       	pop	r18
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	ff 90       	pop	r15
     306:	ef 90       	pop	r14
     308:	df 90       	pop	r13
     30a:	cf 90       	pop	r12
     30c:	bf 90       	pop	r11
     30e:	af 90       	pop	r10
     310:	9f 90       	pop	r9
     312:	8f 90       	pop	r8
     314:	7f 90       	pop	r7
     316:	6f 90       	pop	r6
     318:	5f 90       	pop	r5
     31a:	4f 90       	pop	r4
     31c:	3f 90       	pop	r3
     31e:	2f 90       	pop	r2
     320:	1f 90       	pop	r1
     322:	0f 90       	pop	r0
     324:	0f be       	out	0x3f, r0	; 63
        
        RETI
     326:	0f 90       	pop	r0
     328:	18 95       	reti

0000032a <OS_CPU_SR_Save>:
;                     Set SREG to cpu_sr
;                     Return
;********************************************************************************************************

OS_CPU_SR_Save:
        IN      R24,SREG                                        ; Get current state of interrupts disable flag
     32a:	8f b7       	in	r24, 0x3f	; 63
        CLI                                                     ; Disable interrupts
     32c:	f8 94       	cli
        RET                                                     ; Return original SREG value in R24
     32e:	08 95       	ret

00000330 <OS_CPU_SR_Restore>:


OS_CPU_SR_Restore:
        OUT     SREG,R24                                        ; Restore SREG
     330:	8f bf       	out	0x3f, r24	; 63
;                      b) Set OSRunning to TRUE,
;                      c) Switch to the highest priority task.
;********************************************************************************************************

OSStartHighRdy:
        CALL    OSTaskSwHook                                    ; Invoke user defined context switch hook
     332:	08 95       	ret

00000334 <OSStartHighRdy>:

        LDS     R16,OSRunning                                   ; Indicate that we are multitasking
     334:	25 d2       	rcall	.+1098   	; 0x780 <OSTaskSwHook>
     336:	00 91 f3 07 	lds	r16, 0x07F3	; 0x8007f3 <OSRunning>
        INC     R16                                             ;
        STS     OSRunning,R16                                   ;
     33a:	03 95       	inc	r16
     33c:	00 93 f3 07 	sts	0x07F3, r16	; 0x8007f3 <OSRunning>

        LDS     R26,OSTCBHighRdy                                ; Let X point to TCB of highest priority task
     340:	a0 91 09 0b 	lds	r26, 0x0B09	; 0x800b09 <OSTCBHighRdy>
        LDS     R27,OSTCBHighRdy+1                              ; ready to run
     344:	b0 91 0a 0b 	lds	r27, 0x0B0A	; 0x800b0a <OSTCBHighRdy+0x1>

        RESTORE_SP                                              ; SP = MEM[X];	
     348:	cd 91       	ld	r28, X+
     34a:	cd bf       	out	0x3d, r28	; 61
     34c:	dd 91       	ld	r29, X+
        POP_ALL                                                 ; Restore all registers
     34e:	de bf       	out	0x3e, r29	; 62
     350:	ff 91       	pop	r31
     352:	ef 91       	pop	r30
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	bf 91       	pop	r27
     35a:	af 91       	pop	r26
     35c:	9f 91       	pop	r25
     35e:	8f 91       	pop	r24
     360:	7f 91       	pop	r23
     362:	6f 91       	pop	r22
     364:	5f 91       	pop	r21
     366:	4f 91       	pop	r20
     368:	3f 91       	pop	r19
     36a:	2f 91       	pop	r18
     36c:	1f 91       	pop	r17
     36e:	0f 91       	pop	r16
     370:	ff 90       	pop	r15
     372:	ef 90       	pop	r14
     374:	df 90       	pop	r13
     376:	cf 90       	pop	r12
     378:	bf 90       	pop	r11
     37a:	af 90       	pop	r10
     37c:	9f 90       	pop	r9
     37e:	8f 90       	pop	r8
     380:	7f 90       	pop	r7
     382:	6f 90       	pop	r6
     384:	5f 90       	pop	r5
     386:	4f 90       	pop	r4
     388:	3f 90       	pop	r3
     38a:	2f 90       	pop	r2
     38c:	1f 90       	pop	r1
     38e:	0f 90       	pop	r0
     390:	0f be       	out	0x3f, r0	; 63
        RETI                                                    ; Start task
     392:	0f 90       	pop	r0
;                     - SP                         = OSTCBHighRdy->OSTCBStrkPtr
;                     - Pop all the register from the new stack
;********************************************************************************************************

OSCtxSw:
        PUSH_ALL                                                ; Save current task's context   				
     394:	18 95       	reti

00000396 <OSCtxSw>:
     396:	0f 92       	push	r0
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	0f 92       	push	r0
     39c:	1f 92       	push	r1
     39e:	11 24       	eor	r1, r1
     3a0:	2f 92       	push	r2
     3a2:	3f 92       	push	r3
     3a4:	4f 92       	push	r4
     3a6:	5f 92       	push	r5
     3a8:	6f 92       	push	r6
     3aa:	7f 92       	push	r7
     3ac:	8f 92       	push	r8
     3ae:	9f 92       	push	r9
     3b0:	af 92       	push	r10
     3b2:	bf 92       	push	r11
     3b4:	cf 92       	push	r12
     3b6:	df 92       	push	r13
     3b8:	ef 92       	push	r14
     3ba:	ff 92       	push	r15
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	2f 93       	push	r18
     3c2:	3f 93       	push	r19
     3c4:	4f 93       	push	r20
     3c6:	5f 93       	push	r21
     3c8:	6f 93       	push	r22
     3ca:	7f 93       	push	r23
     3cc:	8f 93       	push	r24
     3ce:	9f 93       	push	r25
     3d0:	af 93       	push	r26
     3d2:	bf 93       	push	r27
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	ef 93       	push	r30
		      
		IN      R26,  SPL                                       ; X = SP
     3da:	ff 93       	push	r31
		IN      R27,  SPH                                       ;              
     3dc:	ad b7       	in	r26, 0x3d	; 61
		
		LDS     R28,OSTCBCur                                    ; Y = OSTCBCur->OSTCBStkPtr
     3de:	be b7       	in	r27, 0x3e	; 62
     3e0:	c0 91 4b 0b 	lds	r28, 0x0B4B	; 0x800b4b <OSTCBCur>
        LDS     R29,OSTCBCur+1                                  ;        		
     3e4:	d0 91 4c 0b 	lds	r29, 0x0B4C	; 0x800b4c <OSTCBCur+0x1>
        ST      Y+,R26                                          ; Y = SP
        ST      Y+,R27                                          ;

        CALL    OSTaskSwHook                                    ; Call user defined task switch hook
     3e8:	a9 93       	st	Y+, r26

        LDS     R16,OSPrioHighRdy                               ; OSPrioCur = OSPrioHighRdy
     3ea:	b9 93       	st	Y+, r27
     3ec:	c9 d1       	rcall	.+914    	; 0x780 <OSTaskSwHook>
        STS     OSPrioCur,R16
     3ee:	00 91 fa 07 	lds	r16, 0x07FA	; 0x8007fa <OSPrioHighRdy>

        LDS     R26,OSTCBHighRdy                                ; Let X point to TCB of highest priority task
     3f2:	00 93 c3 09 	sts	0x09C3, r16	; 0x8009c3 <OSPrioCur>
        LDS     R27,OSTCBHighRdy+1                              ; ready to run
     3f6:	a0 91 09 0b 	lds	r26, 0x0B09	; 0x800b09 <OSTCBHighRdy>
        STS     OSTCBCur,R26                                    ; OSTCBCur = OSTCBHighRdy
     3fa:	b0 91 0a 0b 	lds	r27, 0x0B0A	; 0x800b0a <OSTCBHighRdy+0x1>
        STS     OSTCBCur+1,R27                                  
     3fe:	a0 93 4b 0b 	sts	0x0B4B, r26	; 0x800b4b <OSTCBCur>
     
	    RESTORE_SP                                              ; SP = MEM[X];						        
     402:	b0 93 4c 0b 	sts	0x0B4C, r27	; 0x800b4c <OSTCBCur+0x1>
     406:	cd 91       	ld	r28, X+
     408:	cd bf       	out	0x3d, r28	; 61
		POP_ALL
     40a:	dd 91       	ld	r29, X+
     40c:	de bf       	out	0x3e, r29	; 62
     40e:	ff 91       	pop	r31
     410:	ef 91       	pop	r30
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	bf 91       	pop	r27
     418:	af 91       	pop	r26
     41a:	9f 91       	pop	r25
     41c:	8f 91       	pop	r24
     41e:	7f 91       	pop	r23
     420:	6f 91       	pop	r22
     422:	5f 91       	pop	r21
     424:	4f 91       	pop	r20
     426:	3f 91       	pop	r19
     428:	2f 91       	pop	r18
     42a:	1f 91       	pop	r17
     42c:	0f 91       	pop	r16
     42e:	ff 90       	pop	r15
     430:	ef 90       	pop	r14
     432:	df 90       	pop	r13
     434:	cf 90       	pop	r12
     436:	bf 90       	pop	r11
     438:	af 90       	pop	r10
     43a:	9f 90       	pop	r9
     43c:	8f 90       	pop	r8
     43e:	7f 90       	pop	r7
     440:	6f 90       	pop	r6
     442:	5f 90       	pop	r5
     444:	4f 90       	pop	r4
     446:	3f 90       	pop	r3
     448:	2f 90       	pop	r2
     44a:	1f 90       	pop	r1
		RET
     44c:	0f 90       	pop	r0
;                                                PCH
;                                                PCL                                     (High memory)
;*********************************************************************************************************

OSIntCtxSw:
        CALL    OSTaskSwHook                                    ; Call user defined task switch hook
     44e:	0f be       	out	0x3f, r0	; 63
     450:	0f 90       	pop	r0

        LDS     R16,OSPrioHighRdy                               ; OSPrioCur = OSPrioHighRdy
     452:	08 95       	ret

00000454 <OSIntCtxSw>:
     454:	95 d1       	rcall	.+810    	; 0x780 <OSTaskSwHook>
        STS     OSPrioCur,R16                                   ;
     456:	00 91 fa 07 	lds	r16, 0x07FA	; 0x8007fa <OSPrioHighRdy>

        LDS     R26,OSTCBHighRdy                                ; X = OSTCBHighRdy->OSTCBStkPtr
     45a:	00 93 c3 09 	sts	0x09C3, r16	; 0x8009c3 <OSPrioCur>
        LDS     R27,OSTCBHighRdy+1                              ;
     45e:	a0 91 09 0b 	lds	r26, 0x0B09	; 0x800b09 <OSTCBHighRdy>
        STS     OSTCBCur,R26                                    ; OSTCBCur = OSTCBHighRdy
     462:	b0 91 0a 0b 	lds	r27, 0x0B0A	; 0x800b0a <OSTCBHighRdy+0x1>
        STS     OSTCBCur+1,R27                                  ;
     466:	a0 93 4b 0b 	sts	0x0B4B, r26	; 0x800b4b <OSTCBCur>

        RESTORE_SP                                              ; SP = MEM[X];					     
     46a:	b0 93 4c 0b 	sts	0x0B4C, r27	; 0x800b4c <OSTCBCur+0x1>
     46e:	cd 91       	ld	r28, X+
     470:	cd bf       	out	0x3d, r28	; 61
		POP_ALL                                                 ; Restore all registers
     472:	dd 91       	ld	r29, X+
     474:	de bf       	out	0x3e, r29	; 62
     476:	ff 91       	pop	r31
     478:	ef 91       	pop	r30
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	bf 91       	pop	r27
     480:	af 91       	pop	r26
     482:	9f 91       	pop	r25
     484:	8f 91       	pop	r24
     486:	7f 91       	pop	r23
     488:	6f 91       	pop	r22
     48a:	5f 91       	pop	r21
     48c:	4f 91       	pop	r20
     48e:	3f 91       	pop	r19
     490:	2f 91       	pop	r18
     492:	1f 91       	pop	r17
     494:	0f 91       	pop	r16
     496:	ff 90       	pop	r15
     498:	ef 90       	pop	r14
     49a:	df 90       	pop	r13
     49c:	cf 90       	pop	r12
     49e:	bf 90       	pop	r11
     4a0:	af 90       	pop	r10
     4a2:	9f 90       	pop	r9
     4a4:	8f 90       	pop	r8
     4a6:	7f 90       	pop	r7
     4a8:	6f 90       	pop	r6
     4aa:	5f 90       	pop	r5
     4ac:	4f 90       	pop	r4
     4ae:	3f 90       	pop	r3
     4b0:	2f 90       	pop	r2
     4b2:	1f 90       	pop	r1
     4b4:	0f 90       	pop	r0
        RETI
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	0f 90       	pop	r0
     4ba:	18 95       	reti

000004bc <App_TaskCreateHook>:
*********************************************************************************************************
*/

#if (OS_APP_HOOKS_EN > 0)
void  App_TaskCreateHook (OS_TCB *ptcb)
{
     4bc:	08 95       	ret

000004be <App_TaskDelHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskDelHook (OS_TCB *ptcb)
{
     4be:	08 95       	ret

000004c0 <App_TaskIdleHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 251
void  App_TaskIdleHook (void)
{
     4c0:	08 95       	ret

000004c2 <App_TaskStatHook>:
* Returns    : none
*********************************************************************************************************
*/

void  App_TaskStatHook (void)
{
     4c2:	08 95       	ret

000004c4 <App_TaskSwHook>:
*********************************************************************************************************
*/

#if OS_TASK_SW_HOOK_EN > 0
void  App_TaskSwHook (void)
{
     4c4:	08 95       	ret

000004c6 <App_TCBInitHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 204
void  App_TCBInitHook (OS_TCB *ptcb)
{
     4c6:	08 95       	ret

000004c8 <App_TimeTickHook>:
*********************************************************************************************************
*/

#if OS_TIME_TICK_HOOK_EN > 0
void  App_TimeTickHook (void)
{
     4c8:	08 95       	ret

000004ca <Task1>:
*********************************************************************************************************
*/

// Task1: PRIORITY=3
static void Task1(void *p_arg)
{
     4ca:	ff cf       	rjmp	.-2      	; 0x4ca <Task1>

000004cc <Task5>:
	}       
} // Task4()

// Task5: PRIORITY=7
static void Task5(void *p_arg)
{
     4cc:	ff cf       	rjmp	.-2      	; 0x4cc <Task5>

000004ce <Task4>:
//         Toggle LED6
//                 PORTE.OUTTGL=0x40;
//                 // Print CPU USAGE to USARTXX if enabled
//                 if(show_cpu_usage)
//                     printf("CPU USAGE=%d%%\n",OSCPUUsage);
                 OSTimeDlyHMSM(0,0,1,0);    
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	41 e0       	ldi	r20, 0x01	; 1
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	0e 94 c0 0c 	call	0x1980	; 0x1980 <OSTimeDlyHMSM>
     4dc:	f8 cf       	rjmp	.-16     	; 0x4ce <Task4>

000004de <Task3>:
    // Task body (always written as an infinite loop) 
    while(1)
    {
        // Toggle LED5
//         PORTE.OUTTGL=0x20;
        OSTimeDlyHMSM(0,0,0,500);
     4de:	24 ef       	ldi	r18, 0xF4	; 244
     4e0:	31 e0       	ldi	r19, 0x01	; 1
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	0e 94 c0 0c 	call	0x1980	; 0x1980 <OSTimeDlyHMSM>
     4ec:	f8 cf       	rjmp	.-16     	; 0x4de <Task3>

000004ee <Task2>:
    // Task body (always written as an infinite loop) 
    while(1)
    {
        // Toggle LED4
       // PORTE.OUTTGL=0x10;
        OSTimeDlyHMSM(0,0,0,250);
     4ee:	2a ef       	ldi	r18, 0xFA	; 250
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	40 e0       	ldi	r20, 0x00	; 0
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	0e 94 c0 0c 	call	0x1980	; 0x1980 <OSTimeDlyHMSM>
     4fc:	f8 cf       	rjmp	.-16     	; 0x4ee <Task2>

000004fe <main>:
// #elif PRINT_TO_USART == F0
// static FILE mystdout = FDEV_SETUP_STREAM(usartf0_putchar, NULL, _FDEV_SETUP_WRITE);				//modified_by_msa_to_meet_the_atmega32_constrains
// #endif

int main(void)
{
     4fe:	8f 92       	push	r8
     500:	9f 92       	push	r9
     502:	af 92       	push	r10
     504:	bf 92       	push	r11
     506:	cf 92       	push	r12
     508:	df 92       	push	r13
     50a:	ef 92       	push	r14
     50c:	ff 92       	push	r15
     50e:	0f 93       	push	r16
//     Redefine standard output stream
//         stdout=&mystdout;				//modified_by_msa_to_meet_the_atmega32_constrains
//         // Initialize AVR
//         AVRInit();				//modified_by_msa_to_meet_the_atmega32_constrains
  	// Initialize uC/OS-II
    OSInit();
     510:	1f 93       	push	r17
    // Create the start task
    OSTaskCreateExt((void (*)(void *)) TaskStart,
     512:	25 d3       	rcall	.+1610   	; 0xb5e <OSInit>
     514:	1f 92       	push	r1
     516:	83 e0       	ldi	r24, 0x03	; 3
     518:	8f 93       	push	r24
     51a:	81 2c       	mov	r8, r1
     51c:	91 2c       	mov	r9, r1
     51e:	0f 2e       	mov	r0, r31
     520:	f4 e6       	ldi	r31, 0x64	; 100
     522:	af 2e       	mov	r10, r31
     524:	b1 2c       	mov	r11, r1
     526:	c1 2c       	mov	r12, r1
     528:	d1 2c       	mov	r13, r1
     52a:	f0 2d       	mov	r31, r0
     52c:	0f 2e       	mov	r0, r31
     52e:	f8 e6       	ldi	r31, 0x68	; 104
     530:	ef 2e       	mov	r14, r31
     532:	f7 e0       	ldi	r31, 0x07	; 7
     534:	ff 2e       	mov	r15, r31
     536:	f0 2d       	mov	r31, r0
     538:	02 e0       	ldi	r16, 0x02	; 2
     53a:	10 e0       	ldi	r17, 0x00	; 0
     53c:	22 e0       	ldi	r18, 0x02	; 2
     53e:	4b ec       	ldi	r20, 0xCB	; 203
     540:	57 e0       	ldi	r21, 0x07	; 7
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	80 e4       	ldi	r24, 0x40	; 64
     548:	93 e0       	ldi	r25, 0x03	; 3
    // Create semaphores
//     usartc0_rx=OSSemCreate(0);				//modified_by_msa_to_meet_the_atmega32_constrains
//     usartf0_rx=OSSemCreate(0);
//    pushbutton_event=OSSemCreate(0);
    // Start multi-tasking
    OSStart();
     54a:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <OSTaskCreateExt>
     54e:	be d1       	rcall	.+892    	; 0x8cc <OSStart>
     550:	0f 90       	pop	r0
    return 0;
}
     552:	0f 90       	pop	r0
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	1f 91       	pop	r17
     55a:	0f 91       	pop	r16
     55c:	ff 90       	pop	r15
     55e:	ef 90       	pop	r14
     560:	df 90       	pop	r13
     562:	cf 90       	pop	r12
     564:	bf 90       	pop	r11
     566:	af 90       	pop	r10
     568:	9f 90       	pop	r9
     56a:	8f 90       	pop	r8
     56c:	08 95       	ret

0000056e <TaskStartCreateTasks>:
*                                                FUNCTIONS
*********************************************************************************************************
*/

void TaskStartCreateTasks(void)
{
     56e:	8f 92       	push	r8
     570:	9f 92       	push	r9
     572:	af 92       	push	r10
     574:	bf 92       	push	r11
     576:	cf 92       	push	r12
     578:	df 92       	push	r13
     57a:	ef 92       	push	r14
     57c:	ff 92       	push	r15
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
    // Task1: PRIORITY=3
    OSTaskCreateExt((void (*)(void *)) Task1,
     584:	1f 92       	push	r1
     586:	c3 e0       	ldi	r28, 0x03	; 3
     588:	cf 93       	push	r28
     58a:	81 2c       	mov	r8, r1
     58c:	91 2c       	mov	r9, r1
     58e:	0f 2e       	mov	r0, r31
     590:	fc e2       	ldi	r31, 0x2C	; 44
     592:	af 2e       	mov	r10, r31
     594:	bb 24       	eor	r11, r11
     596:	b3 94       	inc	r11
     598:	c1 2c       	mov	r12, r1
     59a:	d1 2c       	mov	r13, r1
     59c:	f0 2d       	mov	r31, r0
     59e:	0f 2e       	mov	r0, r31
     5a0:	fc e8       	ldi	r31, 0x8C	; 140
     5a2:	ef 2e       	mov	r14, r31
     5a4:	f1 e0       	ldi	r31, 0x01	; 1
     5a6:	ff 2e       	mov	r15, r31
     5a8:	f0 2d       	mov	r31, r0
     5aa:	03 e0       	ldi	r16, 0x03	; 3
     5ac:	10 e0       	ldi	r17, 0x00	; 0
     5ae:	23 e0       	ldi	r18, 0x03	; 3
     5b0:	47 eb       	ldi	r20, 0xB7	; 183
     5b2:	52 e0       	ldi	r21, 0x02	; 2
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	85 e6       	ldi	r24, 0x65	; 101
     5ba:	92 e0       	ldi	r25, 0x02	; 2
     5bc:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <OSTaskCreateExt>
                    (INT32U          ) APP_CFG_TASK_STK_SIZE,
                    (void           *) 0,
                    (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));

    // Task2: PRIORITY=4
    OSTaskCreateExt((void (*)(void *)) Task2,
     5c0:	1f 92       	push	r1
     5c2:	cf 93       	push	r28
     5c4:	0f 2e       	mov	r0, r31
     5c6:	f8 eb       	ldi	r31, 0xB8	; 184
     5c8:	ef 2e       	mov	r14, r31
     5ca:	f2 e0       	ldi	r31, 0x02	; 2
     5cc:	ff 2e       	mov	r15, r31
     5ce:	f0 2d       	mov	r31, r0
     5d0:	04 e0       	ldi	r16, 0x04	; 4
     5d2:	10 e0       	ldi	r17, 0x00	; 0
     5d4:	24 e0       	ldi	r18, 0x04	; 4
     5d6:	43 ee       	ldi	r20, 0xE3	; 227
     5d8:	53 e0       	ldi	r21, 0x03	; 3
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	87 e7       	ldi	r24, 0x77	; 119
     5e0:	92 e0       	ldi	r25, 0x02	; 2
     5e2:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <OSTaskCreateExt>
                    (INT32U          ) APP_CFG_TASK_STK_SIZE,
                    (void           *) 0,
                    (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));

    // Task3: PRIORITY=5
    OSTaskCreateExt((void (*)(void *)) Task3,
     5e6:	1f 92       	push	r1
     5e8:	cf 93       	push	r28
     5ea:	0f 2e       	mov	r0, r31
     5ec:	f4 ee       	ldi	r31, 0xE4	; 228
     5ee:	ef 2e       	mov	r14, r31
     5f0:	f3 e0       	ldi	r31, 0x03	; 3
     5f2:	ff 2e       	mov	r15, r31
     5f4:	f0 2d       	mov	r31, r0
     5f6:	05 e0       	ldi	r16, 0x05	; 5
     5f8:	10 e0       	ldi	r17, 0x00	; 0
     5fa:	25 e0       	ldi	r18, 0x05	; 5
     5fc:	4f e0       	ldi	r20, 0x0F	; 15
     5fe:	55 e0       	ldi	r21, 0x05	; 5
     600:	60 e0       	ldi	r22, 0x00	; 0
     602:	70 e0       	ldi	r23, 0x00	; 0
     604:	8f e6       	ldi	r24, 0x6F	; 111
     606:	92 e0       	ldi	r25, 0x02	; 2
     608:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <OSTaskCreateExt>
                    (INT32U          ) APP_CFG_TASK_STK_SIZE,
                    (void           *) 0,
                    (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));

    // Task4: PRIORITY=6
    OSTaskCreateExt((void (*)(void *)) Task4,
     60c:	1f 92       	push	r1
     60e:	cf 93       	push	r28
     610:	0f 2e       	mov	r0, r31
     612:	f0 e1       	ldi	r31, 0x10	; 16
     614:	ef 2e       	mov	r14, r31
     616:	f5 e0       	ldi	r31, 0x05	; 5
     618:	ff 2e       	mov	r15, r31
     61a:	f0 2d       	mov	r31, r0
     61c:	06 e0       	ldi	r16, 0x06	; 6
     61e:	10 e0       	ldi	r17, 0x00	; 0
     620:	26 e0       	ldi	r18, 0x06	; 6
     622:	4b e3       	ldi	r20, 0x3B	; 59
     624:	56 e0       	ldi	r21, 0x06	; 6
     626:	60 e0       	ldi	r22, 0x00	; 0
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	87 e6       	ldi	r24, 0x67	; 103
     62c:	92 e0       	ldi	r25, 0x02	; 2
     62e:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <OSTaskCreateExt>
                    (INT32U          ) APP_CFG_TASK_STK_SIZE,
                    (void           *) 0,
                    (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
    
    // Task5: PRIORITY=7
    OSTaskCreateExt((void (*)(void *)) Task5,
     632:	1f 92       	push	r1
     634:	cf 93       	push	r28
     636:	0f 2e       	mov	r0, r31
     638:	fc e3       	ldi	r31, 0x3C	; 60
     63a:	ef 2e       	mov	r14, r31
     63c:	f6 e0       	ldi	r31, 0x06	; 6
     63e:	ff 2e       	mov	r15, r31
     640:	f0 2d       	mov	r31, r0
     642:	07 e0       	ldi	r16, 0x07	; 7
     644:	10 e0       	ldi	r17, 0x00	; 0
     646:	27 e0       	ldi	r18, 0x07	; 7
     648:	47 e6       	ldi	r20, 0x67	; 103
     64a:	57 e0       	ldi	r21, 0x07	; 7
     64c:	60 e0       	ldi	r22, 0x00	; 0
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	86 e6       	ldi	r24, 0x66	; 102
     652:	92 e0       	ldi	r25, 0x02	; 2
     654:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <OSTaskCreateExt>
                    (INT16U          ) 7,
                    (OS_STK         *)&TaskStk[4][0],
                    (INT32U          ) APP_CFG_TASK_STK_SIZE,
                    (void           *) 0,
                    (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
} // TaskStartCreateTasks()
     658:	8d b7       	in	r24, 0x3d	; 61
     65a:	9e b7       	in	r25, 0x3e	; 62
     65c:	0a 96       	adiw	r24, 0x0a	; 10
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	f8 94       	cli
     662:	9e bf       	out	0x3e, r25	; 62
     664:	0f be       	out	0x3f, r0	; 63
     666:	8d bf       	out	0x3d, r24	; 61
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	df 90       	pop	r13
     674:	cf 90       	pop	r12
     676:	bf 90       	pop	r11
     678:	af 90       	pop	r10
     67a:	9f 90       	pop	r9
     67c:	8f 90       	pop	r8
     67e:	08 95       	ret

00000680 <TaskStart>:
    //ClockTickStart();
    #if (OS_TASK_STAT_EN > 0)
    OSStatInit();
    #endif
    // Create tasks
    TaskStartCreateTasks();
     680:	3f d1       	rcall	.+638    	; 0x900 <OSStatInit>
    // Delete start task
    OSTaskDel(OS_PRIO_SELF);    
     682:	75 df       	rcall	.-278    	; 0x56e <TaskStartCreateTasks>
     684:	8f ef       	ldi	r24, 0xFF	; 255
     686:	c5 c6       	rjmp	.+3466   	; 0x1412 <OSTaskDel>
     688:	08 95       	ret

0000068a <OSInitHookBegin>:
*/
#if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
void  OSInitHookBegin (void)
{
#if OS_VERSION >= 281 && OS_TMR_EN > 0
    OSTmrCtr = 0;
     68a:	10 92 cd 07 	sts	0x07CD, r1	; 0x8007cd <OSTmrCtr+0x1>
     68e:	10 92 cc 07 	sts	0x07CC, r1	; 0x8007cc <OSTmrCtr>
     692:	08 95       	ret

00000694 <OSInitHookEnd>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
void  OSInitHookEnd (void)
{
     694:	08 95       	ret

00000696 <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0
void  OSTaskCreateHook (OS_TCB *ptcb)
{
     696:	12 cf       	rjmp	.-476    	; 0x4bc <App_TaskCreateHook>
     698:	08 95       	ret

0000069a <OSTaskDelHook>:
     69a:	11 cf       	rjmp	.-478    	; 0x4be <App_TaskDelHook>
     69c:	08 95       	ret

0000069e <OSTaskIdleHook>:
     69e:	10 cf       	rjmp	.-480    	; 0x4c0 <App_TaskIdleHook>
     6a0:	08 95       	ret

000006a2 <OSTaskStatHook>:
     6a2:	0f cf       	rjmp	.-482    	; 0x4c2 <App_TaskStatHook>
     6a4:	08 95       	ret

000006a6 <OSTaskStkInit>:
     6a6:	09 2e       	mov	r0, r25
     6a8:	00 0c       	add	r0, r0
     6aa:	aa 0b       	sbc	r26, r26
     6ac:	bb 0b       	sbc	r27, r27
     6ae:	fa 01       	movw	r30, r20
     6b0:	80 83       	st	Z, r24
     6b2:	31 97       	sbiw	r30, 0x01	; 1
     6b4:	90 83       	st	Z, r25
     6b6:	31 97       	sbiw	r30, 0x01	; 1
     6b8:	a0 83       	st	Z, r26
     6ba:	31 97       	sbiw	r30, 0x01	; 1
     6bc:	10 82       	st	Z, r1
     6be:	31 97       	sbiw	r30, 0x01	; 1
     6c0:	80 e8       	ldi	r24, 0x80	; 128
     6c2:	80 83       	st	Z, r24
     6c4:	31 97       	sbiw	r30, 0x01	; 1
     6c6:	10 82       	st	Z, r1
     6c8:	31 97       	sbiw	r30, 0x01	; 1
     6ca:	82 e0       	ldi	r24, 0x02	; 2
     6cc:	80 83       	st	Z, r24
     6ce:	31 97       	sbiw	r30, 0x01	; 1
     6d0:	83 e0       	ldi	r24, 0x03	; 3
     6d2:	80 83       	st	Z, r24
     6d4:	31 97       	sbiw	r30, 0x01	; 1
     6d6:	84 e0       	ldi	r24, 0x04	; 4
     6d8:	80 83       	st	Z, r24
     6da:	31 97       	sbiw	r30, 0x01	; 1
     6dc:	85 e0       	ldi	r24, 0x05	; 5
     6de:	80 83       	st	Z, r24
     6e0:	31 97       	sbiw	r30, 0x01	; 1
     6e2:	86 e0       	ldi	r24, 0x06	; 6
     6e4:	80 83       	st	Z, r24
     6e6:	31 97       	sbiw	r30, 0x01	; 1
     6e8:	87 e0       	ldi	r24, 0x07	; 7
     6ea:	80 83       	st	Z, r24
     6ec:	31 97       	sbiw	r30, 0x01	; 1
     6ee:	88 e0       	ldi	r24, 0x08	; 8
     6f0:	80 83       	st	Z, r24
     6f2:	31 97       	sbiw	r30, 0x01	; 1
     6f4:	89 e0       	ldi	r24, 0x09	; 9
     6f6:	80 83       	st	Z, r24
     6f8:	31 97       	sbiw	r30, 0x01	; 1
     6fa:	80 e1       	ldi	r24, 0x10	; 16
     6fc:	80 83       	st	Z, r24
     6fe:	31 97       	sbiw	r30, 0x01	; 1
     700:	81 e1       	ldi	r24, 0x11	; 17
     702:	80 83       	st	Z, r24
     704:	31 97       	sbiw	r30, 0x01	; 1
     706:	82 e1       	ldi	r24, 0x12	; 18
     708:	80 83       	st	Z, r24
     70a:	31 97       	sbiw	r30, 0x01	; 1
     70c:	83 e1       	ldi	r24, 0x13	; 19
     70e:	80 83       	st	Z, r24
     710:	31 97       	sbiw	r30, 0x01	; 1
     712:	84 e1       	ldi	r24, 0x14	; 20
     714:	80 83       	st	Z, r24
     716:	31 97       	sbiw	r30, 0x01	; 1
     718:	85 e1       	ldi	r24, 0x15	; 21
     71a:	80 83       	st	Z, r24
     71c:	31 97       	sbiw	r30, 0x01	; 1
     71e:	86 e1       	ldi	r24, 0x16	; 22
     720:	80 83       	st	Z, r24
     722:	31 97       	sbiw	r30, 0x01	; 1
     724:	87 e1       	ldi	r24, 0x17	; 23
     726:	80 83       	st	Z, r24
     728:	31 97       	sbiw	r30, 0x01	; 1
     72a:	88 e1       	ldi	r24, 0x18	; 24
     72c:	80 83       	st	Z, r24
     72e:	31 97       	sbiw	r30, 0x01	; 1
     730:	89 e1       	ldi	r24, 0x19	; 25
     732:	80 83       	st	Z, r24
     734:	31 97       	sbiw	r30, 0x01	; 1
     736:	80 e2       	ldi	r24, 0x20	; 32
     738:	80 83       	st	Z, r24
     73a:	31 97       	sbiw	r30, 0x01	; 1
     73c:	81 e2       	ldi	r24, 0x21	; 33
     73e:	80 83       	st	Z, r24
     740:	31 97       	sbiw	r30, 0x01	; 1
     742:	82 e2       	ldi	r24, 0x22	; 34
     744:	80 83       	st	Z, r24
     746:	31 97       	sbiw	r30, 0x01	; 1
     748:	83 e2       	ldi	r24, 0x23	; 35
     74a:	80 83       	st	Z, r24
     74c:	31 97       	sbiw	r30, 0x01	; 1
     74e:	60 83       	st	Z, r22
     750:	31 97       	sbiw	r30, 0x01	; 1
     752:	cb 01       	movw	r24, r22
     754:	90 83       	st	Z, r25
     756:	31 97       	sbiw	r30, 0x01	; 1
     758:	86 e2       	ldi	r24, 0x26	; 38
     75a:	80 83       	st	Z, r24
     75c:	31 97       	sbiw	r30, 0x01	; 1
     75e:	87 e2       	ldi	r24, 0x27	; 39
     760:	80 83       	st	Z, r24
     762:	31 97       	sbiw	r30, 0x01	; 1
     764:	88 e2       	ldi	r24, 0x28	; 40
     766:	80 83       	st	Z, r24
     768:	31 97       	sbiw	r30, 0x01	; 1
     76a:	89 e2       	ldi	r24, 0x29	; 41
     76c:	80 83       	st	Z, r24
     76e:	31 97       	sbiw	r30, 0x01	; 1
     770:	80 e3       	ldi	r24, 0x30	; 48
     772:	80 83       	st	Z, r24
     774:	31 97       	sbiw	r30, 0x01	; 1
     776:	81 e3       	ldi	r24, 0x31	; 49
     778:	80 83       	st	Z, r24
     77a:	ca 01       	movw	r24, r20
     77c:	84 97       	sbiw	r24, 0x24	; 36
     77e:	08 95       	ret

00000780 <OSTaskSwHook>:
     780:	a1 ce       	rjmp	.-702    	; 0x4c4 <App_TaskSwHook>
     782:	08 95       	ret

00000784 <OSTCBInitHook>:
     784:	a0 ce       	rjmp	.-704    	; 0x4c6 <App_TCBInitHook>
     786:	08 95       	ret

00000788 <OSTimeTickHook>:
     788:	9f de       	rcall	.-706    	; 0x4c8 <App_TimeTickHook>
     78a:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <OSTmrCtr>
     78e:	90 91 cd 07 	lds	r25, 0x07CD	; 0x8007cd <OSTmrCtr+0x1>
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	84 36       	cpi	r24, 0x64	; 100
     796:	91 05       	cpc	r25, r1
     798:	28 f4       	brcc	.+10     	; 0x7a4 <OSTimeTickHook+0x1c>
     79a:	90 93 cd 07 	sts	0x07CD, r25	; 0x8007cd <OSTmrCtr+0x1>
     79e:	80 93 cc 07 	sts	0x07CC, r24	; 0x8007cc <OSTmrCtr>
     7a2:	08 95       	ret
     7a4:	10 92 cd 07 	sts	0x07CD, r1	; 0x8007cd <OSTmrCtr+0x1>
     7a8:	10 92 cc 07 	sts	0x07CC, r1	; 0x8007cc <OSTmrCtr>
     7ac:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <OSTmrSignal>
     7b0:	08 95       	ret

000007b2 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0u
void  OSDebugInit (void)
{
     7b2:	08 95       	ret

000007b4 <OS_SchedNew>:
    while (*psrc != OS_ASCII_NUL) {
        psrc++;
        len++;
    }
    return (len);
}
     7b4:	e0 91 0d 0b 	lds	r30, 0x0B0D	; 0x800b0d <OSRdyGrp>
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	e2 58       	subi	r30, 0x82	; 130
     7bc:	ff 4f       	sbci	r31, 0xFF	; 255
     7be:	80 81       	ld	r24, Z
     7c0:	e8 2f       	mov	r30, r24
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	e2 5f       	subi	r30, 0xF2	; 242
     7c6:	f4 4f       	sbci	r31, 0xF4	; 244
     7c8:	e0 81       	ld	r30, Z
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	e2 58       	subi	r30, 0x82	; 130
     7ce:	ff 4f       	sbci	r31, 0xFF	; 255
     7d0:	88 0f       	add	r24, r24
     7d2:	88 0f       	add	r24, r24
     7d4:	88 0f       	add	r24, r24
     7d6:	90 81       	ld	r25, Z
     7d8:	89 0f       	add	r24, r25
     7da:	80 93 fa 07 	sts	0x07FA, r24	; 0x8007fa <OSPrioHighRdy>
     7de:	08 95       	ret

000007e0 <OS_TaskIdle>:
     7e0:	a4 dd       	rcall	.-1208   	; 0x32a <OS_CPU_SR_Save>
     7e2:	40 91 f4 07 	lds	r20, 0x07F4	; 0x8007f4 <OSIdleCtr>
     7e6:	50 91 f5 07 	lds	r21, 0x07F5	; 0x8007f5 <OSIdleCtr+0x1>
     7ea:	60 91 f6 07 	lds	r22, 0x07F6	; 0x8007f6 <OSIdleCtr+0x2>
     7ee:	70 91 f7 07 	lds	r23, 0x07F7	; 0x8007f7 <OSIdleCtr+0x3>
     7f2:	4f 5f       	subi	r20, 0xFF	; 255
     7f4:	5f 4f       	sbci	r21, 0xFF	; 255
     7f6:	6f 4f       	sbci	r22, 0xFF	; 255
     7f8:	7f 4f       	sbci	r23, 0xFF	; 255
     7fa:	40 93 f4 07 	sts	0x07F4, r20	; 0x8007f4 <OSIdleCtr>
     7fe:	50 93 f5 07 	sts	0x07F5, r21	; 0x8007f5 <OSIdleCtr+0x1>
     802:	60 93 f6 07 	sts	0x07F6, r22	; 0x8007f6 <OSIdleCtr+0x2>
     806:	70 93 f7 07 	sts	0x07F7, r23	; 0x8007f7 <OSIdleCtr+0x3>
     80a:	92 dd       	rcall	.-1244   	; 0x330 <OS_CPU_SR_Restore>
     80c:	48 df       	rcall	.-368    	; 0x69e <OSTaskIdleHook>
     80e:	e8 cf       	rjmp	.-48     	; 0x7e0 <OS_TaskIdle>

00000810 <OSIntExit>:
     810:	cf 93       	push	r28
     812:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <OSRunning>
     816:	81 30       	cpi	r24, 0x01	; 1
     818:	09 f0       	breq	.+2      	; 0x81c <OSIntExit+0xc>
     81a:	44 c0       	rjmp	.+136    	; 0x8a4 <__stack+0x45>
     81c:	86 dd       	rcall	.-1268   	; 0x32a <OS_CPU_SR_Save>
     81e:	c8 2f       	mov	r28, r24
     820:	80 91 4a 0b 	lds	r24, 0x0B4A	; 0x800b4a <OSIntNesting>
     824:	88 23       	and	r24, r24
     826:	29 f0       	breq	.+10     	; 0x832 <OSIntExit+0x22>
     828:	81 50       	subi	r24, 0x01	; 1
     82a:	80 93 4a 0b 	sts	0x0B4A, r24	; 0x800b4a <OSIntNesting>
     82e:	81 11       	cpse	r24, r1
     830:	37 c0       	rjmp	.+110    	; 0x8a0 <__stack+0x41>
     832:	80 91 f0 07 	lds	r24, 0x07F0	; 0x8007f0 <OSLockNesting>
     836:	81 11       	cpse	r24, r1
     838:	33 c0       	rjmp	.+102    	; 0x8a0 <__stack+0x41>
     83a:	bc df       	rcall	.-136    	; 0x7b4 <OS_SchedNew>
     83c:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <OSPrioHighRdy>
     840:	e8 2f       	mov	r30, r24
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	ee 0f       	add	r30, r30
     846:	ff 1f       	adc	r31, r31
     848:	e8 59       	subi	r30, 0x98	; 152
     84a:	f1 4f       	sbci	r31, 0xF1	; 241
     84c:	01 90       	ld	r0, Z+
     84e:	f0 81       	ld	r31, Z
     850:	e0 2d       	mov	r30, r0
     852:	f0 93 0a 0b 	sts	0x0B0A, r31	; 0x800b0a <OSTCBHighRdy+0x1>
     856:	e0 93 09 0b 	sts	0x0B09, r30	; 0x800b09 <OSTCBHighRdy>
     85a:	90 91 c3 09 	lds	r25, 0x09C3	; 0x8009c3 <OSPrioCur>
     85e:	89 17       	cp	r24, r25
     860:	f9 f0       	breq	.+62     	; 0x8a0 <__stack+0x41>
     862:	86 a1       	ldd	r24, Z+38	; 0x26
     864:	97 a1       	ldd	r25, Z+39	; 0x27
     866:	a0 a5       	ldd	r26, Z+40	; 0x28
     868:	b1 a5       	ldd	r27, Z+41	; 0x29
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	a1 1d       	adc	r26, r1
     86e:	b1 1d       	adc	r27, r1
     870:	86 a3       	std	Z+38, r24	; 0x26
     872:	97 a3       	std	Z+39, r25	; 0x27
     874:	a0 a7       	std	Z+40, r26	; 0x28
     876:	b1 a7       	std	Z+41, r27	; 0x29
     878:	80 91 89 0a 	lds	r24, 0x0A89	; 0x800a89 <OSCtxSwCtr>
     87c:	90 91 8a 0a 	lds	r25, 0x0A8A	; 0x800a8a <OSCtxSwCtr+0x1>
     880:	a0 91 8b 0a 	lds	r26, 0x0A8B	; 0x800a8b <OSCtxSwCtr+0x2>
     884:	b0 91 8c 0a 	lds	r27, 0x0A8C	; 0x800a8c <OSCtxSwCtr+0x3>
     888:	01 96       	adiw	r24, 0x01	; 1
     88a:	a1 1d       	adc	r26, r1
     88c:	b1 1d       	adc	r27, r1
     88e:	80 93 89 0a 	sts	0x0A89, r24	; 0x800a89 <OSCtxSwCtr>
     892:	90 93 8a 0a 	sts	0x0A8A, r25	; 0x800a8a <OSCtxSwCtr+0x1>
     896:	a0 93 8b 0a 	sts	0x0A8B, r26	; 0x800a8b <OSCtxSwCtr+0x2>
     89a:	b0 93 8c 0a 	sts	0x0A8C, r27	; 0x800a8c <OSCtxSwCtr+0x3>
     89e:	da dd       	rcall	.-1100   	; 0x454 <OSIntCtxSw>
     8a0:	8c 2f       	mov	r24, r28
     8a2:	46 dd       	rcall	.-1396   	; 0x330 <OS_CPU_SR_Restore>
     8a4:	cf 91       	pop	r28
     8a6:	08 95       	ret

000008a8 <OSSchedLock>:
     8a8:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <OSRunning>
     8ac:	81 30       	cpi	r24, 0x01	; 1
     8ae:	69 f4       	brne	.+26     	; 0x8ca <OSSchedLock+0x22>
     8b0:	3c dd       	rcall	.-1416   	; 0x32a <OS_CPU_SR_Save>
     8b2:	90 91 4a 0b 	lds	r25, 0x0B4A	; 0x800b4a <OSIntNesting>
     8b6:	91 11       	cpse	r25, r1
     8b8:	07 c0       	rjmp	.+14     	; 0x8c8 <OSSchedLock+0x20>
     8ba:	90 91 f0 07 	lds	r25, 0x07F0	; 0x8007f0 <OSLockNesting>
     8be:	9f 3f       	cpi	r25, 0xFF	; 255
     8c0:	19 f0       	breq	.+6      	; 0x8c8 <OSSchedLock+0x20>
     8c2:	9f 5f       	subi	r25, 0xFF	; 255
     8c4:	90 93 f0 07 	sts	0x07F0, r25	; 0x8007f0 <OSLockNesting>
     8c8:	33 cd       	rjmp	.-1434   	; 0x330 <OS_CPU_SR_Restore>
     8ca:	08 95       	ret

000008cc <OSStart>:
     8cc:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <OSRunning>
     8d0:	81 11       	cpse	r24, r1
     8d2:	15 c0       	rjmp	.+42     	; 0x8fe <OSStart+0x32>
     8d4:	6f df       	rcall	.-290    	; 0x7b4 <OS_SchedNew>
     8d6:	e0 91 fa 07 	lds	r30, 0x07FA	; 0x8007fa <OSPrioHighRdy>
     8da:	e0 93 c3 09 	sts	0x09C3, r30	; 0x8009c3 <OSPrioCur>
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	ee 0f       	add	r30, r30
     8e2:	ff 1f       	adc	r31, r31
     8e4:	e8 59       	subi	r30, 0x98	; 152
     8e6:	f1 4f       	sbci	r31, 0xF1	; 241
     8e8:	80 81       	ld	r24, Z
     8ea:	91 81       	ldd	r25, Z+1	; 0x01
     8ec:	90 93 0a 0b 	sts	0x0B0A, r25	; 0x800b0a <OSTCBHighRdy+0x1>
     8f0:	80 93 09 0b 	sts	0x0B09, r24	; 0x800b09 <OSTCBHighRdy>
     8f4:	90 93 4c 0b 	sts	0x0B4C, r25	; 0x800b4c <OSTCBCur+0x1>
     8f8:	80 93 4b 0b 	sts	0x0B4B, r24	; 0x800b4b <OSTCBCur>
     8fc:	1b cd       	rjmp	.-1482   	; 0x334 <OSStartHighRdy>
     8fe:	08 95       	ret

00000900 <OSStatInit>:
     900:	62 e0       	ldi	r22, 0x02	; 2
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	fc d7       	rcall	.+4088   	; 0x1902 <OSTimeDly>
     90a:	0f dd       	rcall	.-1506   	; 0x32a <OS_CPU_SR_Save>
     90c:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <OSIdleCtr>
     910:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <OSIdleCtr+0x1>
     914:	10 92 f6 07 	sts	0x07F6, r1	; 0x8007f6 <OSIdleCtr+0x2>
     918:	10 92 f7 07 	sts	0x07F7, r1	; 0x8007f7 <OSIdleCtr+0x3>
     91c:	09 dd       	rcall	.-1518   	; 0x330 <OS_CPU_SR_Restore>
     91e:	64 e6       	ldi	r22, 0x64	; 100
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	ed d7       	rcall	.+4058   	; 0x1902 <OSTimeDly>
     928:	00 dd       	rcall	.-1536   	; 0x32a <OS_CPU_SR_Save>
     92a:	40 91 f4 07 	lds	r20, 0x07F4	; 0x8007f4 <OSIdleCtr>
     92e:	50 91 f5 07 	lds	r21, 0x07F5	; 0x8007f5 <OSIdleCtr+0x1>
     932:	60 91 f6 07 	lds	r22, 0x07F6	; 0x8007f6 <OSIdleCtr+0x2>
     936:	70 91 f7 07 	lds	r23, 0x07F7	; 0x8007f7 <OSIdleCtr+0x3>
     93a:	40 93 8f 0a 	sts	0x0A8F, r20	; 0x800a8f <OSIdleCtrMax>
     93e:	50 93 90 0a 	sts	0x0A90, r21	; 0x800a90 <OSIdleCtrMax+0x1>
     942:	60 93 91 0a 	sts	0x0A91, r22	; 0x800a91 <OSIdleCtrMax+0x2>
     946:	70 93 92 0a 	sts	0x0A92, r23	; 0x800a92 <OSIdleCtrMax+0x3>
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	90 93 67 0e 	sts	0x0E67, r25	; 0x800e67 <OSStatRdy>
     950:	ef cc       	rjmp	.-1570   	; 0x330 <OS_CPU_SR_Restore>
     952:	08 95       	ret

00000954 <OSTimeTick>:
     954:	1f 93       	push	r17
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	16 df       	rcall	.-468    	; 0x788 <OSTimeTickHook>
     95c:	e6 dc       	rcall	.-1588   	; 0x32a <OS_CPU_SR_Save>
     95e:	40 91 51 0b 	lds	r20, 0x0B51	; 0x800b51 <OSTime>
     962:	50 91 52 0b 	lds	r21, 0x0B52	; 0x800b52 <OSTime+0x1>
     966:	60 91 53 0b 	lds	r22, 0x0B53	; 0x800b53 <OSTime+0x2>
     96a:	70 91 54 0b 	lds	r23, 0x0B54	; 0x800b54 <OSTime+0x3>
     96e:	4f 5f       	subi	r20, 0xFF	; 255
     970:	5f 4f       	sbci	r21, 0xFF	; 255
     972:	6f 4f       	sbci	r22, 0xFF	; 255
     974:	7f 4f       	sbci	r23, 0xFF	; 255
     976:	40 93 51 0b 	sts	0x0B51, r20	; 0x800b51 <OSTime>
     97a:	50 93 52 0b 	sts	0x0B52, r21	; 0x800b52 <OSTime+0x1>
     97e:	60 93 53 0b 	sts	0x0B53, r22	; 0x800b53 <OSTime+0x2>
     982:	70 93 54 0b 	sts	0x0B54, r23	; 0x800b54 <OSTime+0x3>
     986:	d4 dc       	rcall	.-1624   	; 0x330 <OS_CPU_SR_Restore>
     988:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <OSRunning>
     98c:	81 30       	cpi	r24, 0x01	; 1
     98e:	09 f0       	breq	.+2      	; 0x992 <OSTimeTick+0x3e>
     990:	4d c0       	rjmp	.+154    	; 0xa2c <OSTimeTick+0xd8>
     992:	80 91 56 0a 	lds	r24, 0x0A56	; 0x800a56 <OSTickStepState>
     996:	81 30       	cpi	r24, 0x01	; 1
     998:	09 f4       	brne	.+2      	; 0x99c <OSTimeTick+0x48>
     99a:	48 c0       	rjmp	.+144    	; 0xa2c <OSTimeTick+0xd8>
     99c:	40 f0       	brcs	.+16     	; 0x9ae <OSTimeTick+0x5a>
     99e:	82 30       	cpi	r24, 0x02	; 2
     9a0:	21 f4       	brne	.+8      	; 0x9aa <OSTimeTick+0x56>
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <OSTickStepState>
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <OSTimeTick+0x5a>
     9aa:	10 92 56 0a 	sts	0x0A56, r1	; 0x800a56 <OSTickStepState>
     9ae:	c0 91 c4 09 	lds	r28, 0x09C4	; 0x8009c4 <OSTCBList>
     9b2:	d0 91 c5 09 	lds	r29, 0x09C5	; 0x8009c5 <OSTCBList+0x1>
     9b6:	88 a1       	ldd	r24, Y+32	; 0x20
     9b8:	8f 33       	cpi	r24, 0x3F	; 63
     9ba:	c1 f1       	breq	.+112    	; 0xa2c <OSTimeTick+0xd8>
     9bc:	11 e0       	ldi	r17, 0x01	; 1
     9be:	b5 dc       	rcall	.-1686   	; 0x32a <OS_CPU_SR_Save>
     9c0:	4a 8d       	ldd	r20, Y+26	; 0x1a
     9c2:	5b 8d       	ldd	r21, Y+27	; 0x1b
     9c4:	6c 8d       	ldd	r22, Y+28	; 0x1c
     9c6:	7d 8d       	ldd	r23, Y+29	; 0x1d
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	31 f1       	breq	.+76     	; 0xa1e <OSTimeTick+0xca>
     9d2:	41 50       	subi	r20, 0x01	; 1
     9d4:	51 09       	sbc	r21, r1
     9d6:	61 09       	sbc	r22, r1
     9d8:	71 09       	sbc	r23, r1
     9da:	4a 8f       	std	Y+26, r20	; 0x1a
     9dc:	5b 8f       	std	Y+27, r21	; 0x1b
     9de:	6c 8f       	std	Y+28, r22	; 0x1c
     9e0:	7d 8f       	std	Y+29, r23	; 0x1d
     9e2:	45 2b       	or	r20, r21
     9e4:	46 2b       	or	r20, r22
     9e6:	47 2b       	or	r20, r23
     9e8:	d1 f4       	brne	.+52     	; 0xa1e <OSTimeTick+0xca>
     9ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
     9ec:	29 2f       	mov	r18, r25
     9ee:	27 73       	andi	r18, 0x37	; 55
     9f0:	21 f0       	breq	.+8      	; 0x9fa <OSTimeTick+0xa6>
     9f2:	98 7c       	andi	r25, 0xC8	; 200
     9f4:	9e 8f       	std	Y+30, r25	; 0x1e
     9f6:	1f 8f       	std	Y+31, r17	; 0x1f
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <OSTimeTick+0xa8>
     9fa:	1f 8e       	std	Y+31, r1	; 0x1f
     9fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
     9fe:	93 fd       	sbrc	r25, 3
     a00:	0e c0       	rjmp	.+28     	; 0xa1e <OSTimeTick+0xca>
     a02:	20 91 0d 0b 	lds	r18, 0x0B0D	; 0x800b0d <OSRdyGrp>
     a06:	9c a1       	ldd	r25, Y+36	; 0x24
     a08:	92 2b       	or	r25, r18
     a0a:	90 93 0d 0b 	sts	0x0B0D, r25	; 0x800b0d <OSRdyGrp>
     a0e:	ea a1       	ldd	r30, Y+34	; 0x22
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	e2 5f       	subi	r30, 0xF2	; 242
     a14:	f4 4f       	sbci	r31, 0xF4	; 244
     a16:	20 81       	ld	r18, Z
     a18:	9b a1       	ldd	r25, Y+35	; 0x23
     a1a:	92 2b       	or	r25, r18
     a1c:	90 83       	st	Z, r25
     a1e:	0e 84       	ldd	r0, Y+14	; 0x0e
     a20:	df 85       	ldd	r29, Y+15	; 0x0f
     a22:	c0 2d       	mov	r28, r0
     a24:	85 dc       	rcall	.-1782   	; 0x330 <OS_CPU_SR_Restore>
     a26:	88 a1       	ldd	r24, Y+32	; 0x20
     a28:	8f 33       	cpi	r24, 0x3F	; 63
     a2a:	49 f6       	brne	.-110    	; 0x9be <OSTimeTick+0x6a>
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	1f 91       	pop	r17
     a32:	08 95       	ret

00000a34 <OS_Dummy>:
     a34:	08 95       	ret

00000a36 <OS_EventTaskWait>:
     a36:	e0 91 4b 0b 	lds	r30, 0x0B4B	; 0x800b4b <OSTCBCur>
     a3a:	f0 91 4c 0b 	lds	r31, 0x0B4C	; 0x800b4c <OSTCBCur+0x1>
     a3e:	93 8b       	std	Z+19, r25	; 0x13
     a40:	82 8b       	std	Z+18, r24	; 0x12
     a42:	22 a1       	ldd	r18, Z+34	; 0x22
     a44:	dc 01       	movw	r26, r24
     a46:	a2 0f       	add	r26, r18
     a48:	b1 1d       	adc	r27, r1
     a4a:	16 96       	adiw	r26, 0x06	; 6
     a4c:	3c 91       	ld	r19, X
     a4e:	16 97       	sbiw	r26, 0x06	; 6
     a50:	23 a1       	ldd	r18, Z+35	; 0x23
     a52:	23 2b       	or	r18, r19
     a54:	16 96       	adiw	r26, 0x06	; 6
     a56:	2c 93       	st	X, r18
     a58:	dc 01       	movw	r26, r24
     a5a:	15 96       	adiw	r26, 0x05	; 5
     a5c:	3c 91       	ld	r19, X
     a5e:	15 97       	sbiw	r26, 0x05	; 5
     a60:	24 a1       	ldd	r18, Z+36	; 0x24
     a62:	23 2b       	or	r18, r19
     a64:	15 96       	adiw	r26, 0x05	; 5
     a66:	2c 93       	st	X, r18
     a68:	a2 a1       	ldd	r26, Z+34	; 0x22
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	83 a1       	ldd	r24, Z+35	; 0x23
     a6e:	80 95       	com	r24
     a70:	a2 5f       	subi	r26, 0xF2	; 242
     a72:	b4 4f       	sbci	r27, 0xF4	; 244
     a74:	9c 91       	ld	r25, X
     a76:	89 23       	and	r24, r25
     a78:	8c 93       	st	X, r24
     a7a:	81 11       	cpse	r24, r1
     a7c:	07 c0       	rjmp	.+14     	; 0xa8c <OS_EventTaskWait+0x56>
     a7e:	84 a1       	ldd	r24, Z+36	; 0x24
     a80:	80 95       	com	r24
     a82:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <OSRdyGrp>
     a86:	89 23       	and	r24, r25
     a88:	80 93 0d 0b 	sts	0x0B0D, r24	; 0x800b0d <OSRdyGrp>
     a8c:	08 95       	ret

00000a8e <OS_EventTaskRemove>:
     a8e:	fc 01       	movw	r30, r24
     a90:	82 a1       	ldd	r24, Z+34	; 0x22
     a92:	93 a1       	ldd	r25, Z+35	; 0x23
     a94:	90 95       	com	r25
     a96:	db 01       	movw	r26, r22
     a98:	a8 0f       	add	r26, r24
     a9a:	b1 1d       	adc	r27, r1
     a9c:	16 96       	adiw	r26, 0x06	; 6
     a9e:	2c 91       	ld	r18, X
     aa0:	16 97       	sbiw	r26, 0x06	; 6
     aa2:	92 23       	and	r25, r18
     aa4:	16 96       	adiw	r26, 0x06	; 6
     aa6:	9c 93       	st	X, r25
     aa8:	91 11       	cpse	r25, r1
     aaa:	06 c0       	rjmp	.+12     	; 0xab8 <OS_EventTaskRemove+0x2a>
     aac:	84 a1       	ldd	r24, Z+36	; 0x24
     aae:	80 95       	com	r24
     ab0:	fb 01       	movw	r30, r22
     ab2:	95 81       	ldd	r25, Z+5	; 0x05
     ab4:	89 23       	and	r24, r25
     ab6:	85 83       	std	Z+5, r24	; 0x05
     ab8:	08 95       	ret

00000aba <OS_EventTaskRdy>:
     aba:	cf 93       	push	r28
     abc:	dc 01       	movw	r26, r24
     abe:	15 96       	adiw	r26, 0x05	; 5
     ac0:	ec 91       	ld	r30, X
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	e2 58       	subi	r30, 0x82	; 130
     ac6:	ff 4f       	sbci	r31, 0xFF	; 255
     ac8:	c0 81       	ld	r28, Z
     aca:	ac 2f       	mov	r26, r28
     acc:	b0 e0       	ldi	r27, 0x00	; 0
     ace:	fc 01       	movw	r30, r24
     ad0:	ea 0f       	add	r30, r26
     ad2:	fb 1f       	adc	r31, r27
     ad4:	e6 81       	ldd	r30, Z+6	; 0x06
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	e2 58       	subi	r30, 0x82	; 130
     ada:	ff 4f       	sbci	r31, 0xFF	; 255
     adc:	cc 0f       	add	r28, r28
     ade:	cc 0f       	add	r28, r28
     ae0:	cc 0f       	add	r28, r28
     ae2:	30 81       	ld	r19, Z
     ae4:	c3 0f       	add	r28, r19
     ae6:	ec 2f       	mov	r30, r28
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	ee 0f       	add	r30, r30
     aec:	ff 1f       	adc	r31, r31
     aee:	e8 59       	subi	r30, 0x98	; 152
     af0:	f1 4f       	sbci	r31, 0xF1	; 241
     af2:	01 90       	ld	r0, Z+
     af4:	f0 81       	ld	r31, Z
     af6:	e0 2d       	mov	r30, r0
     af8:	12 8e       	std	Z+26, r1	; 0x1a
     afa:	13 8e       	std	Z+27, r1	; 0x1b
     afc:	14 8e       	std	Z+28, r1	; 0x1c
     afe:	15 8e       	std	Z+29, r1	; 0x1d
     b00:	75 8b       	std	Z+21, r23	; 0x15
     b02:	64 8b       	std	Z+20, r22	; 0x14
     b04:	40 95       	com	r20
     b06:	36 8d       	ldd	r19, Z+30	; 0x1e
     b08:	43 23       	and	r20, r19
     b0a:	46 8f       	std	Z+30, r20	; 0x1e
     b0c:	27 8f       	std	Z+31, r18	; 0x1f
     b0e:	43 fd       	sbrc	r20, 3
     b10:	0c c0       	rjmp	.+24     	; 0xb2a <OS_EventTaskRdy+0x70>
     b12:	30 91 0d 0b 	lds	r19, 0x0B0D	; 0x800b0d <OSRdyGrp>
     b16:	24 a1       	ldd	r18, Z+36	; 0x24
     b18:	23 2b       	or	r18, r19
     b1a:	20 93 0d 0b 	sts	0x0B0D, r18	; 0x800b0d <OSRdyGrp>
     b1e:	a2 5f       	subi	r26, 0xF2	; 242
     b20:	b4 4f       	sbci	r27, 0xF4	; 244
     b22:	3c 91       	ld	r19, X
     b24:	23 a1       	ldd	r18, Z+35	; 0x23
     b26:	23 2b       	or	r18, r19
     b28:	2c 93       	st	X, r18
     b2a:	bc 01       	movw	r22, r24
     b2c:	cf 01       	movw	r24, r30
     b2e:	af df       	rcall	.-162    	; 0xa8e <OS_EventTaskRemove>
     b30:	8c 2f       	mov	r24, r28
     b32:	cf 91       	pop	r28
     b34:	08 95       	ret

00000b36 <OS_EventWaitListInit>:
     b36:	fc 01       	movw	r30, r24
     b38:	15 82       	std	Z+5, r1	; 0x05
     b3a:	36 96       	adiw	r30, 0x06	; 6
     b3c:	0e 96       	adiw	r24, 0x0e	; 14
     b3e:	11 92       	st	Z+, r1
     b40:	e8 17       	cp	r30, r24
     b42:	f9 07       	cpc	r31, r25
     b44:	e1 f7       	brne	.-8      	; 0xb3e <OS_EventWaitListInit+0x8>
     b46:	08 95       	ret

00000b48 <OS_MemClr>:
     b48:	61 15       	cp	r22, r1
     b4a:	71 05       	cpc	r23, r1
     b4c:	39 f0       	breq	.+14     	; 0xb5c <OS_MemClr+0x14>
     b4e:	fc 01       	movw	r30, r24
     b50:	86 0f       	add	r24, r22
     b52:	97 1f       	adc	r25, r23
     b54:	11 92       	st	Z+, r1
     b56:	e8 17       	cp	r30, r24
     b58:	f9 07       	cpc	r31, r25
     b5a:	e1 f7       	brne	.-8      	; 0xb54 <OS_MemClr+0xc>
     b5c:	08 95       	ret

00000b5e <OSInit>:
     b5e:	7f 92       	push	r7
     b60:	8f 92       	push	r8
     b62:	9f 92       	push	r9
     b64:	af 92       	push	r10
     b66:	bf 92       	push	r11
     b68:	cf 92       	push	r12
     b6a:	df 92       	push	r13
     b6c:	ef 92       	push	r14
     b6e:	ff 92       	push	r15
     b70:	0f 93       	push	r16
     b72:	1f 93       	push	r17
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	1f 92       	push	r1
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
     b7e:	85 dd       	rcall	.-1270   	; 0x68a <OSInitHookBegin>
     b80:	10 92 51 0b 	sts	0x0B51, r1	; 0x800b51 <OSTime>
     b84:	10 92 52 0b 	sts	0x0B52, r1	; 0x800b52 <OSTime+0x1>
     b88:	10 92 53 0b 	sts	0x0B53, r1	; 0x800b53 <OSTime+0x2>
     b8c:	10 92 54 0b 	sts	0x0B54, r1	; 0x800b54 <OSTime+0x3>
     b90:	10 92 4a 0b 	sts	0x0B4A, r1	; 0x800b4a <OSIntNesting>
     b94:	10 92 f0 07 	sts	0x07F0, r1	; 0x8007f0 <OSLockNesting>
     b98:	10 92 96 0a 	sts	0x0A96, r1	; 0x800a96 <OSTaskCtr>
     b9c:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <OSRunning>
     ba0:	10 92 89 0a 	sts	0x0A89, r1	; 0x800a89 <OSCtxSwCtr>
     ba4:	10 92 8a 0a 	sts	0x0A8A, r1	; 0x800a8a <OSCtxSwCtr+0x1>
     ba8:	10 92 8b 0a 	sts	0x0A8B, r1	; 0x800a8b <OSCtxSwCtr+0x2>
     bac:	10 92 8c 0a 	sts	0x0A8C, r1	; 0x800a8c <OSCtxSwCtr+0x3>
     bb0:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <OSIdleCtr>
     bb4:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <OSIdleCtr+0x1>
     bb8:	10 92 f6 07 	sts	0x07F6, r1	; 0x8007f6 <OSIdleCtr+0x2>
     bbc:	10 92 f7 07 	sts	0x07F7, r1	; 0x8007f7 <OSIdleCtr+0x3>
     bc0:	10 92 e8 0e 	sts	0x0EE8, r1	; 0x800ee8 <OSIdleCtrRun>
     bc4:	10 92 e9 0e 	sts	0x0EE9, r1	; 0x800ee9 <OSIdleCtrRun+0x1>
     bc8:	10 92 ea 0e 	sts	0x0EEA, r1	; 0x800eea <OSIdleCtrRun+0x2>
     bcc:	10 92 eb 0e 	sts	0x0EEB, r1	; 0x800eeb <OSIdleCtrRun+0x3>
     bd0:	10 92 8f 0a 	sts	0x0A8F, r1	; 0x800a8f <OSIdleCtrMax>
     bd4:	10 92 90 0a 	sts	0x0A90, r1	; 0x800a90 <OSIdleCtrMax+0x1>
     bd8:	10 92 91 0a 	sts	0x0A91, r1	; 0x800a91 <OSIdleCtrMax+0x2>
     bdc:	10 92 92 0a 	sts	0x0A92, r1	; 0x800a92 <OSIdleCtrMax+0x3>
     be0:	10 92 67 0e 	sts	0x0E67, r1	; 0x800e67 <OSStatRdy>
     be4:	10 92 0d 0b 	sts	0x0B0D, r1	; 0x800b0d <OSRdyGrp>
     be8:	ee e0       	ldi	r30, 0x0E	; 14
     bea:	fb e0       	ldi	r31, 0x0B	; 11
     bec:	86 e1       	ldi	r24, 0x16	; 22
     bee:	9b e0       	ldi	r25, 0x0B	; 11
     bf0:	11 92       	st	Z+, r1
     bf2:	e8 17       	cp	r30, r24
     bf4:	f9 07       	cpc	r31, r25
     bf6:	e1 f7       	brne	.-8      	; 0xbf0 <OSInit+0x92>
     bf8:	10 92 c3 09 	sts	0x09C3, r1	; 0x8009c3 <OSPrioCur>
     bfc:	10 92 fa 07 	sts	0x07FA, r1	; 0x8007fa <OSPrioHighRdy>
     c00:	10 92 0a 0b 	sts	0x0B0A, r1	; 0x800b0a <OSTCBHighRdy+0x1>
     c04:	10 92 09 0b 	sts	0x0B09, r1	; 0x800b09 <OSTCBHighRdy>
     c08:	10 92 4c 0b 	sts	0x0B4C, r1	; 0x800b4c <OSTCBCur+0x1>
     c0c:	10 92 4b 0b 	sts	0x0B4B, r1	; 0x800b4b <OSTCBCur>
     c10:	6c e6       	ldi	r22, 0x6C	; 108
     c12:	72 e0       	ldi	r23, 0x02	; 2
     c14:	89 ef       	ldi	r24, 0xF9	; 249
     c16:	9b e0       	ldi	r25, 0x0B	; 11
     c18:	97 df       	rcall	.-210    	; 0xb48 <OS_MemClr>
     c1a:	60 e8       	ldi	r22, 0x80	; 128
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	88 e6       	ldi	r24, 0x68	; 104
     c20:	9e e0       	ldi	r25, 0x0E	; 14
     c22:	92 df       	rcall	.-220    	; 0xb48 <OS_MemClr>
     c24:	e9 ef       	ldi	r30, 0xF9	; 249
     c26:	fb e0       	ldi	r31, 0x0B	; 11
     c28:	47 e2       	ldi	r20, 0x27	; 39
     c2a:	5e e0       	ldi	r21, 0x0E	; 14
     c2c:	20 e6       	ldi	r18, 0x60	; 96
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	cf 01       	movw	r24, r30
     c32:	ce 96       	adiw	r24, 0x3e	; 62
     c34:	97 87       	std	Z+15, r25	; 0x0f
     c36:	86 87       	std	Z+14, r24	; 0x0e
     c38:	31 af       	std	Z+57, r19	; 0x39
     c3a:	20 af       	std	Z+56, r18	; 0x38
     c3c:	fc 01       	movw	r30, r24
     c3e:	84 17       	cp	r24, r20
     c40:	95 07       	cpc	r25, r21
     c42:	b1 f7       	brne	.-20     	; 0xc30 <OSInit+0xd2>
     c44:	10 92 36 0e 	sts	0x0E36, r1	; 0x800e36 <OSTCBTbl+0x23d>
     c48:	10 92 35 0e 	sts	0x0E35, r1	; 0x800e35 <OSTCBTbl+0x23c>
     c4c:	80 e6       	ldi	r24, 0x60	; 96
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	90 93 60 0e 	sts	0x0E60, r25	; 0x800e60 <OSTCBTbl+0x267>
     c54:	80 93 5f 0e 	sts	0x0E5F, r24	; 0x800e5f <OSTCBTbl+0x266>
     c58:	10 92 c5 09 	sts	0x09C5, r1	; 0x8009c5 <OSTCBList+0x1>
     c5c:	10 92 c4 09 	sts	0x09C4, r1	; 0x8009c4 <OSTCBList>
     c60:	89 ef       	ldi	r24, 0xF9	; 249
     c62:	9b e0       	ldi	r25, 0x0B	; 11
     c64:	90 93 94 0a 	sts	0x0A94, r25	; 0x800a94 <OSTCBFreeList+0x1>
     c68:	80 93 93 0a 	sts	0x0A93, r24	; 0x800a93 <OSTCBFreeList>
     c6c:	60 e7       	ldi	r22, 0x70	; 112
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	89 e8       	ldi	r24, 0x89	; 137
     c72:	9b e0       	ldi	r25, 0x0B	; 11
     c74:	69 df       	rcall	.-302    	; 0xb48 <OS_MemClr>
     c76:	e9 e8       	ldi	r30, 0x89	; 137
     c78:	fb e0       	ldi	r31, 0x0B	; 11
     c7a:	2b ee       	ldi	r18, 0xEB	; 235
     c7c:	3b e0       	ldi	r19, 0x0B	; 11
     c7e:	cf 01       	movw	r24, r30
     c80:	0e 96       	adiw	r24, 0x0e	; 14
     c82:	10 82       	st	Z, r1
     c84:	92 83       	std	Z+2, r25	; 0x02
     c86:	81 83       	std	Z+1, r24	; 0x01
     c88:	fc 01       	movw	r30, r24
     c8a:	28 17       	cp	r18, r24
     c8c:	39 07       	cpc	r19, r25
     c8e:	b9 f7       	brne	.-18     	; 0xc7e <OSInit+0x120>
     c90:	10 92 eb 0b 	sts	0x0BEB, r1	; 0x800beb <OSEventTbl+0x62>
     c94:	10 92 ed 0b 	sts	0x0BED, r1	; 0x800bed <OSEventTbl+0x64>
     c98:	10 92 ec 0b 	sts	0x0BEC, r1	; 0x800bec <OSEventTbl+0x63>
     c9c:	89 e8       	ldi	r24, 0x89	; 137
     c9e:	9b e0       	ldi	r25, 0x0B	; 11
     ca0:	90 93 49 0b 	sts	0x0B49, r25	; 0x800b49 <OSEventFreeList+0x1>
     ca4:	80 93 48 0b 	sts	0x0B48, r24	; 0x800b48 <OSEventFreeList>
     ca8:	5a d2       	rcall	.+1204   	; 0x115e <OS_FlagInit>
     caa:	a1 d2       	rcall	.+1346   	; 0x11ee <OS_MemInit>
     cac:	c6 d2       	rcall	.+1420   	; 0x123a <OS_QInit>
     cae:	1f 92       	push	r1
     cb0:	0f 2e       	mov	r0, r31
     cb2:	f3 e0       	ldi	r31, 0x03	; 3
     cb4:	7f 2e       	mov	r7, r31
     cb6:	f0 2d       	mov	r31, r0
     cb8:	7f 92       	push	r7
     cba:	81 2c       	mov	r8, r1
     cbc:	91 2c       	mov	r9, r1
     cbe:	0f 2e       	mov	r0, r31
     cc0:	f2 e3       	ldi	r31, 0x32	; 50
     cc2:	af 2e       	mov	r10, r31
     cc4:	b1 2c       	mov	r11, r1
     cc6:	c1 2c       	mov	r12, r1
     cc8:	d1 2c       	mov	r13, r1
     cca:	f0 2d       	mov	r31, r0
     ccc:	0f 2e       	mov	r0, r31
     cce:	f7 e5       	ldi	r31, 0x57	; 87
     cd0:	ef 2e       	mov	r14, r31
     cd2:	fb e0       	ldi	r31, 0x0B	; 11
     cd4:	ff 2e       	mov	r15, r31
     cd6:	f0 2d       	mov	r31, r0
     cd8:	0f ef       	ldi	r16, 0xFF	; 255
     cda:	1f ef       	ldi	r17, 0xFF	; 255
     cdc:	2f e3       	ldi	r18, 0x3F	; 63
     cde:	48 e8       	ldi	r20, 0x88	; 136
     ce0:	5b e0       	ldi	r21, 0x0B	; 11
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	80 ef       	ldi	r24, 0xF0	; 240
     ce8:	93 e0       	ldi	r25, 0x03	; 3
     cea:	6c d5       	rcall	.+2776   	; 0x17c4 <OSTaskCreateExt>
     cec:	ae 01       	movw	r20, r28
     cee:	4f 5f       	subi	r20, 0xFF	; 255
     cf0:	5f 4f       	sbci	r21, 0xFF	; 255
     cf2:	62 e6       	ldi	r22, 0x62	; 98
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	8f e3       	ldi	r24, 0x3F	; 63
     cf8:	59 d4       	rcall	.+2226   	; 0x15ac <OSTaskNameSet>
     cfa:	1f 92       	push	r1
     cfc:	7f 92       	push	r7
     cfe:	0f 2e       	mov	r0, r31
     d00:	f7 e5       	ldi	r31, 0x57	; 87
     d02:	ef 2e       	mov	r14, r31
     d04:	fa e0       	ldi	r31, 0x0A	; 10
     d06:	ff 2e       	mov	r15, r31
     d08:	f0 2d       	mov	r31, r0
     d0a:	0e ef       	ldi	r16, 0xFE	; 254
     d0c:	1f ef       	ldi	r17, 0xFF	; 255
     d0e:	2e e3       	ldi	r18, 0x3E	; 62
     d10:	48 e8       	ldi	r20, 0x88	; 136
     d12:	5a e0       	ldi	r21, 0x0A	; 10
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	8e e4       	ldi	r24, 0x4E	; 78
     d1a:	97 e0       	ldi	r25, 0x07	; 7
     d1c:	53 d5       	rcall	.+2726   	; 0x17c4 <OSTaskCreateExt>
     d1e:	ae 01       	movw	r20, r28
     d20:	4f 5f       	subi	r20, 0xFF	; 255
     d22:	5f 4f       	sbci	r21, 0xFF	; 255
     d24:	60 e7       	ldi	r22, 0x70	; 112
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	8e e3       	ldi	r24, 0x3E	; 62
     d2a:	40 d4       	rcall	.+2176   	; 0x15ac <OSTaskNameSet>
     d2c:	c0 d7       	rcall	.+3968   	; 0x1cae <OSTmr_Init>
     d2e:	b2 dc       	rcall	.-1692   	; 0x694 <OSInitHookEnd>
     d30:	40 dd       	rcall	.-1408   	; 0x7b2 <OSDebugInit>
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	df 90       	pop	r13
     d4a:	cf 90       	pop	r12
     d4c:	bf 90       	pop	r11
     d4e:	af 90       	pop	r10
     d50:	9f 90       	pop	r9
     d52:	8f 90       	pop	r8
     d54:	7f 90       	pop	r7
     d56:	08 95       	ret

00000d58 <OS_Sched>:
     d58:	cf 93       	push	r28
     d5a:	e7 da       	rcall	.-2610   	; 0x32a <OS_CPU_SR_Save>
     d5c:	c8 2f       	mov	r28, r24
     d5e:	80 91 4a 0b 	lds	r24, 0x0B4A	; 0x800b4a <OSIntNesting>
     d62:	81 11       	cpse	r24, r1
     d64:	37 c0       	rjmp	.+110    	; 0xdd4 <OS_Sched+0x7c>
     d66:	80 91 f0 07 	lds	r24, 0x07F0	; 0x8007f0 <OSLockNesting>
     d6a:	81 11       	cpse	r24, r1
     d6c:	33 c0       	rjmp	.+102    	; 0xdd4 <OS_Sched+0x7c>
     d6e:	22 dd       	rcall	.-1468   	; 0x7b4 <OS_SchedNew>
     d70:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <OSPrioHighRdy>
     d74:	e8 2f       	mov	r30, r24
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	ee 0f       	add	r30, r30
     d7a:	ff 1f       	adc	r31, r31
     d7c:	e8 59       	subi	r30, 0x98	; 152
     d7e:	f1 4f       	sbci	r31, 0xF1	; 241
     d80:	01 90       	ld	r0, Z+
     d82:	f0 81       	ld	r31, Z
     d84:	e0 2d       	mov	r30, r0
     d86:	f0 93 0a 0b 	sts	0x0B0A, r31	; 0x800b0a <OSTCBHighRdy+0x1>
     d8a:	e0 93 09 0b 	sts	0x0B09, r30	; 0x800b09 <OSTCBHighRdy>
     d8e:	90 91 c3 09 	lds	r25, 0x09C3	; 0x8009c3 <OSPrioCur>
     d92:	89 17       	cp	r24, r25
     d94:	f9 f0       	breq	.+62     	; 0xdd4 <OS_Sched+0x7c>
     d96:	86 a1       	ldd	r24, Z+38	; 0x26
     d98:	97 a1       	ldd	r25, Z+39	; 0x27
     d9a:	a0 a5       	ldd	r26, Z+40	; 0x28
     d9c:	b1 a5       	ldd	r27, Z+41	; 0x29
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	a1 1d       	adc	r26, r1
     da2:	b1 1d       	adc	r27, r1
     da4:	86 a3       	std	Z+38, r24	; 0x26
     da6:	97 a3       	std	Z+39, r25	; 0x27
     da8:	a0 a7       	std	Z+40, r26	; 0x28
     daa:	b1 a7       	std	Z+41, r27	; 0x29
     dac:	80 91 89 0a 	lds	r24, 0x0A89	; 0x800a89 <OSCtxSwCtr>
     db0:	90 91 8a 0a 	lds	r25, 0x0A8A	; 0x800a8a <OSCtxSwCtr+0x1>
     db4:	a0 91 8b 0a 	lds	r26, 0x0A8B	; 0x800a8b <OSCtxSwCtr+0x2>
     db8:	b0 91 8c 0a 	lds	r27, 0x0A8C	; 0x800a8c <OSCtxSwCtr+0x3>
     dbc:	01 96       	adiw	r24, 0x01	; 1
     dbe:	a1 1d       	adc	r26, r1
     dc0:	b1 1d       	adc	r27, r1
     dc2:	80 93 89 0a 	sts	0x0A89, r24	; 0x800a89 <OSCtxSwCtr>
     dc6:	90 93 8a 0a 	sts	0x0A8A, r25	; 0x800a8a <OSCtxSwCtr+0x1>
     dca:	a0 93 8b 0a 	sts	0x0A8B, r26	; 0x800a8b <OSCtxSwCtr+0x2>
     dce:	b0 93 8c 0a 	sts	0x0A8C, r27	; 0x800a8c <OSCtxSwCtr+0x3>
     dd2:	e1 da       	rcall	.-2622   	; 0x396 <OSCtxSw>
     dd4:	8c 2f       	mov	r24, r28
     dd6:	ac da       	rcall	.-2728   	; 0x330 <OS_CPU_SR_Restore>
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <OSSchedUnlock>:
     ddc:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <OSRunning>
     de0:	81 30       	cpi	r24, 0x01	; 1
     de2:	b1 f4       	brne	.+44     	; 0xe10 <OSSchedUnlock+0x34>
     de4:	a2 da       	rcall	.-2748   	; 0x32a <OS_CPU_SR_Save>
     de6:	90 91 4a 0b 	lds	r25, 0x0B4A	; 0x800b4a <OSIntNesting>
     dea:	91 11       	cpse	r25, r1
     dec:	10 c0       	rjmp	.+32     	; 0xe0e <OSSchedUnlock+0x32>
     dee:	90 91 f0 07 	lds	r25, 0x07F0	; 0x8007f0 <OSLockNesting>
     df2:	99 23       	and	r25, r25
     df4:	51 f0       	breq	.+20     	; 0xe0a <OSSchedUnlock+0x2e>
     df6:	91 50       	subi	r25, 0x01	; 1
     df8:	90 93 f0 07 	sts	0x07F0, r25	; 0x8007f0 <OSLockNesting>
     dfc:	91 11       	cpse	r25, r1
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <OSSchedUnlock+0x2a>
     e00:	97 da       	rcall	.-2770   	; 0x330 <OS_CPU_SR_Restore>
     e02:	aa cf       	rjmp	.-172    	; 0xd58 <OS_Sched>
     e04:	08 95       	ret
     e06:	94 ca       	rjmp	.-2776   	; 0x330 <OS_CPU_SR_Restore>
     e08:	08 95       	ret
     e0a:	92 ca       	rjmp	.-2780   	; 0x330 <OS_CPU_SR_Restore>
     e0c:	08 95       	ret
     e0e:	90 ca       	rjmp	.-2784   	; 0x330 <OS_CPU_SR_Restore>
     e10:	08 95       	ret

00000e12 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStatStkChk (void)
{
     e12:	ef 92       	push	r14
     e14:	ff 92       	push	r15
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	28 97       	sbiw	r28, 0x08	; 8
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	0f 2e       	mov	r0, r31
     e2e:	f8 e6       	ldi	r31, 0x68	; 104
     e30:	ef 2e       	mov	r14, r31
     e32:	fe e0       	ldi	r31, 0x0E	; 14
     e34:	ff 2e       	mov	r15, r31
     e36:	f0 2d       	mov	r31, r0
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
     e38:	10 e0       	ldi	r17, 0x00	; 0
        err = OSTaskStkChk(prio, &stk_data);
     e3a:	be 01       	movw	r22, r28
     e3c:	6f 5f       	subi	r22, 0xFF	; 255
     e3e:	7f 4f       	sbci	r23, 0xFF	; 255
     e40:	81 2f       	mov	r24, r17
     e42:	f3 d3       	rcall	.+2022   	; 0x162a <OSTaskStkChk>
        if (err == OS_ERR_NONE) {
     e44:	81 11       	cpse	r24, r1
     e46:	18 c0       	rjmp	.+48     	; 0xe78 <OS_TaskStatStkChk+0x66>
            ptcb = OSTCBPrioTbl[prio];
     e48:	d7 01       	movw	r26, r14
     e4a:	ed 91       	ld	r30, X+
     e4c:	fc 91       	ld	r31, X
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
     e4e:	30 97       	sbiw	r30, 0x00	; 0
     e50:	99 f0       	breq	.+38     	; 0xe78 <OS_TaskStatStkChk+0x66>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
     e52:	e1 30       	cpi	r30, 0x01	; 1
     e54:	f1 05       	cpc	r31, r1
     e56:	81 f0       	breq	.+32     	; 0xe78 <OS_TaskStatStkChk+0x66>
#if OS_TASK_PROFILE_EN > 0u
                    #if OS_STK_GROWTH == 1u
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
     e58:	24 81       	ldd	r18, Z+4	; 0x04
     e5a:	35 81       	ldd	r19, Z+5	; 0x05
     e5c:	86 81       	ldd	r24, Z+6	; 0x06
     e5e:	97 81       	ldd	r25, Z+7	; 0x07
     e60:	82 0f       	add	r24, r18
     e62:	93 1f       	adc	r25, r19
     e64:	93 ab       	std	Z+51, r25	; 0x33
     e66:	82 ab       	std	Z+50, r24	; 0x32
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store number of entries used   */
     e68:	8d 81       	ldd	r24, Y+5	; 0x05
     e6a:	9e 81       	ldd	r25, Y+6	; 0x06
     e6c:	af 81       	ldd	r26, Y+7	; 0x07
     e6e:	b8 85       	ldd	r27, Y+8	; 0x08
     e70:	84 ab       	std	Z+52, r24	; 0x34
     e72:	95 ab       	std	Z+53, r25	; 0x35
     e74:	a6 ab       	std	Z+54, r26	; 0x36
     e76:	b7 ab       	std	Z+55, r27	; 0x37
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
     e78:	1f 5f       	subi	r17, 0xFF	; 255
     e7a:	b2 e0       	ldi	r27, 0x02	; 2
     e7c:	eb 0e       	add	r14, r27
     e7e:	f1 1c       	adc	r15, r1
     e80:	10 34       	cpi	r17, 0x40	; 64
     e82:	d9 f6       	brne	.-74     	; 0xe3a <OS_TaskStatStkChk+0x28>
#endif
                }
            }
        }
    }
}
     e84:	28 96       	adiw	r28, 0x08	; 8
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	ff 90       	pop	r15
     e98:	ef 90       	pop	r14
     e9a:	08 95       	ret

00000e9c <OS_TaskStat>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
     e9c:	80 91 67 0e 	lds	r24, 0x0E67	; 0x800e67 <OSStatRdy>
     ea0:	81 11       	cpse	r24, r1
     ea2:	09 c0       	rjmp	.+18     	; 0xeb6 <OS_TaskStat+0x1a>
     ea4:	68 ec       	ldi	r22, 0xC8	; 200
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	2a d5       	rcall	.+2644   	; 0x1902 <OSTimeDly>
     eae:	80 91 67 0e 	lds	r24, 0x0E67	; 0x800e67 <OSStatRdy>
     eb2:	88 23       	and	r24, r24
     eb4:	b9 f3       	breq	.-18     	; 0xea4 <OS_TaskStat+0x8>
     eb6:	60 91 8f 0a 	lds	r22, 0x0A8F	; 0x800a8f <OSIdleCtrMax>
     eba:	70 91 90 0a 	lds	r23, 0x0A90	; 0x800a90 <OSIdleCtrMax+0x1>
     ebe:	80 91 91 0a 	lds	r24, 0x0A91	; 0x800a91 <OSIdleCtrMax+0x2>
     ec2:	90 91 92 0a 	lds	r25, 0x0A92	; 0x800a92 <OSIdleCtrMax+0x3>
     ec6:	24 e6       	ldi	r18, 0x64	; 100
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	40 e0       	ldi	r20, 0x00	; 0
     ecc:	50 e0       	ldi	r21, 0x00	; 0
     ece:	85 d7       	rcall	.+3850   	; 0x1dda <__udivmodsi4>
     ed0:	20 93 8f 0a 	sts	0x0A8F, r18	; 0x800a8f <OSIdleCtrMax>
     ed4:	30 93 90 0a 	sts	0x0A90, r19	; 0x800a90 <OSIdleCtrMax+0x1>
     ed8:	40 93 91 0a 	sts	0x0A91, r20	; 0x800a91 <OSIdleCtrMax+0x2>
     edc:	50 93 92 0a 	sts	0x0A92, r21	; 0x800a92 <OSIdleCtrMax+0x3>
     ee0:	23 2b       	or	r18, r19
     ee2:	24 2b       	or	r18, r20
     ee4:	25 2b       	or	r18, r21
     ee6:	21 f4       	brne	.+8      	; 0xef0 <OS_TaskStat+0x54>
     ee8:	10 92 95 0a 	sts	0x0A95, r1	; 0x800a95 <OSCPUUsage>
     eec:	8f ef       	ldi	r24, 0xFF	; 255
     eee:	07 d4       	rcall	.+2062   	; 0x16fe <OSTaskSuspend>
     ef0:	1c da       	rcall	.-3016   	; 0x32a <OS_CPU_SR_Save>
     ef2:	e8 2f       	mov	r30, r24
     ef4:	20 91 8f 0a 	lds	r18, 0x0A8F	; 0x800a8f <OSIdleCtrMax>
     ef8:	30 91 90 0a 	lds	r19, 0x0A90	; 0x800a90 <OSIdleCtrMax+0x1>
     efc:	40 91 91 0a 	lds	r20, 0x0A91	; 0x800a91 <OSIdleCtrMax+0x2>
     f00:	50 91 92 0a 	lds	r21, 0x0A92	; 0x800a92 <OSIdleCtrMax+0x3>
     f04:	a4 e6       	ldi	r26, 0x64	; 100
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	99 d7       	rcall	.+3890   	; 0x1e3c <__muluhisi3>
     f0a:	60 93 f4 07 	sts	0x07F4, r22	; 0x8007f4 <OSIdleCtr>
     f0e:	70 93 f5 07 	sts	0x07F5, r23	; 0x8007f5 <OSIdleCtr+0x1>
     f12:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <OSIdleCtr+0x2>
     f16:	90 93 f7 07 	sts	0x07F7, r25	; 0x8007f7 <OSIdleCtr+0x3>
     f1a:	8e 2f       	mov	r24, r30
     f1c:	09 da       	rcall	.-3054   	; 0x330 <OS_CPU_SR_Restore>
     f1e:	c4 e6       	ldi	r28, 0x64	; 100
     f20:	04 da       	rcall	.-3064   	; 0x32a <OS_CPU_SR_Save>
     f22:	40 91 f4 07 	lds	r20, 0x07F4	; 0x8007f4 <OSIdleCtr>
     f26:	50 91 f5 07 	lds	r21, 0x07F5	; 0x8007f5 <OSIdleCtr+0x1>
     f2a:	60 91 f6 07 	lds	r22, 0x07F6	; 0x8007f6 <OSIdleCtr+0x2>
     f2e:	70 91 f7 07 	lds	r23, 0x07F7	; 0x8007f7 <OSIdleCtr+0x3>
     f32:	40 93 e8 0e 	sts	0x0EE8, r20	; 0x800ee8 <OSIdleCtrRun>
     f36:	50 93 e9 0e 	sts	0x0EE9, r21	; 0x800ee9 <OSIdleCtrRun+0x1>
     f3a:	60 93 ea 0e 	sts	0x0EEA, r22	; 0x800eea <OSIdleCtrRun+0x2>
     f3e:	70 93 eb 0e 	sts	0x0EEB, r23	; 0x800eeb <OSIdleCtrRun+0x3>
     f42:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <OSIdleCtr>
     f46:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <OSIdleCtr+0x1>
     f4a:	10 92 f6 07 	sts	0x07F6, r1	; 0x8007f6 <OSIdleCtr+0x2>
     f4e:	10 92 f7 07 	sts	0x07F7, r1	; 0x8007f7 <OSIdleCtr+0x3>
     f52:	ee d9       	rcall	.-3108   	; 0x330 <OS_CPU_SR_Restore>
     f54:	60 91 e8 0e 	lds	r22, 0x0EE8	; 0x800ee8 <OSIdleCtrRun>
     f58:	70 91 e9 0e 	lds	r23, 0x0EE9	; 0x800ee9 <OSIdleCtrRun+0x1>
     f5c:	80 91 ea 0e 	lds	r24, 0x0EEA	; 0x800eea <OSIdleCtrRun+0x2>
     f60:	90 91 eb 0e 	lds	r25, 0x0EEB	; 0x800eeb <OSIdleCtrRun+0x3>
     f64:	20 91 8f 0a 	lds	r18, 0x0A8F	; 0x800a8f <OSIdleCtrMax>
     f68:	30 91 90 0a 	lds	r19, 0x0A90	; 0x800a90 <OSIdleCtrMax+0x1>
     f6c:	40 91 91 0a 	lds	r20, 0x0A91	; 0x800a91 <OSIdleCtrMax+0x2>
     f70:	50 91 92 0a 	lds	r21, 0x0A92	; 0x800a92 <OSIdleCtrMax+0x3>
     f74:	32 d7       	rcall	.+3684   	; 0x1dda <__udivmodsi4>
     f76:	8c 2f       	mov	r24, r28
     f78:	82 1b       	sub	r24, r18
     f7a:	80 93 95 0a 	sts	0x0A95, r24	; 0x800a95 <OSCPUUsage>
     f7e:	91 db       	rcall	.-2270   	; 0x6a2 <OSTaskStatHook>
     f80:	48 df       	rcall	.-368    	; 0xe12 <OS_TaskStatStkChk>
     f82:	64 e6       	ldi	r22, 0x64	; 100
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	bb d4       	rcall	.+2422   	; 0x1902 <OSTimeDly>
     f8c:	c9 cf       	rjmp	.-110    	; 0xf20 <OS_TaskStat+0x84>

00000f8e <OS_TCBInit>:
     f8e:	2f 92       	push	r2
     f90:	3f 92       	push	r3
     f92:	4f 92       	push	r4
     f94:	5f 92       	push	r5
     f96:	6f 92       	push	r6
     f98:	7f 92       	push	r7
     f9a:	9f 92       	push	r9
     f9c:	af 92       	push	r10
     f9e:	bf 92       	push	r11
     fa0:	cf 92       	push	r12
     fa2:	df 92       	push	r13
     fa4:	ef 92       	push	r14
     fa6:	ff 92       	push	r15
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <OS_TCBInit+0x24>
     fb2:	00 d0       	rcall	.+0      	; 0xfb4 <OS_TCBInit+0x26>
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <OS_TCBInit+0x28>
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	98 2e       	mov	r9, r24
     fbc:	7a 83       	std	Y+2, r23	; 0x02
     fbe:	69 83       	std	Y+1, r22	; 0x01
     fc0:	1a 01       	movw	r2, r20
     fc2:	3c 83       	std	Y+4, r19	; 0x04
     fc4:	2b 83       	std	Y+3, r18	; 0x03
     fc6:	b1 d9       	rcall	.-3230   	; 0x32a <OS_CPU_SR_Save>
     fc8:	20 91 93 0a 	lds	r18, 0x0A93	; 0x800a93 <OSTCBFreeList>
     fcc:	30 91 94 0a 	lds	r19, 0x0A94	; 0x800a94 <OSTCBFreeList+0x1>
     fd0:	3e 83       	std	Y+6, r19	; 0x06
     fd2:	2d 83       	std	Y+5, r18	; 0x05
     fd4:	21 15       	cp	r18, r1
     fd6:	31 05       	cpc	r19, r1
     fd8:	09 f4       	brne	.+2      	; 0xfdc <OS_TCBInit+0x4e>
     fda:	a7 c0       	rjmp	.+334    	; 0x112a <OS_TCBInit+0x19c>
     fdc:	d9 01       	movw	r26, r18
     fde:	1e 96       	adiw	r26, 0x0e	; 14
     fe0:	2d 91       	ld	r18, X+
     fe2:	3c 91       	ld	r19, X
     fe4:	1f 97       	sbiw	r26, 0x0f	; 15
     fe6:	30 93 94 0a 	sts	0x0A94, r19	; 0x800a94 <OSTCBFreeList+0x1>
     fea:	20 93 93 0a 	sts	0x0A93, r18	; 0x800a93 <OSTCBFreeList>
     fee:	a0 d9       	rcall	.-3264   	; 0x330 <OS_CPU_SR_Restore>
     ff0:	29 81       	ldd	r18, Y+1	; 0x01
     ff2:	3a 81       	ldd	r19, Y+2	; 0x02
     ff4:	ed 81       	ldd	r30, Y+5	; 0x05
     ff6:	fe 81       	ldd	r31, Y+6	; 0x06
     ff8:	31 83       	std	Z+1, r19	; 0x01
     ffa:	20 83       	st	Z, r18
     ffc:	90 a2       	std	Z+32, r9	; 0x20
     ffe:	16 8e       	std	Z+30, r1	; 0x1e
    1000:	17 8e       	std	Z+31, r1	; 0x1f
    1002:	12 8e       	std	Z+26, r1	; 0x1a
    1004:	13 8e       	std	Z+27, r1	; 0x1b
    1006:	14 8e       	std	Z+28, r1	; 0x1c
    1008:	15 8e       	std	Z+29, r1	; 0x1d
    100a:	d3 82       	std	Z+3, r13	; 0x03
    100c:	c2 82       	std	Z+2, r12	; 0x02
    100e:	e6 82       	std	Z+6, r14	; 0x06
    1010:	f7 82       	std	Z+7, r15	; 0x07
    1012:	00 87       	std	Z+8, r16	; 0x08
    1014:	11 87       	std	Z+9, r17	; 0x09
    1016:	35 82       	std	Z+5, r3	; 0x05
    1018:	24 82       	std	Z+4, r2	; 0x04
    101a:	b3 86       	std	Z+11, r11	; 0x0b
    101c:	a2 86       	std	Z+10, r10	; 0x0a
    101e:	2b 81       	ldd	r18, Y+3	; 0x03
    1020:	3c 81       	ldd	r19, Y+4	; 0x04
    1022:	35 87       	std	Z+13, r19	; 0x0d
    1024:	24 87       	std	Z+12, r18	; 0x0c
    1026:	15 a2       	std	Z+37, r1	; 0x25
    1028:	39 2d       	mov	r19, r9
    102a:	36 95       	lsr	r19
    102c:	36 95       	lsr	r19
    102e:	36 95       	lsr	r19
    1030:	32 a3       	std	Z+34, r19	; 0x22
    1032:	29 2d       	mov	r18, r9
    1034:	27 70       	andi	r18, 0x07	; 7
    1036:	21 a3       	std	Z+33, r18	; 0x21
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	a0 e0       	ldi	r26, 0x00	; 0
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	ac 01       	movw	r20, r24
    1042:	bd 01       	movw	r22, r26
    1044:	04 c0       	rjmp	.+8      	; 0x104e <OS_TCBInit+0xc0>
    1046:	44 0f       	add	r20, r20
    1048:	55 1f       	adc	r21, r21
    104a:	66 1f       	adc	r22, r22
    104c:	77 1f       	adc	r23, r23
    104e:	3a 95       	dec	r19
    1050:	d2 f7       	brpl	.-12     	; 0x1046 <OS_TCBInit+0xb8>
    1052:	44 a3       	std	Z+36, r20	; 0x24
    1054:	04 c0       	rjmp	.+8      	; 0x105e <OS_TCBInit+0xd0>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	aa 1f       	adc	r26, r26
    105c:	bb 1f       	adc	r27, r27
    105e:	2a 95       	dec	r18
    1060:	d2 f7       	brpl	.-12     	; 0x1056 <OS_TCBInit+0xc8>
    1062:	83 a3       	std	Z+35, r24	; 0x23
    1064:	13 8a       	std	Z+19, r1	; 0x13
    1066:	12 8a       	std	Z+18, r1	; 0x12
    1068:	17 8a       	std	Z+23, r1	; 0x17
    106a:	16 8a       	std	Z+22, r1	; 0x16
    106c:	15 8a       	std	Z+21, r1	; 0x15
    106e:	14 8a       	std	Z+20, r1	; 0x14
    1070:	16 a2       	std	Z+38, r1	; 0x26
    1072:	17 a2       	std	Z+39, r1	; 0x27
    1074:	10 a6       	std	Z+40, r1	; 0x28
    1076:	11 a6       	std	Z+41, r1	; 0x29
    1078:	16 a6       	std	Z+46, r1	; 0x2e
    107a:	17 a6       	std	Z+47, r1	; 0x2f
    107c:	10 aa       	std	Z+48, r1	; 0x30
    107e:	11 aa       	std	Z+49, r1	; 0x31
    1080:	12 a6       	std	Z+42, r1	; 0x2a
    1082:	13 a6       	std	Z+43, r1	; 0x2b
    1084:	14 a6       	std	Z+44, r1	; 0x2c
    1086:	15 a6       	std	Z+45, r1	; 0x2d
    1088:	13 aa       	std	Z+51, r1	; 0x33
    108a:	12 aa       	std	Z+50, r1	; 0x32
    108c:	14 aa       	std	Z+52, r1	; 0x34
    108e:	15 aa       	std	Z+53, r1	; 0x35
    1090:	16 aa       	std	Z+54, r1	; 0x36
    1092:	17 aa       	std	Z+55, r1	; 0x37
    1094:	80 e6       	ldi	r24, 0x60	; 96
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	91 af       	std	Z+57, r25	; 0x39
    109a:	80 af       	std	Z+56, r24	; 0x38
    109c:	12 ae       	std	Z+58, r1	; 0x3a
    109e:	13 ae       	std	Z+59, r1	; 0x3b
    10a0:	14 ae       	std	Z+60, r1	; 0x3c
    10a2:	15 ae       	std	Z+61, r1	; 0x3d
    10a4:	cf 01       	movw	r24, r30
    10a6:	6e db       	rcall	.-2340   	; 0x784 <OSTCBInitHook>
    10a8:	40 d9       	rcall	.-3456   	; 0x32a <OS_CPU_SR_Save>
    10aa:	29 2d       	mov	r18, r9
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	22 0f       	add	r18, r18
    10b0:	33 1f       	adc	r19, r19
    10b2:	f9 01       	movw	r30, r18
    10b4:	e8 59       	subi	r30, 0x98	; 152
    10b6:	f1 4f       	sbci	r31, 0xF1	; 241
    10b8:	2d 81       	ldd	r18, Y+5	; 0x05
    10ba:	3e 81       	ldd	r19, Y+6	; 0x06
    10bc:	31 83       	std	Z+1, r19	; 0x01
    10be:	20 83       	st	Z, r18
    10c0:	37 d9       	rcall	.-3474   	; 0x330 <OS_CPU_SR_Restore>
    10c2:	8d 81       	ldd	r24, Y+5	; 0x05
    10c4:	9e 81       	ldd	r25, Y+6	; 0x06
    10c6:	e7 da       	rcall	.-2610   	; 0x696 <OSTaskCreateHook>
    10c8:	30 d9       	rcall	.-3488   	; 0x32a <OS_CPU_SR_Save>
    10ca:	e0 91 c4 09 	lds	r30, 0x09C4	; 0x8009c4 <OSTCBList>
    10ce:	f0 91 c5 09 	lds	r31, 0x09C5	; 0x8009c5 <OSTCBList+0x1>
    10d2:	ad 81       	ldd	r26, Y+5	; 0x05
    10d4:	be 81       	ldd	r27, Y+6	; 0x06
    10d6:	1f 96       	adiw	r26, 0x0f	; 15
    10d8:	fc 93       	st	X, r31
    10da:	ee 93       	st	-X, r30
    10dc:	1e 97       	sbiw	r26, 0x0e	; 14
    10de:	51 96       	adiw	r26, 0x11	; 17
    10e0:	1c 92       	st	X, r1
    10e2:	1e 92       	st	-X, r1
    10e4:	50 97       	sbiw	r26, 0x10	; 16
    10e6:	30 97       	sbiw	r30, 0x00	; 0
    10e8:	11 f0       	breq	.+4      	; 0x10ee <OS_TCBInit+0x160>
    10ea:	b1 8b       	std	Z+17, r27	; 0x11
    10ec:	a0 8b       	std	Z+16, r26	; 0x10
    10ee:	ed 81       	ldd	r30, Y+5	; 0x05
    10f0:	fe 81       	ldd	r31, Y+6	; 0x06
    10f2:	f0 93 c5 09 	sts	0x09C5, r31	; 0x8009c5 <OSTCBList+0x1>
    10f6:	e0 93 c4 09 	sts	0x09C4, r30	; 0x8009c4 <OSTCBList>
    10fa:	20 91 0d 0b 	lds	r18, 0x0B0D	; 0x800b0d <OSRdyGrp>
    10fe:	94 a1       	ldd	r25, Z+36	; 0x24
    1100:	92 2b       	or	r25, r18
    1102:	90 93 0d 0b 	sts	0x0B0D, r25	; 0x800b0d <OSRdyGrp>
    1106:	df 01       	movw	r26, r30
    1108:	e2 a1       	ldd	r30, Z+34	; 0x22
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	e2 5f       	subi	r30, 0xF2	; 242
    110e:	f4 4f       	sbci	r31, 0xF4	; 244
    1110:	20 81       	ld	r18, Z
    1112:	93 96       	adiw	r26, 0x23	; 35
    1114:	9c 91       	ld	r25, X
    1116:	92 2b       	or	r25, r18
    1118:	90 83       	st	Z, r25
    111a:	90 91 96 0a 	lds	r25, 0x0A96	; 0x800a96 <OSTaskCtr>
    111e:	9f 5f       	subi	r25, 0xFF	; 255
    1120:	90 93 96 0a 	sts	0x0A96, r25	; 0x800a96 <OSTaskCtr>
    1124:	05 d9       	rcall	.-3574   	; 0x330 <OS_CPU_SR_Restore>
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	02 c0       	rjmp	.+4      	; 0x112e <OS_TCBInit+0x1a0>
    112a:	02 d9       	rcall	.-3580   	; 0x330 <OS_CPU_SR_Restore>
    112c:	82 e4       	ldi	r24, 0x42	; 66
    112e:	26 96       	adiw	r28, 0x06	; 6
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	de bf       	out	0x3e, r29	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	0f 91       	pop	r16
    1142:	ff 90       	pop	r15
    1144:	ef 90       	pop	r14
    1146:	df 90       	pop	r13
    1148:	cf 90       	pop	r12
    114a:	bf 90       	pop	r11
    114c:	af 90       	pop	r10
    114e:	9f 90       	pop	r9
    1150:	7f 90       	pop	r7
    1152:	6f 90       	pop	r6
    1154:	5f 90       	pop	r5
    1156:	4f 90       	pop	r4
    1158:	3f 90       	pop	r3
    115a:	2f 90       	pop	r2
    115c:	08 95       	ret

0000115e <OS_FlagInit>:
    INT16U        ix_next;
    OS_FLAG_GRP  *pgrp1;
    OS_FLAG_GRP  *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    115e:	68 e3       	ldi	r22, 0x38	; 56
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	8b ef       	ldi	r24, 0xFB	; 251
    1164:	97 e0       	ldi	r25, 0x07	; 7
    1166:	f0 dc       	rcall	.-1568   	; 0xb48 <OS_MemClr>
    1168:	eb ef       	ldi	r30, 0xFB	; 251
    116a:	f7 e0       	ldi	r31, 0x07	; 7
    116c:	4c e2       	ldi	r20, 0x2C	; 44
    116e:	58 e0       	ldi	r21, 0x08	; 8
        pgrp1 = &OSFlagTbl[ix];
        pgrp2 = &OSFlagTbl[ix_next];
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
        pgrp1->OSFlagWaitList = (void *)pgrp2;
#if OS_FLAG_NAME_EN > 0u
        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
    1170:	20 e6       	ldi	r18, 0x60	; 96
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	cf 01       	movw	r24, r30
    1176:	07 96       	adiw	r24, 0x07	; 7
    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
        ix_next = ix + 1u;
        pgrp1 = &OSFlagTbl[ix];
        pgrp2 = &OSFlagTbl[ix_next];
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    1178:	10 82       	st	Z, r1
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    117a:	92 83       	std	Z+2, r25	; 0x02
    117c:	81 83       	std	Z+1, r24	; 0x01
#if OS_FLAG_NAME_EN > 0u
        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
    117e:	36 83       	std	Z+6, r19	; 0x06
    1180:	25 83       	std	Z+5, r18	; 0x05
    1182:	fc 01       	movw	r30, r24
    OS_FLAG_GRP  *pgrp1;
    OS_FLAG_GRP  *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
    1184:	84 17       	cp	r24, r20
    1186:	95 07       	cpc	r25, r21
    1188:	a9 f7       	brne	.-22     	; 0x1174 <OS_FlagInit+0x16>
#if OS_FLAG_NAME_EN > 0u
        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
#endif
    }
    pgrp1                 = &OSFlagTbl[ix];
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    118a:	eb ef       	ldi	r30, 0xFB	; 251
    118c:	f7 e0       	ldi	r31, 0x07	; 7
    118e:	11 aa       	std	Z+49, r1	; 0x31
    pgrp1->OSFlagWaitList = (void *)0;
    1190:	13 aa       	std	Z+51, r1	; 0x33
    1192:	12 aa       	std	Z+50, r1	; 0x32
#if OS_FLAG_NAME_EN > 0u
    pgrp1->OSFlagName     = (INT8U *)(void *)"?";                   /* Unknown name                    */
    1194:	80 e6       	ldi	r24, 0x60	; 96
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	97 ab       	std	Z+55, r25	; 0x37
    119a:	86 ab       	std	Z+54, r24	; 0x36
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    119c:	f0 93 66 0e 	sts	0x0E66, r31	; 0x800e66 <OSFlagFreeList+0x1>
    11a0:	e0 93 65 0e 	sts	0x0E65, r30	; 0x800e65 <OSFlagFreeList>
    11a4:	08 95       	ret

000011a6 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	fc 01       	movw	r30, r24
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    11ac:	c2 81       	ldd	r28, Z+2	; 0x02
    11ae:	d3 81       	ldd	r29, Z+3	; 0x03
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    11b0:	a0 81       	ld	r26, Z
    11b2:	b1 81       	ldd	r27, Z+1	; 0x01
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    11b4:	20 97       	sbiw	r28, 0x00	; 0
    11b6:	59 f4       	brne	.+22     	; 0x11ce <OS_FlagUnlink+0x28>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    11b8:	c6 81       	ldd	r28, Z+6	; 0x06
    11ba:	d7 81       	ldd	r29, Z+7	; 0x07
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    11bc:	ba 83       	std	Y+2, r27	; 0x02
    11be:	a9 83       	std	Y+1, r26	; 0x01
        if (pnode_next != (OS_FLAG_NODE *)0) {
    11c0:	10 97       	sbiw	r26, 0x00	; 0
    11c2:	69 f0       	breq	.+26     	; 0x11de <OS_FlagUnlink+0x38>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    11c4:	13 96       	adiw	r26, 0x03	; 3
    11c6:	1c 92       	st	X, r1
    11c8:	1e 92       	st	-X, r1
    11ca:	12 97       	sbiw	r26, 0x02	; 2
    11cc:	08 c0       	rjmp	.+16     	; 0x11de <OS_FlagUnlink+0x38>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    11ce:	b9 83       	std	Y+1, r27	; 0x01
    11d0:	a8 83       	st	Y, r26
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    11d2:	10 97       	sbiw	r26, 0x00	; 0
    11d4:	21 f0       	breq	.+8      	; 0x11de <OS_FlagUnlink+0x38>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    11d6:	13 96       	adiw	r26, 0x03	; 3
    11d8:	dc 93       	st	X, r29
    11da:	ce 93       	st	-X, r28
    11dc:	12 97       	sbiw	r26, 0x02	; 2
        }
    }
#if OS_TASK_DEL_EN > 0u
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    11de:	04 80       	ldd	r0, Z+4	; 0x04
    11e0:	f5 81       	ldd	r31, Z+5	; 0x05
    11e2:	e0 2d       	mov	r30, r0
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    11e4:	17 8a       	std	Z+23, r1	; 0x17
    11e6:	16 8a       	std	Z+22, r1	; 0x16
#endif
}
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	08 95       	ret

000011ee <OS_MemInit>:
#if OS_MAX_MEM_PART >= 2u
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    11ee:	60 e9       	ldi	r22, 0x90	; 144
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	86 ec       	ldi	r24, 0xC6	; 198
    11f4:	99 e0       	ldi	r25, 0x09	; 9
    11f6:	a8 dc       	rcall	.-1712   	; 0xb48 <OS_MemClr>
    11f8:	e6 ec       	ldi	r30, 0xC6	; 198
    11fa:	f9 e0       	ldi	r31, 0x09	; 9
    11fc:	44 e4       	ldi	r20, 0x44	; 68
    11fe:	5a e0       	ldi	r21, 0x0A	; 10
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
        pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
    1200:	20 e6       	ldi	r18, 0x60	; 96
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	cf 01       	movw	r24, r30
    1206:	42 96       	adiw	r24, 0x12	; 18


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
        pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
    1208:	93 83       	std	Z+3, r25	; 0x03
    120a:	82 83       	std	Z+2, r24	; 0x02
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
    120c:	31 8b       	std	Z+17, r19	; 0x11
    120e:	20 8b       	std	Z+16, r18	; 0x10
    1210:	fc 01       	movw	r30, r24
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
    1212:	84 17       	cp	r24, r20
    1214:	95 07       	cpc	r25, r21
    1216:	b1 f7       	brne	.-20     	; 0x1204 <OS_MemInit+0x16>
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
#endif
    }
    pmem                = &OSMemTbl[i];
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    1218:	10 92 47 0a 	sts	0x0A47, r1	; 0x800a47 <OSMemTbl+0x81>
    121c:	10 92 46 0a 	sts	0x0A46, r1	; 0x800a46 <OSMemTbl+0x80>
#if OS_MEM_NAME_EN > 0u
    pmem->OSMemName = (INT8U *)(void *)"?";
    1220:	80 e6       	ldi	r24, 0x60	; 96
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	90 93 55 0a 	sts	0x0A55, r25	; 0x800a55 <OSMemTbl+0x8f>
    1228:	80 93 54 0a 	sts	0x0A54, r24	; 0x800a54 <OSMemTbl+0x8e>
#endif

    OSMemFreeList   = &OSMemTbl[0];                       /* Point to beginning of free list           */
    122c:	86 ec       	ldi	r24, 0xC6	; 198
    122e:	99 e0       	ldi	r25, 0x09	; 9
    1230:	90 93 98 0a 	sts	0x0A98, r25	; 0x800a98 <OSMemFreeList+0x1>
    1234:	80 93 97 0a 	sts	0x0A97, r24	; 0x800a97 <OSMemFreeList>
    1238:	08 95       	ret

0000123a <OS_QInit>:
    OS_Q    *pq1;
    OS_Q    *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    123a:	60 e7       	ldi	r22, 0x70	; 112
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	89 e9       	ldi	r24, 0x99	; 153
    1240:	9a e0       	ldi	r25, 0x0A	; 10
    1242:	82 dc       	rcall	.-1788   	; 0xb48 <OS_MemClr>
    1244:	e9 e9       	ldi	r30, 0x99	; 153
    1246:	fa e0       	ldi	r31, 0x0A	; 10
    1248:	2b ef       	ldi	r18, 0xFB	; 251
    124a:	3a e0       	ldi	r19, 0x0A	; 10
    124c:	cf 01       	movw	r24, r30
    124e:	0e 96       	adiw	r24, 0x0e	; 14
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
        ix_next = ix + 1u;
        pq1 = &OSQTbl[ix];
        pq2 = &OSQTbl[ix_next];
        pq1->OSQPtr = pq2;
    1250:	91 83       	std	Z+1, r25	; 0x01
    1252:	80 83       	st	Z, r24
    1254:	fc 01       	movw	r30, r24
    OS_Q    *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
    1256:	82 17       	cp	r24, r18
    1258:	93 07       	cpc	r25, r19
    125a:	c1 f7       	brne	.-16     	; 0x124c <OS_QInit+0x12>
        pq1 = &OSQTbl[ix];
        pq2 = &OSQTbl[ix_next];
        pq1->OSQPtr = pq2;
    }
    pq1         = &OSQTbl[ix];
    pq1->OSQPtr = (OS_Q *)0;
    125c:	10 92 fc 0a 	sts	0x0AFC, r1	; 0x800afc <OSQTbl+0x63>
    1260:	10 92 fb 0a 	sts	0x0AFB, r1	; 0x800afb <OSQTbl+0x62>
    OSQFreeList = &OSQTbl[0];
    1264:	89 e9       	ldi	r24, 0x99	; 153
    1266:	9a e0       	ldi	r25, 0x0A	; 10
    1268:	90 93 0c 0b 	sts	0x0B0C, r25	; 0x800b0c <OSQFreeList+0x1>
    126c:	80 93 0b 0b 	sts	0x0B0B, r24	; 0x800b0b <OSQFreeList>
    1270:	08 95       	ret

00001272 <OSSemCreate>:
        return (nbr_tasks);
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (0u);                                      /* No tasks waiting on semaphore                 */
}
    1272:	0f 93       	push	r16
    1274:	1f 93       	push	r17
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	20 91 4a 0b 	lds	r18, 0x0B4A	; 0x800b4a <OSIntNesting>
    127e:	21 11       	cpse	r18, r1
    1280:	1a c0       	rjmp	.+52     	; 0x12b6 <OSSemCreate+0x44>
    1282:	8c 01       	movw	r16, r24
    1284:	52 d8       	rcall	.-3932   	; 0x32a <OS_CPU_SR_Save>
    1286:	c0 91 48 0b 	lds	r28, 0x0B48	; 0x800b48 <OSEventFreeList>
    128a:	d0 91 49 0b 	lds	r29, 0x0B49	; 0x800b49 <OSEventFreeList+0x1>
    128e:	20 97       	sbiw	r28, 0x00	; 0
    1290:	a9 f0       	breq	.+42     	; 0x12bc <OSSemCreate+0x4a>
    1292:	29 81       	ldd	r18, Y+1	; 0x01
    1294:	3a 81       	ldd	r19, Y+2	; 0x02
    1296:	30 93 49 0b 	sts	0x0B49, r19	; 0x800b49 <OSEventFreeList+0x1>
    129a:	20 93 48 0b 	sts	0x0B48, r18	; 0x800b48 <OSEventFreeList>
    129e:	48 d8       	rcall	.-3952   	; 0x330 <OS_CPU_SR_Restore>
    12a0:	83 e0       	ldi	r24, 0x03	; 3
    12a2:	88 83       	st	Y, r24
    12a4:	1c 83       	std	Y+4, r17	; 0x04
    12a6:	0b 83       	std	Y+3, r16	; 0x03
    12a8:	1a 82       	std	Y+2, r1	; 0x02
    12aa:	19 82       	std	Y+1, r1	; 0x01
    12ac:	ce 01       	movw	r24, r28
    12ae:	43 dc       	rcall	.-1914   	; 0xb36 <OS_EventWaitListInit>
    12b0:	8c 2f       	mov	r24, r28
    12b2:	9d 2f       	mov	r25, r29
    12b4:	06 c0       	rjmp	.+12     	; 0x12c2 <OSSemCreate+0x50>
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	03 c0       	rjmp	.+6      	; 0x12c2 <OSSemCreate+0x50>
    12bc:	39 d8       	rcall	.-3982   	; 0x330 <OS_CPU_SR_Restore>
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	08 95       	ret

000012cc <OSSemPend>:
    12cc:	bf 92       	push	r11
    12ce:	cf 92       	push	r12
    12d0:	df 92       	push	r13
    12d2:	ef 92       	push	r14
    12d4:	ff 92       	push	r15
    12d6:	0f 93       	push	r16
    12d8:	1f 93       	push	r17
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	f9 01       	movw	r30, r18
    12e0:	dc 01       	movw	r26, r24
    12e2:	3c 91       	ld	r19, X
    12e4:	33 30       	cpi	r19, 0x03	; 3
    12e6:	19 f0       	breq	.+6      	; 0x12ee <OSSemPend+0x22>
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	80 83       	st	Z, r24
    12ec:	54 c0       	rjmp	.+168    	; 0x1396 <OSSemPend+0xca>
    12ee:	20 91 4a 0b 	lds	r18, 0x0B4A	; 0x800b4a <OSIntNesting>
    12f2:	22 23       	and	r18, r18
    12f4:	19 f0       	breq	.+6      	; 0x12fc <OSSemPend+0x30>
    12f6:	82 e0       	ldi	r24, 0x02	; 2
    12f8:	80 83       	st	Z, r24
    12fa:	4d c0       	rjmp	.+154    	; 0x1396 <OSSemPend+0xca>
    12fc:	20 91 f0 07 	lds	r18, 0x07F0	; 0x8007f0 <OSLockNesting>
    1300:	22 23       	and	r18, r18
    1302:	19 f0       	breq	.+6      	; 0x130a <OSSemPend+0x3e>
    1304:	8d e0       	ldi	r24, 0x0D	; 13
    1306:	80 83       	st	Z, r24
    1308:	46 c0       	rjmp	.+140    	; 0x1396 <OSSemPend+0xca>
    130a:	ef 01       	movw	r28, r30
    130c:	6a 01       	movw	r12, r20
    130e:	7b 01       	movw	r14, r22
    1310:	8c 01       	movw	r16, r24
    1312:	0b d8       	rcall	.-4074   	; 0x32a <OS_CPU_SR_Save>
    1314:	b8 2e       	mov	r11, r24
    1316:	f8 01       	movw	r30, r16
    1318:	83 81       	ldd	r24, Z+3	; 0x03
    131a:	94 81       	ldd	r25, Z+4	; 0x04
    131c:	00 97       	sbiw	r24, 0x00	; 0
    131e:	39 f0       	breq	.+14     	; 0x132e <OSSemPend+0x62>
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	94 83       	std	Z+4, r25	; 0x04
    1324:	83 83       	std	Z+3, r24	; 0x03
    1326:	8b 2d       	mov	r24, r11
    1328:	03 d8       	rcall	.-4090   	; 0x330 <OS_CPU_SR_Restore>
    132a:	18 82       	st	Y, r1
    132c:	34 c0       	rjmp	.+104    	; 0x1396 <OSSemPend+0xca>
    132e:	e0 91 4b 0b 	lds	r30, 0x0B4B	; 0x800b4b <OSTCBCur>
    1332:	f0 91 4c 0b 	lds	r31, 0x0B4C	; 0x800b4c <OSTCBCur+0x1>
    1336:	86 8d       	ldd	r24, Z+30	; 0x1e
    1338:	81 60       	ori	r24, 0x01	; 1
    133a:	86 8f       	std	Z+30, r24	; 0x1e
    133c:	17 8e       	std	Z+31, r1	; 0x1f
    133e:	c2 8e       	std	Z+26, r12	; 0x1a
    1340:	d3 8e       	std	Z+27, r13	; 0x1b
    1342:	e4 8e       	std	Z+28, r14	; 0x1c
    1344:	f5 8e       	std	Z+29, r15	; 0x1d
    1346:	c8 01       	movw	r24, r16
    1348:	76 db       	rcall	.-2324   	; 0xa36 <OS_EventTaskWait>
    134a:	8b 2d       	mov	r24, r11
    134c:	0e 94 98 01 	call	0x330	; 0x330 <OS_CPU_SR_Restore>
    1350:	03 dd       	rcall	.-1530   	; 0xd58 <OS_Sched>
    1352:	0e 94 95 01 	call	0x32a	; 0x32a <OS_CPU_SR_Save>
    1356:	f8 2e       	mov	r15, r24
    1358:	e0 91 4b 0b 	lds	r30, 0x0B4B	; 0x800b4b <OSTCBCur>
    135c:	f0 91 4c 0b 	lds	r31, 0x0B4C	; 0x800b4c <OSTCBCur+0x1>
    1360:	97 8d       	ldd	r25, Z+31	; 0x1f
    1362:	99 23       	and	r25, r25
    1364:	19 f0       	breq	.+6      	; 0x136c <OSSemPend+0xa0>
    1366:	92 30       	cpi	r25, 0x02	; 2
    1368:	19 f0       	breq	.+6      	; 0x1370 <OSSemPend+0xa4>
    136a:	05 c0       	rjmp	.+10     	; 0x1376 <OSSemPend+0xaa>
    136c:	18 82       	st	Y, r1
    136e:	08 c0       	rjmp	.+16     	; 0x1380 <OSSemPend+0xb4>
    1370:	8e e0       	ldi	r24, 0x0E	; 14
    1372:	88 83       	st	Y, r24
    1374:	05 c0       	rjmp	.+10     	; 0x1380 <OSSemPend+0xb4>
    1376:	b8 01       	movw	r22, r16
    1378:	cf 01       	movw	r24, r30
    137a:	89 db       	rcall	.-2286   	; 0xa8e <OS_EventTaskRemove>
    137c:	8a e0       	ldi	r24, 0x0A	; 10
    137e:	88 83       	st	Y, r24
    1380:	e0 91 4b 0b 	lds	r30, 0x0B4B	; 0x800b4b <OSTCBCur>
    1384:	f0 91 4c 0b 	lds	r31, 0x0B4C	; 0x800b4c <OSTCBCur+0x1>
    1388:	16 8e       	std	Z+30, r1	; 0x1e
    138a:	17 8e       	std	Z+31, r1	; 0x1f
    138c:	13 8a       	std	Z+19, r1	; 0x13
    138e:	12 8a       	std	Z+18, r1	; 0x12
    1390:	8f 2d       	mov	r24, r15
    1392:	0e 94 98 01 	call	0x330	; 0x330 <OS_CPU_SR_Restore>
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	1f 91       	pop	r17
    139c:	0f 91       	pop	r16
    139e:	ff 90       	pop	r15
    13a0:	ef 90       	pop	r14
    13a2:	df 90       	pop	r13
    13a4:	cf 90       	pop	r12
    13a6:	bf 90       	pop	r11
    13a8:	08 95       	ret

000013aa <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    13b2:	fc 01       	movw	r30, r24
    13b4:	20 81       	ld	r18, Z
    13b6:	23 30       	cpi	r18, 0x03	; 3
    13b8:	29 f5       	brne	.+74     	; 0x1404 <OSSemPost+0x5a>
    13ba:	ec 01       	movw	r28, r24
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    13bc:	0e 94 95 01 	call	0x32a	; 0x32a <OS_CPU_SR_Save>
    13c0:	08 2f       	mov	r16, r24
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
    13c2:	1d 81       	ldd	r17, Y+5	; 0x05
    13c4:	11 23       	and	r17, r17
    13c6:	61 f0       	breq	.+24     	; 0x13e0 <OSSemPost+0x36>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	41 e0       	ldi	r20, 0x01	; 1
    13cc:	60 e0       	ldi	r22, 0x00	; 0
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	ce 01       	movw	r24, r28
    13d2:	73 db       	rcall	.-2330   	; 0xaba <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
    13d4:	80 2f       	mov	r24, r16
    13d6:	0e 94 98 01 	call	0x330	; 0x330 <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
    13da:	be dc       	rcall	.-1668   	; 0xd58 <OS_Sched>
        return (OS_ERR_NONE);
    13dc:	10 e0       	ldi	r17, 0x00	; 0
    13de:	13 c0       	rjmp	.+38     	; 0x1406 <OSSemPost+0x5c>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	9c 81       	ldd	r25, Y+4	; 0x04
    13e4:	8f 3f       	cpi	r24, 0xFF	; 255
    13e6:	ff ef       	ldi	r31, 0xFF	; 255
    13e8:	9f 07       	cpc	r25, r31
    13ea:	39 f0       	breq	.+14     	; 0x13fa <OSSemPost+0x50>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    13ec:	01 96       	adiw	r24, 0x01	; 1
    13ee:	9c 83       	std	Y+4, r25	; 0x04
    13f0:	8b 83       	std	Y+3, r24	; 0x03
        OS_EXIT_CRITICAL();
    13f2:	80 2f       	mov	r24, r16
    13f4:	0e 94 98 01 	call	0x330	; 0x330 <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
    13f8:	06 c0       	rjmp	.+12     	; 0x1406 <OSSemPost+0x5c>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    13fa:	80 2f       	mov	r24, r16
    13fc:	0e 94 98 01 	call	0x330	; 0x330 <OS_CPU_SR_Restore>
    return (OS_ERR_SEM_OVF);
    1400:	13 e3       	ldi	r17, 0x33	; 51
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <OSSemPost+0x5c>
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
        return (OS_ERR_EVENT_TYPE);
    1404:	11 e0       	ldi	r17, 0x01	; 1
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
}
    1406:	81 2f       	mov	r24, r17
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	08 95       	ret

00001412 <OSTaskDel>:
void  OS_TaskReturn (void)
{
    OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */

#if OS_TASK_DEL_EN > 0u
    (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
    1412:	ef 92       	push	r14
    1414:	ff 92       	push	r15
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	08 2f       	mov	r16, r24
    1420:	c0 91 4a 0b 	lds	r28, 0x0B4A	; 0x800b4a <OSIntNesting>
    1424:	c1 11       	cpse	r28, r1
    1426:	b7 c0       	rjmp	.+366    	; 0x1596 <OSTaskDel+0x184>
    1428:	8f 33       	cpi	r24, 0x3F	; 63
    142a:	09 f4       	brne	.+2      	; 0x142e <OSTaskDel+0x1c>
    142c:	b6 c0       	rjmp	.+364    	; 0x159a <OSTaskDel+0x188>
    142e:	0e 94 95 01 	call	0x32a	; 0x32a <OS_CPU_SR_Save>
    1432:	d8 2f       	mov	r29, r24
    1434:	0f 3f       	cpi	r16, 0xFF	; 255
    1436:	29 f4       	brne	.+10     	; 0x1442 <OSTaskDel+0x30>
    1438:	e0 91 4b 0b 	lds	r30, 0x0B4B	; 0x800b4b <OSTCBCur>
    143c:	f0 91 4c 0b 	lds	r31, 0x0B4C	; 0x800b4c <OSTCBCur+0x1>
    1440:	00 a1       	ldd	r16, Z+32	; 0x20
    1442:	10 e0       	ldi	r17, 0x00	; 0
    1444:	f8 01       	movw	r30, r16
    1446:	ee 0f       	add	r30, r30
    1448:	ff 1f       	adc	r31, r31
    144a:	e8 59       	subi	r30, 0x98	; 152
    144c:	f1 4f       	sbci	r31, 0xF1	; 241
    144e:	e0 80       	ld	r14, Z
    1450:	f1 80       	ldd	r15, Z+1	; 0x01
    1452:	e1 14       	cp	r14, r1
    1454:	f1 04       	cpc	r15, r1
    1456:	29 f4       	brne	.+10     	; 0x1462 <OSTaskDel+0x50>
    1458:	8d 2f       	mov	r24, r29
    145a:	0e 94 98 01 	call	0x330	; 0x330 <OS_CPU_SR_Restore>
    145e:	c3 e4       	ldi	r28, 0x43	; 67
    1460:	9d c0       	rjmp	.+314    	; 0x159c <OSTaskDel+0x18a>
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	e8 16       	cp	r14, r24
    1466:	f1 04       	cpc	r15, r1
    1468:	29 f4       	brne	.+10     	; 0x1474 <OSTaskDel+0x62>
    146a:	8d 2f       	mov	r24, r29
    146c:	0e 94 98 01 	call	0x330	; 0x330 <OS_CPU_SR_Restore>
    1470:	cd e3       	ldi	r28, 0x3D	; 61
    1472:	94 c0       	rjmp	.+296    	; 0x159c <OSTaskDel+0x18a>
    1474:	d7 01       	movw	r26, r14
    1476:	92 96       	adiw	r26, 0x22	; 34
    1478:	ec 91       	ld	r30, X
    147a:	92 97       	sbiw	r26, 0x22	; 34
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	93 96       	adiw	r26, 0x23	; 35
    1480:	8c 91       	ld	r24, X
    1482:	93 97       	sbiw	r26, 0x23	; 35
    1484:	80 95       	com	r24
    1486:	e2 5f       	subi	r30, 0xF2	; 242
    1488:	f4 4f       	sbci	r31, 0xF4	; 244
    148a:	90 81       	ld	r25, Z
    148c:	89 23       	and	r24, r25
    148e:	80 83       	st	Z, r24
    1490:	81 11       	cpse	r24, r1
    1492:	08 c0       	rjmp	.+16     	; 0x14a4 <OSTaskDel+0x92>
    1494:	94 96       	adiw	r26, 0x24	; 36
    1496:	8c 91       	ld	r24, X
    1498:	80 95       	com	r24
    149a:	90 91 0d 0b 	lds	r25, 0x0B0D	; 0x800b0d <OSRdyGrp>
    149e:	89 23       	and	r24, r25
    14a0:	80 93 0d 0b 	sts	0x0B0D, r24	; 0x800b0d <OSRdyGrp>
    14a4:	f7 01       	movw	r30, r14
    14a6:	62 89       	ldd	r22, Z+18	; 0x12
    14a8:	73 89       	ldd	r23, Z+19	; 0x13
    14aa:	61 15       	cp	r22, r1
    14ac:	71 05       	cpc	r23, r1
    14ae:	11 f0       	breq	.+4      	; 0x14b4 <OSTaskDel+0xa2>
    14b0:	c7 01       	movw	r24, r14
    14b2:	ed da       	rcall	.-2598   	; 0xa8e <OS_EventTaskRemove>
    14b4:	d7 01       	movw	r26, r14
    14b6:	56 96       	adiw	r26, 0x16	; 22
    14b8:	8d 91       	ld	r24, X+
    14ba:	9c 91       	ld	r25, X
    14bc:	57 97       	sbiw	r26, 0x17	; 23
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <OSTaskDel+0xb2>
    14c2:	71 de       	rcall	.-798    	; 0x11a6 <OS_FlagUnlink>
    14c4:	f7 01       	movw	r30, r14
    14c6:	12 8e       	std	Z+26, r1	; 0x1a
    14c8:	13 8e       	std	Z+27, r1	; 0x1b
    14ca:	14 8e       	std	Z+28, r1	; 0x1c
    14cc:	15 8e       	std	Z+29, r1	; 0x1d
    14ce:	16 8e       	std	Z+30, r1	; 0x1e
    14d0:	17 8e       	std	Z+31, r1	; 0x1f
    14d2:	80 91 f0 07 	lds	r24, 0x07F0	; 0x8007f0 <OSLockNesting>
    14d6:	8f 3f       	cpi	r24, 0xFF	; 255
    14d8:	19 f0       	breq	.+6      	; 0x14e0 <OSTaskDel+0xce>
    14da:	8f 5f       	subi	r24, 0xFF	; 255
    14dc:	80 93 f0 07 	sts	0x07F0, r24	; 0x8007f0 <OSLockNesting>
    14e0:	8d 2f       	mov	r24, r29
    14e2:	0e 94 98 01 	call	0x330	; 0x330 <OS_CPU_SR_Restore>
    14e6:	a6 da       	rcall	.-2740   	; 0xa34 <OS_Dummy>
    14e8:	0e 94 95 01 	call	0x32a	; 0x32a <OS_CPU_SR_Save>
    14ec:	d8 2f       	mov	r29, r24
    14ee:	80 91 f0 07 	lds	r24, 0x07F0	; 0x8007f0 <OSLockNesting>
    14f2:	88 23       	and	r24, r24
    14f4:	19 f0       	breq	.+6      	; 0x14fc <OSTaskDel+0xea>
    14f6:	81 50       	subi	r24, 0x01	; 1
    14f8:	80 93 f0 07 	sts	0x07F0, r24	; 0x8007f0 <OSLockNesting>
    14fc:	c7 01       	movw	r24, r14
    14fe:	cd d8       	rcall	.-3686   	; 0x69a <OSTaskDelHook>
    1500:	80 91 96 0a 	lds	r24, 0x0A96	; 0x800a96 <OSTaskCtr>
    1504:	81 50       	subi	r24, 0x01	; 1
    1506:	80 93 96 0a 	sts	0x0A96, r24	; 0x800a96 <OSTaskCtr>
    150a:	00 0f       	add	r16, r16
    150c:	11 1f       	adc	r17, r17
    150e:	f8 01       	movw	r30, r16
    1510:	e8 59       	subi	r30, 0x98	; 152
    1512:	f1 4f       	sbci	r31, 0xF1	; 241
    1514:	11 82       	std	Z+1, r1	; 0x01
    1516:	10 82       	st	Z, r1
    1518:	d7 01       	movw	r26, r14
    151a:	50 96       	adiw	r26, 0x10	; 16
    151c:	ed 91       	ld	r30, X+
    151e:	fc 91       	ld	r31, X
    1520:	51 97       	sbiw	r26, 0x11	; 17
    1522:	30 97       	sbiw	r30, 0x00	; 0
    1524:	79 f4       	brne	.+30     	; 0x1544 <OSTaskDel+0x132>
    1526:	1e 96       	adiw	r26, 0x0e	; 14
    1528:	ed 91       	ld	r30, X+
    152a:	fc 91       	ld	r31, X
    152c:	1f 97       	sbiw	r26, 0x0f	; 15
    152e:	11 8a       	std	Z+17, r1	; 0x11
    1530:	10 8a       	std	Z+16, r1	; 0x10
    1532:	1e 96       	adiw	r26, 0x0e	; 14
    1534:	8d 91       	ld	r24, X+
    1536:	9c 91       	ld	r25, X
    1538:	1f 97       	sbiw	r26, 0x0f	; 15
    153a:	90 93 c5 09 	sts	0x09C5, r25	; 0x8009c5 <OSTCBList+0x1>
    153e:	80 93 c4 09 	sts	0x09C4, r24	; 0x8009c4 <OSTCBList>
    1542:	11 c0       	rjmp	.+34     	; 0x1566 <OSTaskDel+0x154>
    1544:	d7 01       	movw	r26, r14
    1546:	1e 96       	adiw	r26, 0x0e	; 14
    1548:	8d 91       	ld	r24, X+
    154a:	9c 91       	ld	r25, X
    154c:	1f 97       	sbiw	r26, 0x0f	; 15
    154e:	97 87       	std	Z+15, r25	; 0x0f
    1550:	86 87       	std	Z+14, r24	; 0x0e
    1552:	1e 96       	adiw	r26, 0x0e	; 14
    1554:	ed 91       	ld	r30, X+
    1556:	fc 91       	ld	r31, X
    1558:	1f 97       	sbiw	r26, 0x0f	; 15
    155a:	50 96       	adiw	r26, 0x10	; 16
    155c:	8d 91       	ld	r24, X+
    155e:	9c 91       	ld	r25, X
    1560:	51 97       	sbiw	r26, 0x11	; 17
    1562:	91 8b       	std	Z+17, r25	; 0x11
    1564:	80 8b       	std	Z+16, r24	; 0x10
    1566:	80 91 93 0a 	lds	r24, 0x0A93	; 0x800a93 <OSTCBFreeList>
    156a:	90 91 94 0a 	lds	r25, 0x0A94	; 0x800a94 <OSTCBFreeList+0x1>
    156e:	f7 01       	movw	r30, r14
    1570:	97 87       	std	Z+15, r25	; 0x0f
    1572:	86 87       	std	Z+14, r24	; 0x0e
    1574:	f0 92 94 0a 	sts	0x0A94, r15	; 0x800a94 <OSTCBFreeList+0x1>
    1578:	e0 92 93 0a 	sts	0x0A93, r14	; 0x800a93 <OSTCBFreeList>
    157c:	80 e6       	ldi	r24, 0x60	; 96
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	91 af       	std	Z+57, r25	; 0x39
    1582:	80 af       	std	Z+56, r24	; 0x38
    1584:	8d 2f       	mov	r24, r29
    1586:	0e 94 98 01 	call	0x330	; 0x330 <OS_CPU_SR_Restore>
    158a:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <OSRunning>
    158e:	81 30       	cpi	r24, 0x01	; 1
    1590:	29 f4       	brne	.+10     	; 0x159c <OSTaskDel+0x18a>
    1592:	e2 db       	rcall	.-2108   	; 0xd58 <OS_Sched>
    1594:	03 c0       	rjmp	.+6      	; 0x159c <OSTaskDel+0x18a>
    1596:	c0 e4       	ldi	r28, 0x40	; 64
    1598:	01 c0       	rjmp	.+2      	; 0x159c <OSTaskDel+0x18a>
    159a:	ce e3       	ldi	r28, 0x3E	; 62
    159c:	8c 2f       	mov	r24, r28
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	1f 91       	pop	r17
    15a4:	0f 91       	pop	r16
    15a6:	ff 90       	pop	r15
    15a8:	ef 90       	pop	r14
    15aa:	08 95       	ret

000015ac <OSTaskNameSet>:
    15ac:	ef 92       	push	r14
    15ae:	ff 92       	push	r15
    15b0:	0f 93       	push	r16
    15b2:	1f 93       	push	r17
    15b4:	cf 93       	push	r28
    15b6:	c8 2f       	mov	r28, r24
    15b8:	7b 01       	movw	r14, r22
    15ba:	8a 01       	movw	r16, r20
    15bc:	80 91 4a 0b 	lds	r24, 0x0B4A	; 0x800b4a <OSIntNesting>
    15c0:	88 23       	and	r24, r24
    15c2:	21 f0       	breq	.+8      	; 0x15cc <OSTaskNameSet+0x20>
    15c4:	82 e1       	ldi	r24, 0x12	; 18
    15c6:	fa 01       	movw	r30, r20
    15c8:	80 83       	st	Z, r24
    15ca:	29 c0       	rjmp	.+82     	; 0x161e <OSTaskNameSet+0x72>
    15cc:	0e 94 95 01 	call	0x32a	; 0x32a <OS_CPU_SR_Save>
    15d0:	cf 3f       	cpi	r28, 0xFF	; 255
    15d2:	29 f4       	brne	.+10     	; 0x15de <OSTaskNameSet+0x32>
    15d4:	e0 91 4b 0b 	lds	r30, 0x0B4B	; 0x800b4b <OSTCBCur>
    15d8:	f0 91 4c 0b 	lds	r31, 0x0B4C	; 0x800b4c <OSTCBCur+0x1>
    15dc:	c0 a1       	ldd	r28, Z+32	; 0x20
    15de:	ec 2f       	mov	r30, r28
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	ee 0f       	add	r30, r30
    15e4:	ff 1f       	adc	r31, r31
    15e6:	e8 59       	subi	r30, 0x98	; 152
    15e8:	f1 4f       	sbci	r31, 0xF1	; 241
    15ea:	01 90       	ld	r0, Z+
    15ec:	f0 81       	ld	r31, Z
    15ee:	e0 2d       	mov	r30, r0
    15f0:	30 97       	sbiw	r30, 0x00	; 0
    15f2:	31 f4       	brne	.+12     	; 0x1600 <OSTaskNameSet+0x54>
    15f4:	0e 94 98 01 	call	0x330	; 0x330 <OS_CPU_SR_Restore>
    15f8:	83 e4       	ldi	r24, 0x43	; 67
    15fa:	f8 01       	movw	r30, r16
    15fc:	80 83       	st	Z, r24
    15fe:	0f c0       	rjmp	.+30     	; 0x161e <OSTaskNameSet+0x72>
    1600:	e1 30       	cpi	r30, 0x01	; 1
    1602:	f1 05       	cpc	r31, r1
    1604:	31 f4       	brne	.+12     	; 0x1612 <OSTaskNameSet+0x66>
    1606:	0e 94 98 01 	call	0x330	; 0x330 <OS_CPU_SR_Restore>
    160a:	83 e4       	ldi	r24, 0x43	; 67
    160c:	f8 01       	movw	r30, r16
    160e:	80 83       	st	Z, r24
    1610:	06 c0       	rjmp	.+12     	; 0x161e <OSTaskNameSet+0x72>
    1612:	f1 ae       	std	Z+57, r15	; 0x39
    1614:	e0 ae       	std	Z+56, r14	; 0x38
    1616:	0e 94 98 01 	call	0x330	; 0x330 <OS_CPU_SR_Restore>
    161a:	f8 01       	movw	r30, r16
    161c:	10 82       	st	Z, r1
    161e:	cf 91       	pop	r28
    1620:	1f 91       	pop	r17
    1622:	0f 91       	pop	r16
    1624:	ff 90       	pop	r15
    1626:	ef 90       	pop	r14
    1628:	08 95       	ret

0000162a <OSTaskStkChk>:
    162a:	cf 92       	push	r12
    162c:	df 92       	push	r13
    162e:	ef 92       	push	r14
    1630:	ff 92       	push	r15
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	c8 2f       	mov	r28, r24
    163c:	8b 01       	movw	r16, r22
    163e:	fb 01       	movw	r30, r22
    1640:	10 82       	st	Z, r1
    1642:	11 82       	std	Z+1, r1	; 0x01
    1644:	12 82       	std	Z+2, r1	; 0x02
    1646:	13 82       	std	Z+3, r1	; 0x03
    1648:	14 82       	std	Z+4, r1	; 0x04
    164a:	15 82       	std	Z+5, r1	; 0x05
    164c:	16 82       	std	Z+6, r1	; 0x06
    164e:	17 82       	std	Z+7, r1	; 0x07
    1650:	0e 94 95 01 	call	0x32a	; 0x32a <OS_CPU_SR_Save>
    1654:	cf 3f       	cpi	r28, 0xFF	; 255
    1656:	29 f4       	brne	.+10     	; 0x1662 <OSTaskStkChk+0x38>
    1658:	e0 91 4b 0b 	lds	r30, 0x0B4B	; 0x800b4b <OSTCBCur>
    165c:	f0 91 4c 0b 	lds	r31, 0x0B4C	; 0x800b4c <OSTCBCur+0x1>
    1660:	c0 a1       	ldd	r28, Z+32	; 0x20
    1662:	ec 2f       	mov	r30, r28
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	ee 0f       	add	r30, r30
    1668:	ff 1f       	adc	r31, r31
    166a:	e8 59       	subi	r30, 0x98	; 152
    166c:	f1 4f       	sbci	r31, 0xF1	; 241
    166e:	01 90       	ld	r0, Z+
    1670:	f0 81       	ld	r31, Z
    1672:	e0 2d       	mov	r30, r0
    1674:	30 97       	sbiw	r30, 0x00	; 0
    1676:	21 f4       	brne	.+8      	; 0x1680 <OSTaskStkChk+0x56>
    1678:	0e 94 98 01 	call	0x330	; 0x330 <OS_CPU_SR_Restore>
    167c:	83 e4       	ldi	r24, 0x43	; 67
    167e:	36 c0       	rjmp	.+108    	; 0x16ec <OSTaskStkChk+0xc2>
    1680:	e1 30       	cpi	r30, 0x01	; 1
    1682:	f1 05       	cpc	r31, r1
    1684:	21 f4       	brne	.+8      	; 0x168e <OSTaskStkChk+0x64>
    1686:	0e 94 98 01 	call	0x330	; 0x330 <OS_CPU_SR_Restore>
    168a:	83 e4       	ldi	r24, 0x43	; 67
    168c:	2f c0       	rjmp	.+94     	; 0x16ec <OSTaskStkChk+0xc2>
    168e:	92 85       	ldd	r25, Z+10	; 0x0a
    1690:	90 fd       	sbrc	r25, 0
    1692:	04 c0       	rjmp	.+8      	; 0x169c <OSTaskStkChk+0x72>
    1694:	0e 94 98 01 	call	0x330	; 0x330 <OS_CPU_SR_Restore>
    1698:	85 e4       	ldi	r24, 0x45	; 69
    169a:	28 c0       	rjmp	.+80     	; 0x16ec <OSTaskStkChk+0xc2>
    169c:	c6 80       	ldd	r12, Z+6	; 0x06
    169e:	d7 80       	ldd	r13, Z+7	; 0x07
    16a0:	e0 84       	ldd	r14, Z+8	; 0x08
    16a2:	f1 84       	ldd	r15, Z+9	; 0x09
    16a4:	c4 81       	ldd	r28, Z+4	; 0x04
    16a6:	d5 81       	ldd	r29, Z+5	; 0x05
    16a8:	0e 94 98 01 	call	0x330	; 0x330 <OS_CPU_SR_Restore>
    16ac:	fe 01       	movw	r30, r28
    16ae:	31 96       	adiw	r30, 0x01	; 1
    16b0:	88 81       	ld	r24, Y
    16b2:	81 11       	cpse	r24, r1
    16b4:	0a c0       	rjmp	.+20     	; 0x16ca <OSTaskStkChk+0xa0>
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	dc 01       	movw	r26, r24
    16bc:	01 96       	adiw	r24, 0x01	; 1
    16be:	a1 1d       	adc	r26, r1
    16c0:	b1 1d       	adc	r27, r1
    16c2:	21 91       	ld	r18, Z+
    16c4:	22 23       	and	r18, r18
    16c6:	d1 f3       	breq	.-12     	; 0x16bc <OSTaskStkChk+0x92>
    16c8:	03 c0       	rjmp	.+6      	; 0x16d0 <OSTaskStkChk+0xa6>
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	dc 01       	movw	r26, r24
    16d0:	f8 01       	movw	r30, r16
    16d2:	80 83       	st	Z, r24
    16d4:	91 83       	std	Z+1, r25	; 0x01
    16d6:	a2 83       	std	Z+2, r26	; 0x02
    16d8:	b3 83       	std	Z+3, r27	; 0x03
    16da:	c8 1a       	sub	r12, r24
    16dc:	d9 0a       	sbc	r13, r25
    16de:	ea 0a       	sbc	r14, r26
    16e0:	fb 0a       	sbc	r15, r27
    16e2:	c4 82       	std	Z+4, r12	; 0x04
    16e4:	d5 82       	std	Z+5, r13	; 0x05
    16e6:	e6 82       	std	Z+6, r14	; 0x06
    16e8:	f7 82       	std	Z+7, r15	; 0x07
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	0f 91       	pop	r16
    16f4:	ff 90       	pop	r15
    16f6:	ef 90       	pop	r14
    16f8:	df 90       	pop	r13
    16fa:	cf 90       	pop	r12
    16fc:	08 95       	ret

000016fe <OSTaskSuspend>:
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	c8 2f       	mov	r28, r24
    1704:	0e 94 95 01 	call	0x32a	; 0x32a <OS_CPU_SR_Save>
    1708:	cf 3f       	cpi	r28, 0xFF	; 255
    170a:	39 f4       	brne	.+14     	; 0x171a <OSTaskSuspend+0x1c>
    170c:	e0 91 4b 0b 	lds	r30, 0x0B4B	; 0x800b4b <OSTCBCur>
    1710:	f0 91 4c 0b 	lds	r31, 0x0B4C	; 0x800b4c <OSTCBCur+0x1>
    1714:	c0 a1       	ldd	r28, Z+32	; 0x20
    1716:	d1 e0       	ldi	r29, 0x01	; 1
    1718:	08 c0       	rjmp	.+16     	; 0x172a <OSTaskSuspend+0x2c>
    171a:	e0 91 4b 0b 	lds	r30, 0x0B4B	; 0x800b4b <OSTCBCur>
    171e:	f0 91 4c 0b 	lds	r31, 0x0B4C	; 0x800b4c <OSTCBCur+0x1>
    1722:	d1 e0       	ldi	r29, 0x01	; 1
    1724:	90 a1       	ldd	r25, Z+32	; 0x20
    1726:	9c 13       	cpse	r25, r28
    1728:	d0 e0       	ldi	r29, 0x00	; 0
    172a:	ec 2f       	mov	r30, r28
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	ee 0f       	add	r30, r30
    1730:	ff 1f       	adc	r31, r31
    1732:	e8 59       	subi	r30, 0x98	; 152
    1734:	f1 4f       	sbci	r31, 0xF1	; 241
    1736:	01 90       	ld	r0, Z+
    1738:	f0 81       	ld	r31, Z
    173a:	e0 2d       	mov	r30, r0
    173c:	30 97       	sbiw	r30, 0x00	; 0
    173e:	21 f4       	brne	.+8      	; 0x1748 <OSTaskSuspend+0x4a>
    1740:	0e 94 98 01 	call	0x330	; 0x330 <OS_CPU_SR_Restore>
    1744:	88 e4       	ldi	r24, 0x48	; 72
    1746:	24 c0       	rjmp	.+72     	; 0x1790 <OSTaskSuspend+0x92>
    1748:	e1 30       	cpi	r30, 0x01	; 1
    174a:	f1 05       	cpc	r31, r1
    174c:	21 f4       	brne	.+8      	; 0x1756 <OSTaskSuspend+0x58>
    174e:	0e 94 98 01 	call	0x330	; 0x330 <OS_CPU_SR_Restore>
    1752:	83 e4       	ldi	r24, 0x43	; 67
    1754:	1d c0       	rjmp	.+58     	; 0x1790 <OSTaskSuspend+0x92>
    1756:	a2 a1       	ldd	r26, Z+34	; 0x22
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	93 a1       	ldd	r25, Z+35	; 0x23
    175c:	90 95       	com	r25
    175e:	a2 5f       	subi	r26, 0xF2	; 242
    1760:	b4 4f       	sbci	r27, 0xF4	; 244
    1762:	2c 91       	ld	r18, X
    1764:	92 23       	and	r25, r18
    1766:	9c 93       	st	X, r25
    1768:	91 11       	cpse	r25, r1
    176a:	07 c0       	rjmp	.+14     	; 0x177a <OSTaskSuspend+0x7c>
    176c:	94 a1       	ldd	r25, Z+36	; 0x24
    176e:	90 95       	com	r25
    1770:	20 91 0d 0b 	lds	r18, 0x0B0D	; 0x800b0d <OSRdyGrp>
    1774:	92 23       	and	r25, r18
    1776:	90 93 0d 0b 	sts	0x0B0D, r25	; 0x800b0d <OSRdyGrp>
    177a:	96 8d       	ldd	r25, Z+30	; 0x1e
    177c:	98 60       	ori	r25, 0x08	; 8
    177e:	96 8f       	std	Z+30, r25	; 0x1e
    1780:	0e 94 98 01 	call	0x330	; 0x330 <OS_CPU_SR_Restore>
    1784:	d1 30       	cpi	r29, 0x01	; 1
    1786:	19 f4       	brne	.+6      	; 0x178e <OSTaskSuspend+0x90>
    1788:	e7 da       	rcall	.-2610   	; 0xd58 <OS_Sched>
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	01 c0       	rjmp	.+2      	; 0x1790 <OSTaskSuspend+0x92>
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	df 91       	pop	r29
    1792:	cf 91       	pop	r28
    1794:	08 95       	ret

00001796 <OS_TaskStkClr>:
void  OS_TaskStkClr (OS_STK  *pbos,
                     INT32U   size,
                     INT16U   opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
    1796:	23 70       	andi	r18, 0x03	; 3
    1798:	33 27       	eor	r19, r19
    179a:	23 30       	cpi	r18, 0x03	; 3
    179c:	31 05       	cpc	r19, r1
    179e:	89 f4       	brne	.+34     	; 0x17c2 <OS_TaskStkClr+0x2c>
#if OS_STK_GROWTH == 1u
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
    17a0:	41 15       	cp	r20, r1
    17a2:	51 05       	cpc	r21, r1
    17a4:	61 05       	cpc	r22, r1
    17a6:	71 05       	cpc	r23, r1
    17a8:	61 f0       	breq	.+24     	; 0x17c2 <OS_TaskStkClr+0x2c>
    17aa:	e8 2f       	mov	r30, r24
    17ac:	f9 2f       	mov	r31, r25
                size--;
    17ae:	41 50       	subi	r20, 0x01	; 1
    17b0:	51 09       	sbc	r21, r1
    17b2:	61 09       	sbc	r22, r1
    17b4:	71 09       	sbc	r23, r1
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
    17b6:	11 92       	st	Z+, r1
                     INT16U   opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1u
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
    17b8:	41 15       	cp	r20, r1
    17ba:	51 05       	cpc	r21, r1
    17bc:	61 05       	cpc	r22, r1
    17be:	71 05       	cpc	r23, r1
    17c0:	b1 f7       	brne	.-20     	; 0x17ae <OS_TaskStkClr+0x18>
    17c2:	08 95       	ret

000017c4 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    17c4:	3f 92       	push	r3
    17c6:	4f 92       	push	r4
    17c8:	5f 92       	push	r5
    17ca:	6f 92       	push	r6
    17cc:	7f 92       	push	r7
    17ce:	8f 92       	push	r8
    17d0:	9f 92       	push	r9
    17d2:	af 92       	push	r10
    17d4:	bf 92       	push	r11
    17d6:	cf 92       	push	r12
    17d8:	df 92       	push	r13
    17da:	ef 92       	push	r14
    17dc:	ff 92       	push	r15
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	2c 97       	sbiw	r28, 0x0c	; 12
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	9e 83       	std	Y+6, r25	; 0x06
    17f8:	8d 83       	std	Y+5, r24	; 0x05
    17fa:	78 87       	std	Y+8, r23	; 0x08
    17fc:	6f 83       	std	Y+7, r22	; 0x07
    17fe:	5a 87       	std	Y+10, r21	; 0x0a
    1800:	49 87       	std	Y+9, r20	; 0x09
    1802:	32 2e       	mov	r3, r18
    1804:	1c 87       	std	Y+12, r17	; 0x0c
    1806:	0b 87       	std	Y+11, r16	; 0x0b
    1808:	27 01       	movw	r4, r14
    180a:	a9 82       	std	Y+1, r10	; 0x01
    180c:	ba 82       	std	Y+2, r11	; 0x02
    180e:	cb 82       	std	Y+3, r12	; 0x03
    1810:	dc 82       	std	Y+4, r13	; 0x04
    1812:	64 01       	movw	r12, r8
#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    1814:	0e 94 95 01 	call	0x32a	; 0x32a <OS_CPU_SR_Save>
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
    1818:	90 90 4a 0b 	lds	r9, 0x0B4A	; 0x800b4a <OSIntNesting>
    181c:	99 20       	and	r9, r9
    181e:	39 f0       	breq	.+14     	; 0x182e <OSTaskCreateExt+0x6a>
        OS_EXIT_CRITICAL();
    1820:	0e 94 98 01 	call	0x330	; 0x330 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
    1824:	0f 2e       	mov	r0, r31
    1826:	fc e3       	ldi	r31, 0x3C	; 60
    1828:	9f 2e       	mov	r9, r31
    182a:	f0 2d       	mov	r31, r0
    182c:	51 c0       	rjmp	.+162    	; 0x18d0 <OSTaskCreateExt+0x10c>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    182e:	63 2c       	mov	r6, r3
    1830:	71 2c       	mov	r7, r1
    1832:	f3 01       	movw	r30, r6
    1834:	ee 0f       	add	r30, r30
    1836:	ff 1f       	adc	r31, r31
    1838:	e8 59       	subi	r30, 0x98	; 152
    183a:	f1 4f       	sbci	r31, 0xF1	; 241
    183c:	20 81       	ld	r18, Z
    183e:	31 81       	ldd	r19, Z+1	; 0x01
    1840:	23 2b       	or	r18, r19
    1842:	09 f0       	breq	.+2      	; 0x1846 <OSTaskCreateExt+0x82>
    1844:	3f c0       	rjmp	.+126    	; 0x18c4 <OSTaskCreateExt+0x100>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    1846:	f3 01       	movw	r30, r6
    1848:	ee 0f       	add	r30, r30
    184a:	ff 1f       	adc	r31, r31
    184c:	e8 59       	subi	r30, 0x98	; 152
    184e:	f1 4f       	sbci	r31, 0xF1	; 241
    1850:	21 e0       	ldi	r18, 0x01	; 1
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	31 83       	std	Z+1, r19	; 0x01
    1856:	20 83       	st	Z, r18
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
    1858:	0e 94 98 01 	call	0x330	; 0x330 <OS_CPU_SR_Restore>

#if (OS_TASK_STAT_STK_CHK_EN > 0u)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    185c:	28 a1       	ldd	r18, Y+32	; 0x20
    185e:	39 a1       	ldd	r19, Y+33	; 0x21
    1860:	49 81       	ldd	r20, Y+1	; 0x01
    1862:	5a 81       	ldd	r21, Y+2	; 0x02
    1864:	6b 81       	ldd	r22, Y+3	; 0x03
    1866:	7c 81       	ldd	r23, Y+4	; 0x04
    1868:	c7 01       	movw	r24, r14
    186a:	95 df       	rcall	.-214    	; 0x1796 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    186c:	28 a1       	ldd	r18, Y+32	; 0x20
    186e:	39 a1       	ldd	r19, Y+33	; 0x21
    1870:	49 85       	ldd	r20, Y+9	; 0x09
    1872:	5a 85       	ldd	r21, Y+10	; 0x0a
    1874:	6f 81       	ldd	r22, Y+7	; 0x07
    1876:	78 85       	ldd	r23, Y+8	; 0x08
    1878:	8d 81       	ldd	r24, Y+5	; 0x05
    187a:	9e 81       	ldd	r25, Y+6	; 0x06
    187c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <OSTaskStkInit>
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    1880:	a8 a0       	ldd	r10, Y+32	; 0x20
    1882:	b9 a0       	ldd	r11, Y+33	; 0x21
    1884:	e9 80       	ldd	r14, Y+1	; 0x01
    1886:	fa 80       	ldd	r15, Y+2	; 0x02
    1888:	0b 81       	ldd	r16, Y+3	; 0x03
    188a:	1c 81       	ldd	r17, Y+4	; 0x04
    188c:	2b 85       	ldd	r18, Y+11	; 0x0b
    188e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1890:	a2 01       	movw	r20, r4
    1892:	bc 01       	movw	r22, r24
    1894:	83 2d       	mov	r24, r3
    1896:	7b db       	rcall	.-2314   	; 0xf8e <OS_TCBInit>
    1898:	d8 2e       	mov	r13, r24
        if (err == OS_ERR_NONE) {
    189a:	81 11       	cpse	r24, r1
    189c:	06 c0       	rjmp	.+12     	; 0x18aa <OSTaskCreateExt+0xe6>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    189e:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <OSRunning>
    18a2:	81 30       	cpi	r24, 0x01	; 1
                OS_Sched();
    18a4:	a9 f4       	brne	.+42     	; 0x18d0 <OSTaskCreateExt+0x10c>
    18a6:	58 da       	rcall	.-2896   	; 0xd58 <OS_Sched>
    18a8:	13 c0       	rjmp	.+38     	; 0x18d0 <OSTaskCreateExt+0x10c>
            }
        } else {
            OS_ENTER_CRITICAL();
    18aa:	0e 94 95 01 	call	0x32a	; 0x32a <OS_CPU_SR_Save>
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    18ae:	f3 01       	movw	r30, r6
    18b0:	ee 0f       	add	r30, r30
    18b2:	ff 1f       	adc	r31, r31
    18b4:	e8 59       	subi	r30, 0x98	; 152
    18b6:	f1 4f       	sbci	r31, 0xF1	; 241
    18b8:	11 82       	std	Z+1, r1	; 0x01
    18ba:	10 82       	st	Z, r1
            OS_EXIT_CRITICAL();
    18bc:	0e 94 98 01 	call	0x330	; 0x330 <OS_CPU_SR_Restore>
        }
        return (err);
    18c0:	9d 2c       	mov	r9, r13
    18c2:	06 c0       	rjmp	.+12     	; 0x18d0 <OSTaskCreateExt+0x10c>
    }
    OS_EXIT_CRITICAL();
    18c4:	0e 94 98 01 	call	0x330	; 0x330 <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
    18c8:	0f 2e       	mov	r0, r31
    18ca:	f8 e2       	ldi	r31, 0x28	; 40
    18cc:	9f 2e       	mov	r9, r31
    18ce:	f0 2d       	mov	r31, r0
}
    18d0:	89 2d       	mov	r24, r9
    18d2:	2c 96       	adiw	r28, 0x0c	; 12
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
    18de:	df 91       	pop	r29
    18e0:	cf 91       	pop	r28
    18e2:	1f 91       	pop	r17
    18e4:	0f 91       	pop	r16
    18e6:	ff 90       	pop	r15
    18e8:	ef 90       	pop	r14
    18ea:	df 90       	pop	r13
    18ec:	cf 90       	pop	r12
    18ee:	bf 90       	pop	r11
    18f0:	af 90       	pop	r10
    18f2:	9f 90       	pop	r9
    18f4:	8f 90       	pop	r8
    18f6:	7f 90       	pop	r7
    18f8:	6f 90       	pop	r6
    18fa:	5f 90       	pop	r5
    18fc:	4f 90       	pop	r4
    18fe:	3f 90       	pop	r3
    1900:	08 95       	ret

00001902 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT32U ticks)
{
    1902:	cf 92       	push	r12
    1904:	df 92       	push	r13
    1906:	ef 92       	push	r14
    1908:	ff 92       	push	r15
    OS_CPU_SR  cpu_sr = 0u;
#endif



    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
    190a:	20 91 4a 0b 	lds	r18, 0x0B4A	; 0x800b4a <OSIntNesting>
    190e:	21 11       	cpse	r18, r1
    1910:	32 c0       	rjmp	.+100    	; 0x1976 <OSTimeDly+0x74>
        return;
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
    1912:	20 91 f0 07 	lds	r18, 0x07F0	; 0x8007f0 <OSLockNesting>
    1916:	21 11       	cpse	r18, r1
    1918:	2e c0       	rjmp	.+92     	; 0x1976 <OSTimeDly+0x74>
        return;
    }
    if (ticks > 0u) {                            /* 0 means no delay!                                  */
    191a:	61 15       	cp	r22, r1
    191c:	71 05       	cpc	r23, r1
    191e:	81 05       	cpc	r24, r1
    1920:	91 05       	cpc	r25, r1
    1922:	49 f1       	breq	.+82     	; 0x1976 <OSTimeDly+0x74>
    1924:	6b 01       	movw	r12, r22
    1926:	7c 01       	movw	r14, r24
        OS_ENTER_CRITICAL();
    1928:	0e 94 95 01 	call	0x32a	; 0x32a <OS_CPU_SR_Save>
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    192c:	a0 91 4b 0b 	lds	r26, 0x0B4B	; 0x800b4b <OSTCBCur>
    1930:	b0 91 4c 0b 	lds	r27, 0x0B4C	; 0x800b4c <OSTCBCur+0x1>
        OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
    1934:	92 96       	adiw	r26, 0x22	; 34
    1936:	ec 91       	ld	r30, X
    1938:	92 97       	sbiw	r26, 0x22	; 34
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	93 96       	adiw	r26, 0x23	; 35
    193e:	9c 91       	ld	r25, X
    1940:	93 97       	sbiw	r26, 0x23	; 35
    1942:	90 95       	com	r25
    1944:	e2 5f       	subi	r30, 0xF2	; 242
    1946:	f4 4f       	sbci	r31, 0xF4	; 244
    1948:	20 81       	ld	r18, Z
    194a:	92 23       	and	r25, r18
    194c:	90 83       	st	Z, r25
        if (OSRdyTbl[y] == 0u) {
    194e:	91 11       	cpse	r25, r1
    1950:	09 c0       	rjmp	.+18     	; 0x1964 <OSTimeDly+0x62>
            OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
    1952:	94 96       	adiw	r26, 0x24	; 36
    1954:	9c 91       	ld	r25, X
    1956:	94 97       	sbiw	r26, 0x24	; 36
    1958:	90 95       	com	r25
    195a:	20 91 0d 0b 	lds	r18, 0x0B0D	; 0x800b0d <OSRdyGrp>
    195e:	92 23       	and	r25, r18
    1960:	90 93 0d 0b 	sts	0x0B0D, r25	; 0x800b0d <OSRdyGrp>
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    1964:	5a 96       	adiw	r26, 0x1a	; 26
    1966:	cd 92       	st	X+, r12
    1968:	dd 92       	st	X+, r13
    196a:	ed 92       	st	X+, r14
    196c:	fc 92       	st	X, r15
    196e:	5d 97       	sbiw	r26, 0x1d	; 29
        OS_EXIT_CRITICAL();
    1970:	0e 94 98 01 	call	0x330	; 0x330 <OS_CPU_SR_Restore>
        OS_Sched();                              /* Find next task to run!                             */
    }
}
    1974:	f1 d9       	rcall	.-3102   	; 0xd58 <OS_Sched>
    1976:	ff 90       	pop	r15
    1978:	ef 90       	pop	r14
    197a:	df 90       	pop	r13
    197c:	cf 90       	pop	r12
    197e:	08 95       	ret

00001980 <OSTimeDlyHMSM>:
#if OS_TIME_DLY_HMSM_EN > 0u
INT8U  OSTimeDlyHMSM (INT8U   hours,
                      INT8U   minutes,
                      INT8U   seconds,
                      INT16U  ms)
{
    1980:	cf 92       	push	r12
    1982:	df 92       	push	r13
    1984:	ef 92       	push	r14
    1986:	ff 92       	push	r15
    1988:	cf 93       	push	r28
    INT32U ticks;


    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
    198a:	90 91 4a 0b 	lds	r25, 0x0B4A	; 0x800b4a <OSIntNesting>
    198e:	91 11       	cpse	r25, r1
    1990:	30 c0       	rjmp	.+96     	; 0x19f2 <OSTimeDlyHMSM+0x72>
        return (OS_ERR_TIME_DLY_ISR);
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
    1992:	c0 91 f0 07 	lds	r28, 0x07F0	; 0x8007f0 <OSLockNesting>
    1996:	c1 11       	cpse	r28, r1
    1998:	2e c0       	rjmp	.+92     	; 0x19f6 <OSTimeDlyHMSM+0x76>
    199a:	f9 01       	movw	r30, r18
    199c:	58 2f       	mov	r21, r24
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500uL / OS_TICKS_PER_SEC) / 1000uL;
    OSTimeDly(ticks);
    199e:	26 2f       	mov	r18, r22
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	ac e3       	ldi	r26, 0x3C	; 60
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	3b d2       	rcall	.+1142   	; 0x1e1e <__umulhisi3>
    19a8:	6b 01       	movw	r12, r22
    19aa:	7c 01       	movw	r14, r24
    19ac:	c4 0e       	add	r12, r20
    19ae:	d1 1c       	adc	r13, r1
    19b0:	e1 1c       	adc	r14, r1
    19b2:	f1 1c       	adc	r15, r1
    19b4:	25 2f       	mov	r18, r21
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	a0 e1       	ldi	r26, 0x10	; 16
    19ba:	be e0       	ldi	r27, 0x0E	; 14
    19bc:	30 d2       	rcall	.+1120   	; 0x1e1e <__umulhisi3>
    19be:	a7 01       	movw	r20, r14
    19c0:	96 01       	movw	r18, r12
    19c2:	26 0f       	add	r18, r22
    19c4:	37 1f       	adc	r19, r23
    19c6:	48 1f       	adc	r20, r24
    19c8:	59 1f       	adc	r21, r25
    19ca:	a8 ee       	ldi	r26, 0xE8	; 232
    19cc:	b3 e0       	ldi	r27, 0x03	; 3
    19ce:	36 d2       	rcall	.+1132   	; 0x1e3c <__muluhisi3>
    19d0:	6b 01       	movw	r12, r22
    19d2:	7c 01       	movw	r14, r24
    19d4:	9f 01       	movw	r18, r30
    19d6:	23 d2       	rcall	.+1094   	; 0x1e1e <__umulhisi3>
    19d8:	28 ee       	ldi	r18, 0xE8	; 232
    19da:	33 e0       	ldi	r19, 0x03	; 3
    19dc:	40 e0       	ldi	r20, 0x00	; 0
    19de:	50 e0       	ldi	r21, 0x00	; 0
    19e0:	fc d1       	rcall	.+1016   	; 0x1dda <__udivmodsi4>
    19e2:	c7 01       	movw	r24, r14
    19e4:	b6 01       	movw	r22, r12
    19e6:	62 0f       	add	r22, r18
    19e8:	73 1f       	adc	r23, r19
    19ea:	84 1f       	adc	r24, r20
    19ec:	95 1f       	adc	r25, r21
    19ee:	89 df       	rcall	.-238    	; 0x1902 <OSTimeDly>
    return (OS_ERR_NONE);
    19f0:	03 c0       	rjmp	.+6      	; 0x19f8 <OSTimeDlyHMSM+0x78>
{
    INT32U ticks;


    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
        return (OS_ERR_TIME_DLY_ISR);
    19f2:	c5 e5       	ldi	r28, 0x55	; 85
    19f4:	01 c0       	rjmp	.+2      	; 0x19f8 <OSTimeDlyHMSM+0x78>
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
        return (OS_ERR_SCHED_LOCKED);
    19f6:	c2 e3       	ldi	r28, 0x32	; 50
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500uL / OS_TICKS_PER_SEC) / 1000uL;
    OSTimeDly(ticks);
    return (OS_ERR_NONE);
}
    19f8:	8c 2f       	mov	r24, r28
    19fa:	cf 91       	pop	r28
    19fc:	ff 90       	pop	r15
    19fe:	ef 90       	pop	r14
    1a00:	df 90       	pop	r13
    1a02:	cf 90       	pop	r12
    1a04:	08 95       	ret

00001a06 <OSTmr_Link>:
        default:
             OSSchedUnlock();
             *perr = OS_ERR_TMR_INVALID_STATE;
             return (OS_FALSE);
    }
}
    1a06:	0f 93       	push	r16
    1a08:	1f 93       	push	r17
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	dc 01       	movw	r26, r24
    1a10:	83 e0       	ldi	r24, 0x03	; 3
    1a12:	58 96       	adiw	r26, 0x18	; 24
    1a14:	8c 93       	st	X, r24
    1a16:	58 97       	sbiw	r26, 0x18	; 24
    1a18:	61 30       	cpi	r22, 0x01	; 1
    1a1a:	c9 f4       	brne	.+50     	; 0x1a4e <OSTmr_Link+0x48>
    1a1c:	51 96       	adiw	r26, 0x11	; 17
    1a1e:	0d 91       	ld	r16, X+
    1a20:	1d 91       	ld	r17, X+
    1a22:	2d 91       	ld	r18, X+
    1a24:	3c 91       	ld	r19, X
    1a26:	54 97       	sbiw	r26, 0x14	; 20
    1a28:	40 91 4d 0b 	lds	r20, 0x0B4D	; 0x800b4d <OSTmrTime>
    1a2c:	50 91 4e 0b 	lds	r21, 0x0B4E	; 0x800b4e <OSTmrTime+0x1>
    1a30:	60 91 4f 0b 	lds	r22, 0x0B4F	; 0x800b4f <OSTmrTime+0x2>
    1a34:	70 91 50 0b 	lds	r23, 0x0B50	; 0x800b50 <OSTmrTime+0x3>
    1a38:	40 0f       	add	r20, r16
    1a3a:	51 1f       	adc	r21, r17
    1a3c:	62 1f       	adc	r22, r18
    1a3e:	73 1f       	adc	r23, r19
    1a40:	19 96       	adiw	r26, 0x09	; 9
    1a42:	4d 93       	st	X+, r20
    1a44:	5d 93       	st	X+, r21
    1a46:	6d 93       	st	X+, r22
    1a48:	7c 93       	st	X, r23
    1a4a:	1c 97       	sbiw	r26, 0x0c	; 12
    1a4c:	36 c0       	rjmp	.+108    	; 0x1aba <OSTmr_Link+0xb4>
    1a4e:	1d 96       	adiw	r26, 0x0d	; 13
    1a50:	4d 91       	ld	r20, X+
    1a52:	5d 91       	ld	r21, X+
    1a54:	6d 91       	ld	r22, X+
    1a56:	7c 91       	ld	r23, X
    1a58:	50 97       	sbiw	r26, 0x10	; 16
    1a5a:	41 15       	cp	r20, r1
    1a5c:	51 05       	cpc	r21, r1
    1a5e:	61 05       	cpc	r22, r1
    1a60:	71 05       	cpc	r23, r1
    1a62:	c9 f4       	brne	.+50     	; 0x1a96 <OSTmr_Link+0x90>
    1a64:	51 96       	adiw	r26, 0x11	; 17
    1a66:	0d 91       	ld	r16, X+
    1a68:	1d 91       	ld	r17, X+
    1a6a:	2d 91       	ld	r18, X+
    1a6c:	3c 91       	ld	r19, X
    1a6e:	54 97       	sbiw	r26, 0x14	; 20
    1a70:	40 91 4d 0b 	lds	r20, 0x0B4D	; 0x800b4d <OSTmrTime>
    1a74:	50 91 4e 0b 	lds	r21, 0x0B4E	; 0x800b4e <OSTmrTime+0x1>
    1a78:	60 91 4f 0b 	lds	r22, 0x0B4F	; 0x800b4f <OSTmrTime+0x2>
    1a7c:	70 91 50 0b 	lds	r23, 0x0B50	; 0x800b50 <OSTmrTime+0x3>
    1a80:	40 0f       	add	r20, r16
    1a82:	51 1f       	adc	r21, r17
    1a84:	62 1f       	adc	r22, r18
    1a86:	73 1f       	adc	r23, r19
    1a88:	19 96       	adiw	r26, 0x09	; 9
    1a8a:	4d 93       	st	X+, r20
    1a8c:	5d 93       	st	X+, r21
    1a8e:	6d 93       	st	X+, r22
    1a90:	7c 93       	st	X, r23
    1a92:	1c 97       	sbiw	r26, 0x0c	; 12
    1a94:	12 c0       	rjmp	.+36     	; 0x1aba <OSTmr_Link+0xb4>
    1a96:	00 91 4d 0b 	lds	r16, 0x0B4D	; 0x800b4d <OSTmrTime>
    1a9a:	10 91 4e 0b 	lds	r17, 0x0B4E	; 0x800b4e <OSTmrTime+0x1>
    1a9e:	20 91 4f 0b 	lds	r18, 0x0B4F	; 0x800b4f <OSTmrTime+0x2>
    1aa2:	30 91 50 0b 	lds	r19, 0x0B50	; 0x800b50 <OSTmrTime+0x3>
    1aa6:	40 0f       	add	r20, r16
    1aa8:	51 1f       	adc	r21, r17
    1aaa:	62 1f       	adc	r22, r18
    1aac:	73 1f       	adc	r23, r19
    1aae:	19 96       	adiw	r26, 0x09	; 9
    1ab0:	4d 93       	st	X+, r20
    1ab2:	5d 93       	st	X+, r21
    1ab4:	6d 93       	st	X+, r22
    1ab6:	7c 93       	st	X, r23
    1ab8:	1c 97       	sbiw	r26, 0x0c	; 12
    1aba:	19 96       	adiw	r26, 0x09	; 9
    1abc:	ed 91       	ld	r30, X+
    1abe:	fc 91       	ld	r31, X
    1ac0:	1a 97       	sbiw	r26, 0x0a	; 10
    1ac2:	e7 70       	andi	r30, 0x07	; 7
    1ac4:	ff 27       	eor	r31, r31
    1ac6:	ef 01       	movw	r28, r30
    1ac8:	cc 0f       	add	r28, r28
    1aca:	dd 1f       	adc	r29, r29
    1acc:	cc 0f       	add	r28, r28
    1ace:	dd 1f       	adc	r29, r29
    1ad0:	c0 53       	subi	r28, 0x30	; 48
    1ad2:	d8 4f       	sbci	r29, 0xF8	; 248
    1ad4:	09 90       	ld	r0, Y+
    1ad6:	d8 81       	ld	r29, Y
    1ad8:	c0 2d       	mov	r28, r0
    1ada:	20 97       	sbiw	r28, 0x00	; 0
    1adc:	89 f4       	brne	.+34     	; 0x1b00 <OSTmr_Link+0xfa>
    1ade:	ee 0f       	add	r30, r30
    1ae0:	ff 1f       	adc	r31, r31
    1ae2:	ee 0f       	add	r30, r30
    1ae4:	ff 1f       	adc	r31, r31
    1ae6:	e0 53       	subi	r30, 0x30	; 48
    1ae8:	f8 4f       	sbci	r31, 0xF8	; 248
    1aea:	b1 83       	std	Z+1, r27	; 0x01
    1aec:	a0 83       	st	Z, r26
    1aee:	16 96       	adiw	r26, 0x06	; 6
    1af0:	1c 92       	st	X, r1
    1af2:	1e 92       	st	-X, r1
    1af4:	15 97       	sbiw	r26, 0x05	; 5
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	93 83       	std	Z+3, r25	; 0x03
    1afc:	82 83       	std	Z+2, r24	; 0x02
    1afe:	13 c0       	rjmp	.+38     	; 0x1b26 <OSTmr_Link+0x120>
    1b00:	ee 0f       	add	r30, r30
    1b02:	ff 1f       	adc	r31, r31
    1b04:	ee 0f       	add	r30, r30
    1b06:	ff 1f       	adc	r31, r31
    1b08:	e0 53       	subi	r30, 0x30	; 48
    1b0a:	f8 4f       	sbci	r31, 0xF8	; 248
    1b0c:	b1 83       	std	Z+1, r27	; 0x01
    1b0e:	a0 83       	st	Z, r26
    1b10:	16 96       	adiw	r26, 0x06	; 6
    1b12:	dc 93       	st	X, r29
    1b14:	ce 93       	st	-X, r28
    1b16:	15 97       	sbiw	r26, 0x05	; 5
    1b18:	b8 87       	std	Y+8, r27	; 0x08
    1b1a:	af 83       	std	Y+7, r26	; 0x07
    1b1c:	82 81       	ldd	r24, Z+2	; 0x02
    1b1e:	93 81       	ldd	r25, Z+3	; 0x03
    1b20:	01 96       	adiw	r24, 0x01	; 1
    1b22:	93 83       	std	Z+3, r25	; 0x03
    1b24:	82 83       	std	Z+2, r24	; 0x02
    1b26:	18 96       	adiw	r26, 0x08	; 8
    1b28:	1c 92       	st	X, r1
    1b2a:	1e 92       	st	-X, r1
    1b2c:	17 97       	sbiw	r26, 0x07	; 7
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	1f 91       	pop	r17
    1b34:	0f 91       	pop	r16
    1b36:	08 95       	ret

00001b38 <OSTmr_Unlink>:
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
    1b3c:	ec 01       	movw	r28, r24
    1b3e:	29 85       	ldd	r18, Y+9	; 0x09
    1b40:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b42:	27 70       	andi	r18, 0x07	; 7
    1b44:	33 27       	eor	r19, r19
    1b46:	f9 01       	movw	r30, r18
    1b48:	ee 0f       	add	r30, r30
    1b4a:	ff 1f       	adc	r31, r31
    1b4c:	ee 0f       	add	r30, r30
    1b4e:	ff 1f       	adc	r31, r31
    1b50:	e0 53       	subi	r30, 0x30	; 48
    1b52:	f8 4f       	sbci	r31, 0xF8	; 248
    1b54:	40 81       	ld	r20, Z
    1b56:	51 81       	ldd	r21, Z+1	; 0x01
    1b58:	84 17       	cp	r24, r20
    1b5a:	95 07       	cpc	r25, r21
    1b5c:	91 f4       	brne	.+36     	; 0x1b82 <OSTmr_Unlink+0x4a>
    1b5e:	ad 81       	ldd	r26, Y+5	; 0x05
    1b60:	be 81       	ldd	r27, Y+6	; 0x06
    1b62:	f9 01       	movw	r30, r18
    1b64:	ee 0f       	add	r30, r30
    1b66:	ff 1f       	adc	r31, r31
    1b68:	ee 0f       	add	r30, r30
    1b6a:	ff 1f       	adc	r31, r31
    1b6c:	e0 53       	subi	r30, 0x30	; 48
    1b6e:	f8 4f       	sbci	r31, 0xF8	; 248
    1b70:	b1 83       	std	Z+1, r27	; 0x01
    1b72:	a0 83       	st	Z, r26
    1b74:	10 97       	sbiw	r26, 0x00	; 0
    1b76:	89 f0       	breq	.+34     	; 0x1b9a <OSTmr_Unlink+0x62>
    1b78:	18 96       	adiw	r26, 0x08	; 8
    1b7a:	1c 92       	st	X, r1
    1b7c:	1e 92       	st	-X, r1
    1b7e:	17 97       	sbiw	r26, 0x07	; 7
    1b80:	0c c0       	rjmp	.+24     	; 0x1b9a <OSTmr_Unlink+0x62>
    1b82:	af 81       	ldd	r26, Y+7	; 0x07
    1b84:	b8 85       	ldd	r27, Y+8	; 0x08
    1b86:	ed 81       	ldd	r30, Y+5	; 0x05
    1b88:	fe 81       	ldd	r31, Y+6	; 0x06
    1b8a:	16 96       	adiw	r26, 0x06	; 6
    1b8c:	fc 93       	st	X, r31
    1b8e:	ee 93       	st	-X, r30
    1b90:	15 97       	sbiw	r26, 0x05	; 5
    1b92:	30 97       	sbiw	r30, 0x00	; 0
    1b94:	11 f0       	breq	.+4      	; 0x1b9a <OSTmr_Unlink+0x62>
    1b96:	b0 87       	std	Z+8, r27	; 0x08
    1b98:	a7 83       	std	Z+7, r26	; 0x07
    1b9a:	91 e0       	ldi	r25, 0x01	; 1
    1b9c:	98 8f       	std	Y+24, r25	; 0x18
    1b9e:	1e 82       	std	Y+6, r1	; 0x06
    1ba0:	1d 82       	std	Y+5, r1	; 0x05
    1ba2:	18 86       	std	Y+8, r1	; 0x08
    1ba4:	1f 82       	std	Y+7, r1	; 0x07
    1ba6:	22 0f       	add	r18, r18
    1ba8:	33 1f       	adc	r19, r19
    1baa:	22 0f       	add	r18, r18
    1bac:	33 1f       	adc	r19, r19
    1bae:	f9 01       	movw	r30, r18
    1bb0:	e0 53       	subi	r30, 0x30	; 48
    1bb2:	f8 4f       	sbci	r31, 0xF8	; 248
    1bb4:	82 81       	ldd	r24, Z+2	; 0x02
    1bb6:	93 81       	ldd	r25, Z+3	; 0x03
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	93 83       	std	Z+3, r25	; 0x03
    1bbc:	82 83       	std	Z+2, r24	; 0x02
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	08 95       	ret

00001bc4 <OSTmr_Task>:
    1bc4:	cf 93       	push	r28
    1bc6:	df 93       	push	r29
    1bc8:	1f 92       	push	r1
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	68 94       	set
    1bd0:	dd 24       	eor	r13, r13
    1bd2:	d1 f8       	bld	r13, 1
    1bd4:	9e 01       	movw	r18, r28
    1bd6:	2f 5f       	subi	r18, 0xFF	; 255
    1bd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bda:	40 e0       	ldi	r20, 0x00	; 0
    1bdc:	50 e0       	ldi	r21, 0x00	; 0
    1bde:	ba 01       	movw	r22, r20
    1be0:	80 91 f1 07 	lds	r24, 0x07F1	; 0x8007f1 <OSTmrSemSignal>
    1be4:	90 91 f2 07 	lds	r25, 0x07F2	; 0x8007f2 <OSTmrSemSignal+0x1>
    1be8:	71 db       	rcall	.-2334   	; 0x12cc <OSSemPend>
    1bea:	0e 94 54 04 	call	0x8a8	; 0x8a8 <OSSchedLock>
    1bee:	80 91 4d 0b 	lds	r24, 0x0B4D	; 0x800b4d <OSTmrTime>
    1bf2:	90 91 4e 0b 	lds	r25, 0x0B4E	; 0x800b4e <OSTmrTime+0x1>
    1bf6:	a0 91 4f 0b 	lds	r26, 0x0B4F	; 0x800b4f <OSTmrTime+0x2>
    1bfa:	b0 91 50 0b 	lds	r27, 0x0B50	; 0x800b50 <OSTmrTime+0x3>
    1bfe:	01 96       	adiw	r24, 0x01	; 1
    1c00:	a1 1d       	adc	r26, r1
    1c02:	b1 1d       	adc	r27, r1
    1c04:	80 93 4d 0b 	sts	0x0B4D, r24	; 0x800b4d <OSTmrTime>
    1c08:	90 93 4e 0b 	sts	0x0B4E, r25	; 0x800b4e <OSTmrTime+0x1>
    1c0c:	a0 93 4f 0b 	sts	0x0B4F, r26	; 0x800b4f <OSTmrTime+0x2>
    1c10:	b0 93 50 0b 	sts	0x0B50, r27	; 0x800b50 <OSTmrTime+0x3>
    1c14:	87 70       	andi	r24, 0x07	; 7
    1c16:	99 27       	eor	r25, r25
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	88 0f       	add	r24, r24
    1c1e:	99 1f       	adc	r25, r25
    1c20:	fc 01       	movw	r30, r24
    1c22:	e0 53       	subi	r30, 0x30	; 48
    1c24:	f8 4f       	sbci	r31, 0xF8	; 248
    1c26:	00 81       	ld	r16, Z
    1c28:	11 81       	ldd	r17, Z+1	; 0x01
    1c2a:	01 15       	cp	r16, r1
    1c2c:	11 05       	cpc	r17, r1
    1c2e:	b9 f1       	breq	.+110    	; 0x1c9e <OSTmr_Task+0xda>
    1c30:	d8 01       	movw	r26, r16
    1c32:	15 96       	adiw	r26, 0x05	; 5
    1c34:	ec 90       	ld	r14, X
    1c36:	15 97       	sbiw	r26, 0x05	; 5
    1c38:	16 96       	adiw	r26, 0x06	; 6
    1c3a:	fc 90       	ld	r15, X
    1c3c:	16 97       	sbiw	r26, 0x06	; 6
    1c3e:	19 96       	adiw	r26, 0x09	; 9
    1c40:	4d 91       	ld	r20, X+
    1c42:	5d 91       	ld	r21, X+
    1c44:	6d 91       	ld	r22, X+
    1c46:	7c 91       	ld	r23, X
    1c48:	1c 97       	sbiw	r26, 0x0c	; 12
    1c4a:	80 91 4d 0b 	lds	r24, 0x0B4D	; 0x800b4d <OSTmrTime>
    1c4e:	90 91 4e 0b 	lds	r25, 0x0B4E	; 0x800b4e <OSTmrTime+0x1>
    1c52:	a0 91 4f 0b 	lds	r26, 0x0B4F	; 0x800b4f <OSTmrTime+0x2>
    1c56:	b0 91 50 0b 	lds	r27, 0x0B50	; 0x800b50 <OSTmrTime+0x3>
    1c5a:	48 17       	cp	r20, r24
    1c5c:	59 07       	cpc	r21, r25
    1c5e:	6a 07       	cpc	r22, r26
    1c60:	7b 07       	cpc	r23, r27
    1c62:	c1 f4       	brne	.+48     	; 0x1c94 <OSTmr_Task+0xd0>
    1c64:	c8 01       	movw	r24, r16
    1c66:	68 df       	rcall	.-304    	; 0x1b38 <OSTmr_Unlink>
    1c68:	f8 01       	movw	r30, r16
    1c6a:	87 89       	ldd	r24, Z+23	; 0x17
    1c6c:	82 30       	cpi	r24, 0x02	; 2
    1c6e:	21 f4       	brne	.+8      	; 0x1c78 <OSTmr_Task+0xb4>
    1c70:	61 e0       	ldi	r22, 0x01	; 1
    1c72:	c8 01       	movw	r24, r16
    1c74:	c8 de       	rcall	.-624    	; 0x1a06 <OSTmr_Link>
    1c76:	01 c0       	rjmp	.+2      	; 0x1c7a <OSTmr_Task+0xb6>
    1c78:	d0 8e       	std	Z+24, r13	; 0x18
    1c7a:	d8 01       	movw	r26, r16
    1c7c:	11 96       	adiw	r26, 0x01	; 1
    1c7e:	ed 91       	ld	r30, X+
    1c80:	fc 91       	ld	r31, X
    1c82:	12 97       	sbiw	r26, 0x02	; 2
    1c84:	30 97       	sbiw	r30, 0x00	; 0
    1c86:	31 f0       	breq	.+12     	; 0x1c94 <OSTmr_Task+0xd0>
    1c88:	13 96       	adiw	r26, 0x03	; 3
    1c8a:	6d 91       	ld	r22, X+
    1c8c:	7c 91       	ld	r23, X
    1c8e:	14 97       	sbiw	r26, 0x04	; 4
    1c90:	c8 01       	movw	r24, r16
    1c92:	09 95       	icall
    1c94:	0e 2d       	mov	r16, r14
    1c96:	1f 2d       	mov	r17, r15
    1c98:	01 15       	cp	r16, r1
    1c9a:	11 05       	cpc	r17, r1
    1c9c:	49 f6       	brne	.-110    	; 0x1c30 <OSTmr_Task+0x6c>
    1c9e:	9e d8       	rcall	.-3780   	; 0xddc <OSSchedUnlock>
    1ca0:	99 cf       	rjmp	.-206    	; 0x1bd4 <OSTmr_Task+0x10>

00001ca2 <OSTmrSignal>:
INT8U  OSTmrSignal (void)
{
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
    1ca2:	80 91 f1 07 	lds	r24, 0x07F1	; 0x8007f1 <OSTmrSemSignal>
    1ca6:	90 91 f2 07 	lds	r25, 0x07F2	; 0x8007f2 <OSTmrSemSignal+0x1>
    1caa:	7f cb       	rjmp	.-2306   	; 0x13aa <OSSemPost>
    return (err);
}
    1cac:	08 95       	ret

00001cae <OSTmr_Init>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
void  OSTmr_Init (void)
{
    1cae:	8f 92       	push	r8
    1cb0:	9f 92       	push	r9
    1cb2:	af 92       	push	r10
    1cb4:	bf 92       	push	r11
    1cb6:	cf 92       	push	r12
    1cb8:	df 92       	push	r13
    1cba:	ef 92       	push	r14
    1cbc:	ff 92       	push	r15
    1cbe:	0f 93       	push	r16
    1cc0:	1f 93       	push	r17
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	1f 92       	push	r1
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    INT16U   ix_next;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    1ccc:	60 e9       	ldi	r22, 0x90	; 144
    1cce:	71 e0       	ldi	r23, 0x01	; 1
    1cd0:	83 e3       	ldi	r24, 0x33	; 51
    1cd2:	98 e0       	ldi	r25, 0x08	; 8
    1cd4:	0e 94 a4 05 	call	0xb48	; 0xb48 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
    1cd8:	60 e2       	ldi	r22, 0x20	; 32
    1cda:	70 e0       	ldi	r23, 0x00	; 0
    1cdc:	80 ed       	ldi	r24, 0xD0	; 208
    1cde:	97 e0       	ldi	r25, 0x07	; 7
    1ce0:	0e 94 a4 05 	call	0xb48	; 0xb48 <OS_MemClr>
    1ce4:	e3 e3       	ldi	r30, 0x33	; 51
    1ce6:	f8 e0       	ldi	r31, 0x08	; 8
    1ce8:	6a ea       	ldi	r22, 0xAA	; 170
    1cea:	79 e0       	ldi	r23, 0x09	; 9

    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
        ix_next = ix + 1u;
        ptmr1 = &OSTmrTbl[ix];
        ptmr2 = &OSTmrTbl[ix_next];
        ptmr1->OSTmrType    = OS_TMR_TYPE;
    1cec:	44 e6       	ldi	r20, 0x64	; 100
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
#if OS_TMR_CFG_NAME_EN > 0u
        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
    1cee:	20 e6       	ldi	r18, 0x60	; 96
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	cf 01       	movw	r24, r30
    1cf4:	49 96       	adiw	r24, 0x19	; 25

    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
        ix_next = ix + 1u;
        ptmr1 = &OSTmrTbl[ix];
        ptmr2 = &OSTmrTbl[ix_next];
        ptmr1->OSTmrType    = OS_TMR_TYPE;
    1cf6:	40 83       	st	Z, r20
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
    1cf8:	10 8e       	std	Z+24, r1	; 0x18
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
    1cfa:	96 83       	std	Z+6, r25	; 0x06
    1cfc:	85 83       	std	Z+5, r24	; 0x05
#if OS_TMR_CFG_NAME_EN > 0u
        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
    1cfe:	36 8b       	std	Z+22, r19	; 0x16
    1d00:	25 8b       	std	Z+21, r18	; 0x15
    1d02:	fc 01       	movw	r30, r24


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
    1d04:	86 17       	cp	r24, r22
    1d06:	97 07       	cpc	r25, r23
    1d08:	a1 f7       	brne	.-24     	; 0x1cf2 <OSTmr_Init+0x44>
#if OS_TMR_CFG_NAME_EN > 0u
        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
#endif
    }
    ptmr1               = &OSTmrTbl[ix];
    ptmr1->OSTmrType    = OS_TMR_TYPE;
    1d0a:	84 e6       	ldi	r24, 0x64	; 100
    1d0c:	80 93 aa 09 	sts	0x09AA, r24	; 0x8009aa <OSTmrTbl+0x177>
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
    1d10:	10 92 c2 09 	sts	0x09C2, r1	; 0x8009c2 <OSTmrTbl+0x18f>
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
    1d14:	10 92 b0 09 	sts	0x09B0, r1	; 0x8009b0 <OSTmrTbl+0x17d>
    1d18:	10 92 af 09 	sts	0x09AF, r1	; 0x8009af <OSTmrTbl+0x17c>
#if OS_TMR_CFG_NAME_EN > 0u
    ptmr1->OSTmrName    = (INT8U *)(void *)"?";
    1d1c:	80 e6       	ldi	r24, 0x60	; 96
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	90 93 c0 09 	sts	0x09C0, r25	; 0x8009c0 <OSTmrTbl+0x18d>
    1d24:	80 93 bf 09 	sts	0x09BF, r24	; 0x8009bf <OSTmrTbl+0x18c>
#endif
    OSTmrTime           = 0u;
    1d28:	10 92 4d 0b 	sts	0x0B4D, r1	; 0x800b4d <OSTmrTime>
    1d2c:	10 92 4e 0b 	sts	0x0B4E, r1	; 0x800b4e <OSTmrTime+0x1>
    1d30:	10 92 4f 0b 	sts	0x0B4F, r1	; 0x800b4f <OSTmrTime+0x2>
    1d34:	10 92 50 0b 	sts	0x0B50, r1	; 0x800b50 <OSTmrTime+0x3>
    OSTmrUsed           = 0u;
    1d38:	10 92 f9 07 	sts	0x07F9, r1	; 0x8007f9 <OSTmrUsed+0x1>
    1d3c:	10 92 f8 07 	sts	0x07F8, r1	; 0x8007f8 <OSTmrUsed>
    OSTmrFree           = OS_TMR_CFG_MAX;
    1d40:	80 e1       	ldi	r24, 0x10	; 16
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	90 93 8e 0a 	sts	0x0A8E, r25	; 0x800a8e <OSTmrFree+0x1>
    1d48:	80 93 8d 0a 	sts	0x0A8D, r24	; 0x800a8d <OSTmrFree>
    OSTmrFreeList       = &OSTmrTbl[0];
    1d4c:	83 e3       	ldi	r24, 0x33	; 51
    1d4e:	98 e0       	ldi	r25, 0x08	; 8
    1d50:	90 93 cf 07 	sts	0x07CF, r25	; 0x8007cf <OSTmrFreeList+0x1>
    1d54:	80 93 ce 07 	sts	0x07CE, r24	; 0x8007ce <OSTmrFreeList>
    OSTmrSem            = OSSemCreate(1u);
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	8a da       	rcall	.-2796   	; 0x1272 <OSSemCreate>
    1d5e:	90 93 56 0b 	sts	0x0B56, r25	; 0x800b56 <OSTmrSem+0x1>
    1d62:	80 93 55 0b 	sts	0x0B55, r24	; 0x800b55 <OSTmrSem>
    OSTmrSemSignal      = OSSemCreate(0u);
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	83 da       	rcall	.-2810   	; 0x1272 <OSSemCreate>
    1d6c:	90 93 f2 07 	sts	0x07F2, r25	; 0x8007f2 <OSTmrSemSignal+0x1>
    1d70:	80 93 f1 07 	sts	0x07F1, r24	; 0x8007f1 <OSTmrSemSignal>
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OSTmr_Task,
    1d74:	1f 92       	push	r1
    1d76:	83 e0       	ldi	r24, 0x03	; 3
    1d78:	8f 93       	push	r24
    1d7a:	81 2c       	mov	r8, r1
    1d7c:	91 2c       	mov	r9, r1
    1d7e:	0f 2e       	mov	r0, r31
    1d80:	f2 e3       	ldi	r31, 0x32	; 50
    1d82:	af 2e       	mov	r10, r31
    1d84:	b1 2c       	mov	r11, r1
    1d86:	c1 2c       	mov	r12, r1
    1d88:	d1 2c       	mov	r13, r1
    1d8a:	f0 2d       	mov	r31, r0
    1d8c:	0f 2e       	mov	r0, r31
    1d8e:	f6 e1       	ldi	r31, 0x16	; 22
    1d90:	ef 2e       	mov	r14, r31
    1d92:	fb e0       	ldi	r31, 0x0B	; 11
    1d94:	ff 2e       	mov	r15, r31
    1d96:	f0 2d       	mov	r31, r0
    1d98:	0d ef       	ldi	r16, 0xFD	; 253
    1d9a:	1f ef       	ldi	r17, 0xFF	; 255
    1d9c:	2d e3       	ldi	r18, 0x3D	; 61
    1d9e:	47 e4       	ldi	r20, 0x47	; 71
    1da0:	5b e0       	ldi	r21, 0x0B	; 11
    1da2:	60 e0       	ldi	r22, 0x00	; 0
    1da4:	70 e0       	ldi	r23, 0x00	; 0
    1da6:	82 ee       	ldi	r24, 0xE2	; 226
    1da8:	9d e0       	ldi	r25, 0x0D	; 13
    1daa:	0c dd       	rcall	.-1512   	; 0x17c4 <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)(void *)"uC/OS-II Tmr", &err);
    1dac:	ae 01       	movw	r20, r28
    1dae:	4f 5f       	subi	r20, 0xFF	; 255
    1db0:	5f 4f       	sbci	r21, 0xFF	; 255
    1db2:	6e e7       	ldi	r22, 0x7E	; 126
    1db4:	71 e0       	ldi	r23, 0x01	; 1
    1db6:	8d e3       	ldi	r24, 0x3D	; 61
    1db8:	f9 db       	rcall	.-2062   	; 0x15ac <OSTaskNameSet>
    OSEventNameSet(OSTmrSem,       (INT8U *)(void *)"uC/OS-II TmrLock",   &err);
    OSEventNameSet(OSTmrSemSignal, (INT8U *)(void *)"uC/OS-II TmrSignal", &err);
#endif

    OSTmr_InitTask();
}
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	df 91       	pop	r29
    1dc2:	cf 91       	pop	r28
    1dc4:	1f 91       	pop	r17
    1dc6:	0f 91       	pop	r16
    1dc8:	ff 90       	pop	r15
    1dca:	ef 90       	pop	r14
    1dcc:	df 90       	pop	r13
    1dce:	cf 90       	pop	r12
    1dd0:	bf 90       	pop	r11
    1dd2:	af 90       	pop	r10
    1dd4:	9f 90       	pop	r9
    1dd6:	8f 90       	pop	r8
    1dd8:	08 95       	ret

00001dda <__udivmodsi4>:
    1dda:	a1 e2       	ldi	r26, 0x21	; 33
    1ddc:	1a 2e       	mov	r1, r26
    1dde:	aa 1b       	sub	r26, r26
    1de0:	bb 1b       	sub	r27, r27
    1de2:	fd 01       	movw	r30, r26
    1de4:	0d c0       	rjmp	.+26     	; 0x1e00 <__udivmodsi4_ep>

00001de6 <__udivmodsi4_loop>:
    1de6:	aa 1f       	adc	r26, r26
    1de8:	bb 1f       	adc	r27, r27
    1dea:	ee 1f       	adc	r30, r30
    1dec:	ff 1f       	adc	r31, r31
    1dee:	a2 17       	cp	r26, r18
    1df0:	b3 07       	cpc	r27, r19
    1df2:	e4 07       	cpc	r30, r20
    1df4:	f5 07       	cpc	r31, r21
    1df6:	20 f0       	brcs	.+8      	; 0x1e00 <__udivmodsi4_ep>
    1df8:	a2 1b       	sub	r26, r18
    1dfa:	b3 0b       	sbc	r27, r19
    1dfc:	e4 0b       	sbc	r30, r20
    1dfe:	f5 0b       	sbc	r31, r21

00001e00 <__udivmodsi4_ep>:
    1e00:	66 1f       	adc	r22, r22
    1e02:	77 1f       	adc	r23, r23
    1e04:	88 1f       	adc	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	1a 94       	dec	r1
    1e0a:	69 f7       	brne	.-38     	; 0x1de6 <__udivmodsi4_loop>
    1e0c:	60 95       	com	r22
    1e0e:	70 95       	com	r23
    1e10:	80 95       	com	r24
    1e12:	90 95       	com	r25
    1e14:	9b 01       	movw	r18, r22
    1e16:	ac 01       	movw	r20, r24
    1e18:	bd 01       	movw	r22, r26
    1e1a:	cf 01       	movw	r24, r30
    1e1c:	08 95       	ret

00001e1e <__umulhisi3>:
    1e1e:	a2 9f       	mul	r26, r18
    1e20:	b0 01       	movw	r22, r0
    1e22:	b3 9f       	mul	r27, r19
    1e24:	c0 01       	movw	r24, r0
    1e26:	a3 9f       	mul	r26, r19
    1e28:	70 0d       	add	r23, r0
    1e2a:	81 1d       	adc	r24, r1
    1e2c:	11 24       	eor	r1, r1
    1e2e:	91 1d       	adc	r25, r1
    1e30:	b2 9f       	mul	r27, r18
    1e32:	70 0d       	add	r23, r0
    1e34:	81 1d       	adc	r24, r1
    1e36:	11 24       	eor	r1, r1
    1e38:	91 1d       	adc	r25, r1
    1e3a:	08 95       	ret

00001e3c <__muluhisi3>:
    1e3c:	f0 df       	rcall	.-32     	; 0x1e1e <__umulhisi3>
    1e3e:	a5 9f       	mul	r26, r21
    1e40:	90 0d       	add	r25, r0
    1e42:	b4 9f       	mul	r27, r20
    1e44:	90 0d       	add	r25, r0
    1e46:	a4 9f       	mul	r26, r20
    1e48:	80 0d       	add	r24, r0
    1e4a:	91 1d       	adc	r25, r1
    1e4c:	11 24       	eor	r1, r1
    1e4e:	08 95       	ret

00001e50 <_exit>:
    1e50:	f8 94       	cli

00001e52 <__stop_program>:
    1e52:	ff cf       	rjmp	.-2      	; 0x1e52 <__stop_program>
