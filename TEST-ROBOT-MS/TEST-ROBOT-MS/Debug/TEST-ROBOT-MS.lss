
TEST-ROBOT-MS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000054c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000054c  000005e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080006e  0080006e  000005ee  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  000005f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000183  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000010c7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  000010f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000a53  00000000  00000000  00001156  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000023d  00000000  00000000  00001ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000002dd  00000000  00000000  00001de6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000f4  00000000  00000000  000020c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000018c  00000000  00000000  000021b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000028c  00000000  00000000  00002344  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000025d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <main>
  8a:	0c 94 a4 02 	jmp	0x548	; 0x548 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:

/****************************************/

void ADC_Init()  //4
{
	ADMUX=0X42;
  92:	82 e4       	ldi	r24, 0x42	; 66
  94:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);//prescalar div factor = 128
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	86 b9       	out	0x06, r24	; 6
  9a:	08 95       	ret

0000009c <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0b00000111;
	ADMUX&=0b11100000;
  9c:	97 b1       	in	r25, 0x07	; 7
  9e:	90 7e       	andi	r25, 0xE0	; 224
  a0:	97 b9       	out	0x07, r25	; 7
	ADMUX|=ch;
  a2:	97 b1       	in	r25, 0x07	; 7


uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0b00000111;
  a4:	87 70       	andi	r24, 0x07	; 7
	ADMUX&=0b11100000;
	ADMUX|=ch;
  a6:	98 2b       	or	r25, r24
  a8:	97 b9       	out	0x07, r25	; 7

	//Start Single conversion
	ADCSRA|=(1<<ADSC);
  aa:	36 9a       	sbi	0x06, 6	; 6

	//Wait for conversion to complete

	while(!(ADCSRA & (1<<ADIF)));
  ac:	34 9b       	sbis	0x06, 4	; 6
  ae:	fe cf       	rjmp	.-4      	; 0xac <ReadADC+0x10>
	
	ADCSRA|=(1<<ADIF);
  b0:	34 9a       	sbi	0x06, 4	; 6

	return(ADC);
  b2:	24 b1       	in	r18, 0x04	; 4
  b4:	35 b1       	in	r19, 0x05	; 5
}
  b6:	82 2f       	mov	r24, r18
  b8:	93 2f       	mov	r25, r19
  ba:	08 95       	ret

000000bc <lcdcommand>:
}


void lcdcommand(unsigned char cmnd)  //8
{
	lcd_dprt = (lcd_dprt&0x0f)|(cmnd&0xf0);
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	28 2f       	mov	r18, r24
  c0:	20 7f       	andi	r18, 0xF0	; 240
  c2:	9f 70       	andi	r25, 0x0F	; 15
  c4:	92 2b       	or	r25, r18
  c6:	98 bb       	out	0x18, r25	; 24
	lcd_dprt &=~(1<<lcd_rs);
  c8:	c0 98       	cbi	0x18, 0	; 24
	lcd_dprt &=~(1<<lcd_rw);
  ca:	c1 98       	cbi	0x18, 1	; 24
	lcd_dprt |=(1<<lcd_en);
  cc:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	00 00       	nop
	_delay_us(1);
	lcd_dprt &=~(1<<lcd_en);
  d0:	c2 98       	cbi	0x18, 2	; 24
  d2:	31 e2       	ldi	r19, 0x21	; 33
  d4:	3a 95       	dec	r19
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcdcommand+0x18>
  d8:	00 00       	nop
	_delay_us(100);
	lcd_dprt = (lcd_dprt&0x0f)|(cmnd<<4);
  da:	28 b3       	in	r18, 0x18	; 24
  dc:	30 e1       	ldi	r19, 0x10	; 16
  de:	83 9f       	mul	r24, r19
  e0:	c0 01       	movw	r24, r0
  e2:	11 24       	eor	r1, r1
  e4:	92 2f       	mov	r25, r18
  e6:	9f 70       	andi	r25, 0x0F	; 15
  e8:	89 2b       	or	r24, r25
  ea:	88 bb       	out	0x18, r24	; 24
	lcd_dprt|=(1<<lcd_en);
  ec:	c2 9a       	sbi	0x18, 2	; 24
  ee:	00 00       	nop
	_delay_us(1);
	lcd_dprt &=~(1<<lcd_en);
  f0:	c2 98       	cbi	0x18, 2	; 24
  f2:	81 e2       	ldi	r24, 0x21	; 33
  f4:	8a 95       	dec	r24
  f6:	f1 f7       	brne	.-4      	; 0xf4 <lcdcommand+0x38>
  f8:	00 00       	nop
  fa:	08 95       	ret

000000fc <lcddata>:
	_delay_us(100);
}
void lcddata(unsigned char data)  //9
{
	lcd_dprt=(lcd_dprt&0x0f)|(data &0xf0);
  fc:	98 b3       	in	r25, 0x18	; 24
  fe:	28 2f       	mov	r18, r24
 100:	20 7f       	andi	r18, 0xF0	; 240
 102:	9f 70       	andi	r25, 0x0F	; 15
 104:	92 2b       	or	r25, r18
 106:	98 bb       	out	0x18, r25	; 24
	lcd_dprt|=(1<<lcd_rs);
 108:	c0 9a       	sbi	0x18, 0	; 24
	lcd_dprt&=~(1<<lcd_rw);
 10a:	c1 98       	cbi	0x18, 1	; 24
	lcd_dprt|=(1<<lcd_en);
 10c:	c2 9a       	sbi	0x18, 2	; 24
 10e:	00 00       	nop
	_delay_us(1);
	lcd_dprt&=~(1<<lcd_en);
 110:	c2 98       	cbi	0x18, 2	; 24
	lcd_dprt=(lcd_dprt&0x0f)|(data<<4);
 112:	28 b3       	in	r18, 0x18	; 24
 114:	30 e1       	ldi	r19, 0x10	; 16
 116:	83 9f       	mul	r24, r19
 118:	c0 01       	movw	r24, r0
 11a:	11 24       	eor	r1, r1
 11c:	92 2f       	mov	r25, r18
 11e:	9f 70       	andi	r25, 0x0F	; 15
 120:	89 2b       	or	r24, r25
 122:	88 bb       	out	0x18, r24	; 24
	lcd_dprt|=(1<<lcd_en);
 124:	c2 9a       	sbi	0x18, 2	; 24
 126:	00 00       	nop
	_delay_us(1);
	lcd_dprt&=~(1<<lcd_en);
 128:	c2 98       	cbi	0x18, 2	; 24
 12a:	81 e2       	ldi	r24, 0x21	; 33
 12c:	8a 95       	dec	r24
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcddata+0x30>
 130:	00 00       	nop
 132:	08 95       	ret

00000134 <lcd_init>:
}


void lcd_init(void)  //10
{
	lcd_dddr=0xff;
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	87 bb       	out	0x17, r24	; 23
	lcd_dprt&=~(1<<lcd_en);
 138:	c2 98       	cbi	0x18, 2	; 24
 13a:	83 ef       	ldi	r24, 0xF3	; 243
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_init+0xa>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcd_init+0x10>
 144:	00 00       	nop
	_delay_us(2000);
	lcdcommand(0x33);
 146:	83 e3       	ldi	r24, 0x33	; 51
 148:	0e 94 5e 00 	call	0xbc	; 0xbc <lcdcommand>
 14c:	91 e2       	ldi	r25, 0x21	; 33
 14e:	9a 95       	dec	r25
 150:	f1 f7       	brne	.-4      	; 0x14e <lcd_init+0x1a>
 152:	00 00       	nop
	_delay_us(100);
	lcdcommand(0x32);
 154:	82 e3       	ldi	r24, 0x32	; 50
 156:	0e 94 5e 00 	call	0xbc	; 0xbc <lcdcommand>
 15a:	81 e2       	ldi	r24, 0x21	; 33
 15c:	8a 95       	dec	r24
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_init+0x28>
 160:	00 00       	nop
	_delay_us(100);
	lcdcommand(0x28);
 162:	88 e2       	ldi	r24, 0x28	; 40
 164:	0e 94 5e 00 	call	0xbc	; 0xbc <lcdcommand>
 168:	91 e2       	ldi	r25, 0x21	; 33
 16a:	9a 95       	dec	r25
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_init+0x36>
 16e:	00 00       	nop
	_delay_us(100);
	lcdcommand(0x01);
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 5e 00 	call	0xbc	; 0xbc <lcdcommand>
 176:	83 ef       	ldi	r24, 0xF3	; 243
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <lcd_init+0x46>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <lcd_init+0x4c>
 180:	00 00       	nop
	_delay_us(2000);
	lcdcommand(0x06);
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	0e 94 5e 00 	call	0xbc	; 0xbc <lcdcommand>
	lcdcommand(0x0c);
 188:	8c e0       	ldi	r24, 0x0C	; 12
 18a:	0e 94 5e 00 	call	0xbc	; 0xbc <lcdcommand>
 18e:	08 95       	ret

00000190 <lcd_gotoxy>:
}


void lcd_gotoxy (unsigned char x,unsigned char y)  //11
{
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	00 d0       	rcall	.+0      	; 0x196 <lcd_gotoxy+0x6>
 196:	00 d0       	rcall	.+0      	; 0x198 <lcd_gotoxy+0x8>
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstcharadr[]={0x80,0xc0,0x94,0xd4};
 19c:	90 e8       	ldi	r25, 0x80	; 128
 19e:	99 83       	std	Y+1, r25	; 0x01
 1a0:	90 ec       	ldi	r25, 0xC0	; 192
 1a2:	9a 83       	std	Y+2, r25	; 0x02
 1a4:	94 e9       	ldi	r25, 0x94	; 148
 1a6:	9b 83       	std	Y+3, r25	; 0x03
 1a8:	94 ed       	ldi	r25, 0xD4	; 212
 1aa:	9c 83       	std	Y+4, r25	; 0x04
	lcdcommand(firstcharadr[y-1]+x-1);
 1ac:	81 50       	subi	r24, 0x01	; 1
 1ae:	fe 01       	movw	r30, r28
 1b0:	e6 0f       	add	r30, r22
 1b2:	f1 1d       	adc	r31, r1
 1b4:	90 81       	ld	r25, Z
 1b6:	89 0f       	add	r24, r25
 1b8:	0e 94 5e 00 	call	0xbc	; 0xbc <lcdcommand>
 1bc:	81 e2       	ldi	r24, 0x21	; 33
 1be:	8a 95       	dec	r24
 1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_gotoxy+0x2e>
 1c2:	00 00       	nop
	_delay_us(100);
}
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <lcd_print>:


void lcd_print(char*str)  //12
{
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	ec 01       	movw	r28, r24
	unsigned char i=0;
	while(str[i]!=0)
 1da:	88 81       	ld	r24, Y
 1dc:	88 23       	and	r24, r24
 1de:	51 f0       	breq	.+20     	; 0x1f4 <lcd_print+0x22>
}


void lcd_print(char*str)  //12
{
	unsigned char i=0;
 1e0:	10 e0       	ldi	r17, 0x00	; 0
	while(str[i]!=0)
	{
		lcddata(str[i]);
 1e2:	0e 94 7e 00 	call	0xfc	; 0xfc <lcddata>
		i++;
 1e6:	1f 5f       	subi	r17, 0xFF	; 255


void lcd_print(char*str)  //12
{
	unsigned char i=0;
	while(str[i]!=0)
 1e8:	fe 01       	movw	r30, r28
 1ea:	e1 0f       	add	r30, r17
 1ec:	f1 1d       	adc	r31, r1
 1ee:	80 81       	ld	r24, Z
 1f0:	81 11       	cpse	r24, r1
 1f2:	f7 cf       	rjmp	.-18     	; 0x1e2 <lcd_print+0x10>
	{
		lcddata(str[i]);
		i++;
	}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	1f 91       	pop	r17
 1fa:	08 95       	ret

000001fc <ConvertionToString>:
	return(ADC);
}


void ConvertionToString(void)  //7
{
 1fc:	cf 92       	push	r12
 1fe:	df 92       	push	r13
 200:	ef 92       	push	r14
 202:	ff 92       	push	r15
 204:	0f 93       	push	r16
 206:	1f 93       	push	r17
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
 210:	a0 97       	sbiw	r28, 0x20	; 32
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	f8 94       	cli
 216:	de bf       	out	0x3e, r29	; 62
 218:	0f be       	out	0x3f, r0	; 63
 21a:	cd bf       	out	0x3d, r28	; 61
	uint16_t X=0;
	adc_result[0]=ReadADC(0);        // Read Analog value from channel-0
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 4e 00 	call	0x9c	; 0x9c <ReadADC>
 222:	0e e6       	ldi	r16, 0x6E	; 110
 224:	10 e0       	ldi	r17, 0x00	; 0
 226:	f8 01       	movw	r30, r16
 228:	91 83       	std	Z+1, r25	; 0x01
 22a:	80 83       	st	Z, r24
	adc_result[1]=ReadADC(1);        // Read Analog value from channel-1
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	0e 94 4e 00 	call	0x9c	; 0x9c <ReadADC>
 232:	0f 2e       	mov	r0, r31
 234:	f0 e7       	ldi	r31, 0x70	; 112
 236:	cf 2e       	mov	r12, r31
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	df 2e       	mov	r13, r31
 23c:	f0 2d       	mov	r31, r0
 23e:	f6 01       	movw	r30, r12
 240:	91 83       	std	Z+1, r25	; 0x01
 242:	80 83       	st	Z, r24
	adc_result[2]=ReadADC(2);        // Read Analog value from channel-2
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	0e 94 4e 00 	call	0x9c	; 0x9c <ReadADC>
 24a:	0f 2e       	mov	r0, r31
 24c:	f2 e7       	ldi	r31, 0x72	; 114
 24e:	ef 2e       	mov	r14, r31
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	ff 2e       	mov	r15, r31
 254:	f0 2d       	mov	r31, r0
 256:	f7 01       	movw	r30, r14
 258:	91 83       	std	Z+1, r25	; 0x01
 25a:	80 83       	st	Z, r24
	adc_result[3]=ReadADC(3);
 25c:	83 e0       	ldi	r24, 0x03	; 3
 25e:	0e 94 4e 00 	call	0x9c	; 0x9c <ReadADC>
 262:	90 93 75 00 	sts	0x0075, r25
 266:	80 93 74 00 	sts	0x0074, r24
	
	uint16_t IRL[4];
	X=adc_result[0];
	X=X*5/255;
 26a:	f8 01       	movw	r30, r16
 26c:	80 81       	ld	r24, Z
 26e:	91 81       	ldd	r25, Z+1	; 0x01
 270:	9c 01       	movw	r18, r24
 272:	22 0f       	add	r18, r18
 274:	33 1f       	adc	r19, r19
 276:	22 0f       	add	r18, r18
 278:	33 1f       	adc	r19, r19
 27a:	82 0f       	add	r24, r18
 27c:	93 1f       	adc	r25, r19
 27e:	28 2f       	mov	r18, r24
 280:	39 2f       	mov	r19, r25
 282:	a1 e8       	ldi	r26, 0x81	; 129
 284:	b0 e8       	ldi	r27, 0x80	; 128
 286:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__umulhisi3>
	itoa(X,IRL,10);
 28a:	4a e0       	ldi	r20, 0x0A	; 10
 28c:	50 e0       	ldi	r21, 0x00	; 0
 28e:	be 01       	movw	r22, r28
 290:	6f 5f       	subi	r22, 0xFF	; 255
 292:	7f 4f       	sbci	r23, 0xFF	; 255
 294:	88 0f       	add	r24, r24
 296:	89 2f       	mov	r24, r25
 298:	88 1f       	adc	r24, r24
 29a:	99 0b       	sbc	r25, r25
 29c:	91 95       	neg	r25
 29e:	0e 94 5f 02 	call	0x4be	; 0x4be <itoa>
	lcd_gotoxy(3,1);
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	83 e0       	ldi	r24, 0x03	; 3
 2a6:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_gotoxy>
	lcd_print(IRL);
 2aa:	ce 01       	movw	r24, r28
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_print>
	lcd_print(" ");
 2b2:	80 e6       	ldi	r24, 0x60	; 96
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_print>
	
	uint16_t IRC[4];
	X=adc_result[1];
	X=X*5/255;
 2ba:	f6 01       	movw	r30, r12
 2bc:	80 81       	ld	r24, Z
 2be:	91 81       	ldd	r25, Z+1	; 0x01
 2c0:	9c 01       	movw	r18, r24
 2c2:	22 0f       	add	r18, r18
 2c4:	33 1f       	adc	r19, r19
 2c6:	22 0f       	add	r18, r18
 2c8:	33 1f       	adc	r19, r19
 2ca:	82 0f       	add	r24, r18
 2cc:	93 1f       	adc	r25, r19
 2ce:	28 2f       	mov	r18, r24
 2d0:	39 2f       	mov	r19, r25
 2d2:	a1 e8       	ldi	r26, 0x81	; 129
 2d4:	b0 e8       	ldi	r27, 0x80	; 128
 2d6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__umulhisi3>
	itoa(X,IRC,10);
 2da:	4a e0       	ldi	r20, 0x0A	; 10
 2dc:	50 e0       	ldi	r21, 0x00	; 0
 2de:	be 01       	movw	r22, r28
 2e0:	67 5f       	subi	r22, 0xF7	; 247
 2e2:	7f 4f       	sbci	r23, 0xFF	; 255
 2e4:	88 0f       	add	r24, r24
 2e6:	89 2f       	mov	r24, r25
 2e8:	88 1f       	adc	r24, r24
 2ea:	99 0b       	sbc	r25, r25
 2ec:	91 95       	neg	r25
 2ee:	0e 94 5f 02 	call	0x4be	; 0x4be <itoa>
	lcd_gotoxy(11,1);
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	8b e0       	ldi	r24, 0x0B	; 11
 2f6:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_gotoxy>
	lcd_print(IRC);
 2fa:	ce 01       	movw	r24, r28
 2fc:	09 96       	adiw	r24, 0x09	; 9
 2fe:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_print>
	lcd_print(" ");
 302:	80 e6       	ldi	r24, 0x60	; 96
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_print>
	
	uint16_t IRR[4];
	X=adc_result[2];
	X=X*5/255;
 30a:	f7 01       	movw	r30, r14
 30c:	80 81       	ld	r24, Z
 30e:	91 81       	ldd	r25, Z+1	; 0x01
 310:	9c 01       	movw	r18, r24
 312:	22 0f       	add	r18, r18
 314:	33 1f       	adc	r19, r19
 316:	22 0f       	add	r18, r18
 318:	33 1f       	adc	r19, r19
 31a:	82 0f       	add	r24, r18
 31c:	93 1f       	adc	r25, r19
 31e:	28 2f       	mov	r18, r24
 320:	39 2f       	mov	r19, r25
 322:	a1 e8       	ldi	r26, 0x81	; 129
 324:	b0 e8       	ldi	r27, 0x80	; 128
 326:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__umulhisi3>
	itoa(X,IRR,10);
 32a:	4a e0       	ldi	r20, 0x0A	; 10
 32c:	50 e0       	ldi	r21, 0x00	; 0
 32e:	be 01       	movw	r22, r28
 330:	6f 5e       	subi	r22, 0xEF	; 239
 332:	7f 4f       	sbci	r23, 0xFF	; 255
 334:	88 0f       	add	r24, r24
 336:	89 2f       	mov	r24, r25
 338:	88 1f       	adc	r24, r24
 33a:	99 0b       	sbc	r25, r25
 33c:	91 95       	neg	r25
 33e:	0e 94 5f 02 	call	0x4be	; 0x4be <itoa>
	lcd_gotoxy(3,2);
 342:	62 e0       	ldi	r22, 0x02	; 2
 344:	83 e0       	ldi	r24, 0x03	; 3
 346:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_gotoxy>
	lcd_print(IRR);
 34a:	ce 01       	movw	r24, r28
 34c:	41 96       	adiw	r24, 0x11	; 17
 34e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_print>
	lcd_print(" ");
 352:	80 e6       	ldi	r24, 0x60	; 96
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_print>
	
	uint16_t LDR[4];
	X=adc_result[0];
	X=X*5/255;
 35a:	f8 01       	movw	r30, r16
 35c:	80 81       	ld	r24, Z
 35e:	91 81       	ldd	r25, Z+1	; 0x01
 360:	9c 01       	movw	r18, r24
 362:	22 0f       	add	r18, r18
 364:	33 1f       	adc	r19, r19
 366:	22 0f       	add	r18, r18
 368:	33 1f       	adc	r19, r19
 36a:	82 0f       	add	r24, r18
 36c:	93 1f       	adc	r25, r19
 36e:	28 2f       	mov	r18, r24
 370:	39 2f       	mov	r19, r25
 372:	a1 e8       	ldi	r26, 0x81	; 129
 374:	b0 e8       	ldi	r27, 0x80	; 128
 376:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__umulhisi3>
	itoa(X,LDR,10);
 37a:	4a e0       	ldi	r20, 0x0A	; 10
 37c:	50 e0       	ldi	r21, 0x00	; 0
 37e:	be 01       	movw	r22, r28
 380:	67 5e       	subi	r22, 0xE7	; 231
 382:	7f 4f       	sbci	r23, 0xFF	; 255
 384:	88 0f       	add	r24, r24
 386:	89 2f       	mov	r24, r25
 388:	88 1f       	adc	r24, r24
 38a:	99 0b       	sbc	r25, r25
 38c:	91 95       	neg	r25
 38e:	0e 94 5f 02 	call	0x4be	; 0x4be <itoa>
	lcd_gotoxy(11,2);
 392:	62 e0       	ldi	r22, 0x02	; 2
 394:	8b e0       	ldi	r24, 0x0B	; 11
 396:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_gotoxy>
	lcd_print(LDR);
 39a:	ce 01       	movw	r24, r28
 39c:	49 96       	adiw	r24, 0x19	; 25
 39e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_print>
	lcd_print(" ");
 3a2:	80 e6       	ldi	r24, 0x60	; 96
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_print>
	
}
 3aa:	a0 96       	adiw	r28, 0x20	; 32
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	f8 94       	cli
 3b0:	de bf       	out	0x3e, r29	; 62
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	cd bf       	out	0x3d, r28	; 61
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	1f 91       	pop	r17
 3bc:	0f 91       	pop	r16
 3be:	ff 90       	pop	r15
 3c0:	ef 90       	pop	r14
 3c2:	df 90       	pop	r13
 3c4:	cf 90       	pop	r12
 3c6:	08 95       	ret

000003c8 <main>:

uint16_t adc_result[4]; //Array

int main(void)
{
	DDRA=0XF0;
 3c8:	80 ef       	ldi	r24, 0xF0	; 240
 3ca:	8a bb       	out	0x1a, r24	; 26
	
	DDRD=0XFF;
 3cc:	8f ef       	ldi	r24, 0xFF	; 255
 3ce:	81 bb       	out	0x11, r24	; 17
	
	
	ADC_Init();
 3d0:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
	
	lcd_init();
 3d4:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d8:	83 ef       	ldi	r24, 0xF3	; 243
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <main+0x14>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <main+0x1a>
 3e2:	00 00       	nop
	_delay_ms(2);
	lcd_gotoxy(1,1);
 3e4:	61 e0       	ldi	r22, 0x01	; 1
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_gotoxy>
	lcd_print("L:");
 3ec:	82 e6       	ldi	r24, 0x62	; 98
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_print>
	lcd_gotoxy(9,1);
 3f4:	61 e0       	ldi	r22, 0x01	; 1
 3f6:	89 e0       	ldi	r24, 0x09	; 9
 3f8:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_gotoxy>
	lcd_print("C:");
 3fc:	85 e6       	ldi	r24, 0x65	; 101
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_print>
	lcd_gotoxy(1,2);
 404:	62 e0       	ldi	r22, 0x02	; 2
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_gotoxy>
	lcd_print("R:");
 40c:	88 e6       	ldi	r24, 0x68	; 104
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_print>
	lcd_gotoxy(9,2);
 414:	62 e0       	ldi	r22, 0x02	; 2
 416:	89 e0       	ldi	r24, 0x09	; 9
 418:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_gotoxy>
	lcd_print("D:");
 41c:	8b e6       	ldi	r24, 0x6B	; 107
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_print>
	{
		
		ConvertionToString();
		
		
		if(adc_result[center]>=(55))
 424:	00 e7       	ldi	r16, 0x70	; 112
 426:	10 e0       	ldi	r17, 0x00	; 0
		{
		
			
			while((adc_result[left] >=(750)) || (adc_result[center]>=(55)))
 428:	ce e6       	ldi	r28, 0x6E	; 110
 42a:	d0 e0       	ldi	r29, 0x00	; 0
			
			
		}
		
		
		else if(adc_result[right] >= (850))
 42c:	0f 2e       	mov	r0, r31
 42e:	f2 e7       	ldi	r31, 0x72	; 114
 430:	ef 2e       	mov	r14, r31
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	ff 2e       	mov	r15, r31
 436:	f0 2d       	mov	r31, r0
	
	
	while(1)
	{
		
		ConvertionToString();
 438:	0e 94 fe 00 	call	0x1fc	; 0x1fc <ConvertionToString>
		
		
		if(adc_result[center]>=(55))
 43c:	f8 01       	movw	r30, r16
 43e:	80 81       	ld	r24, Z
 440:	91 81       	ldd	r25, Z+1	; 0x01
 442:	c7 97       	sbiw	r24, 0x37	; 55
 444:	18 f4       	brcc	.+6      	; 0x44c <main+0x84>
 446:	0d c0       	rjmp	.+26     	; 0x462 <main+0x9a>
		
			
			while((adc_result[left] >=(750)) || (adc_result[center]>=(55)))
			{
				
				ConvertionToString();
 448:	0e 94 fe 00 	call	0x1fc	; 0x1fc <ConvertionToString>
		
		if(adc_result[center]>=(55))
		{
		
			
			while((adc_result[left] >=(750)) || (adc_result[center]>=(55)))
 44c:	88 81       	ld	r24, Y
 44e:	99 81       	ldd	r25, Y+1	; 0x01
 450:	8e 3e       	cpi	r24, 0xEE	; 238
 452:	92 40       	sbci	r25, 0x02	; 2
 454:	c8 f7       	brcc	.-14     	; 0x448 <main+0x80>
 456:	f8 01       	movw	r30, r16
 458:	80 81       	ld	r24, Z
 45a:	91 81       	ldd	r25, Z+1	; 0x01
 45c:	c7 97       	sbiw	r24, 0x37	; 55
 45e:	a0 f7       	brcc	.-24     	; 0x448 <main+0x80>
 460:	1b c0       	rjmp	.+54     	; 0x498 <main+0xd0>
			
			
		}
		
		
		else if(adc_result[right] >= (850))
 462:	f7 01       	movw	r30, r14
 464:	80 81       	ld	r24, Z
 466:	91 81       	ldd	r25, Z+1	; 0x01
 468:	82 35       	cpi	r24, 0x52	; 82
 46a:	93 40       	sbci	r25, 0x03	; 3
 46c:	48 f0       	brcs	.+18     	; 0x480 <main+0xb8>

		
			while(adc_result[right]>=(850))
			{
				
				ConvertionToString();
 46e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <ConvertionToString>
		
		else if(adc_result[right] >= (850))
		{

		
			while(adc_result[right]>=(850))
 472:	f7 01       	movw	r30, r14
 474:	80 81       	ld	r24, Z
 476:	91 81       	ldd	r25, Z+1	; 0x01
 478:	82 35       	cpi	r24, 0x52	; 82
 47a:	93 40       	sbci	r25, 0x03	; 3
 47c:	c0 f7       	brcc	.-16     	; 0x46e <main+0xa6>
 47e:	0c c0       	rjmp	.+24     	; 0x498 <main+0xd0>
			
		}



		else if(adc_result[left] >= (750))
 480:	88 81       	ld	r24, Y
 482:	99 81       	ldd	r25, Y+1	; 0x01
 484:	8e 3e       	cpi	r24, 0xEE	; 238
 486:	92 40       	sbci	r25, 0x02	; 2
 488:	38 f0       	brcs	.+14     	; 0x498 <main+0xd0>
			while(adc_result[left]>=(750))
			{
				
				//Read Sensor Values

				ConvertionToString();
 48a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <ConvertionToString>
		else if(adc_result[left] >= (750))
		{
			

		
			while(adc_result[left]>=(750))
 48e:	88 81       	ld	r24, Y
 490:	99 81       	ldd	r25, Y+1	; 0x01
 492:	8e 3e       	cpi	r24, 0xEE	; 238
 494:	92 40       	sbci	r25, 0x02	; 2
 496:	c8 f7       	brcc	.-14     	; 0x48a <main+0xc2>
 498:	83 ef       	ldi	r24, 0xF3	; 243
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <main+0xd4>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <main+0xda>
 4a2:	00 00       	nop
 4a4:	c9 cf       	rjmp	.-110    	; 0x438 <main+0x70>

000004a6 <__umulhisi3>:
 4a6:	a2 9f       	mul	r26, r18
 4a8:	b0 01       	movw	r22, r0
 4aa:	b3 9f       	mul	r27, r19
 4ac:	c0 01       	movw	r24, r0
 4ae:	a3 9f       	mul	r26, r19
 4b0:	01 d0       	rcall	.+2      	; 0x4b4 <__umulhisi3+0xe>
 4b2:	b2 9f       	mul	r27, r18
 4b4:	70 0d       	add	r23, r0
 4b6:	81 1d       	adc	r24, r1
 4b8:	11 24       	eor	r1, r1
 4ba:	91 1d       	adc	r25, r1
 4bc:	08 95       	ret

000004be <itoa>:
 4be:	fb 01       	movw	r30, r22
 4c0:	9f 01       	movw	r18, r30
 4c2:	e8 94       	clt
 4c4:	42 30       	cpi	r20, 0x02	; 2
 4c6:	c4 f0       	brlt	.+48     	; 0x4f8 <itoa+0x3a>
 4c8:	45 32       	cpi	r20, 0x25	; 37
 4ca:	b4 f4       	brge	.+44     	; 0x4f8 <itoa+0x3a>
 4cc:	4a 30       	cpi	r20, 0x0A	; 10
 4ce:	29 f4       	brne	.+10     	; 0x4da <itoa+0x1c>
 4d0:	97 fb       	bst	r25, 7
 4d2:	1e f4       	brtc	.+6      	; 0x4da <itoa+0x1c>
 4d4:	90 95       	com	r25
 4d6:	81 95       	neg	r24
 4d8:	9f 4f       	sbci	r25, 0xFF	; 255
 4da:	64 2f       	mov	r22, r20
 4dc:	77 27       	eor	r23, r23
 4de:	0e 94 90 02 	call	0x520	; 0x520 <__udivmodhi4>
 4e2:	80 5d       	subi	r24, 0xD0	; 208
 4e4:	8a 33       	cpi	r24, 0x3A	; 58
 4e6:	0c f0       	brlt	.+2      	; 0x4ea <itoa+0x2c>
 4e8:	89 5d       	subi	r24, 0xD9	; 217
 4ea:	81 93       	st	Z+, r24
 4ec:	cb 01       	movw	r24, r22
 4ee:	00 97       	sbiw	r24, 0x00	; 0
 4f0:	a1 f7       	brne	.-24     	; 0x4da <itoa+0x1c>
 4f2:	16 f4       	brtc	.+4      	; 0x4f8 <itoa+0x3a>
 4f4:	5d e2       	ldi	r21, 0x2D	; 45
 4f6:	51 93       	st	Z+, r21
 4f8:	10 82       	st	Z, r1
 4fa:	c9 01       	movw	r24, r18
 4fc:	0c 94 80 02 	jmp	0x500	; 0x500 <strrev>

00000500 <strrev>:
 500:	dc 01       	movw	r26, r24
 502:	fc 01       	movw	r30, r24
 504:	67 2f       	mov	r22, r23
 506:	71 91       	ld	r23, Z+
 508:	77 23       	and	r23, r23
 50a:	e1 f7       	brne	.-8      	; 0x504 <strrev+0x4>
 50c:	32 97       	sbiw	r30, 0x02	; 2
 50e:	04 c0       	rjmp	.+8      	; 0x518 <strrev+0x18>
 510:	7c 91       	ld	r23, X
 512:	6d 93       	st	X+, r22
 514:	70 83       	st	Z, r23
 516:	62 91       	ld	r22, -Z
 518:	ae 17       	cp	r26, r30
 51a:	bf 07       	cpc	r27, r31
 51c:	c8 f3       	brcs	.-14     	; 0x510 <strrev+0x10>
 51e:	08 95       	ret

00000520 <__udivmodhi4>:
 520:	aa 1b       	sub	r26, r26
 522:	bb 1b       	sub	r27, r27
 524:	51 e1       	ldi	r21, 0x11	; 17
 526:	07 c0       	rjmp	.+14     	; 0x536 <__udivmodhi4_ep>

00000528 <__udivmodhi4_loop>:
 528:	aa 1f       	adc	r26, r26
 52a:	bb 1f       	adc	r27, r27
 52c:	a6 17       	cp	r26, r22
 52e:	b7 07       	cpc	r27, r23
 530:	10 f0       	brcs	.+4      	; 0x536 <__udivmodhi4_ep>
 532:	a6 1b       	sub	r26, r22
 534:	b7 0b       	sbc	r27, r23

00000536 <__udivmodhi4_ep>:
 536:	88 1f       	adc	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	5a 95       	dec	r21
 53c:	a9 f7       	brne	.-22     	; 0x528 <__udivmodhi4_loop>
 53e:	80 95       	com	r24
 540:	90 95       	com	r25
 542:	bc 01       	movw	r22, r24
 544:	cd 01       	movw	r24, r26
 546:	08 95       	ret

00000548 <_exit>:
 548:	f8 94       	cli

0000054a <__stop_program>:
 54a:	ff cf       	rjmp	.-2      	; 0x54a <__stop_program>
