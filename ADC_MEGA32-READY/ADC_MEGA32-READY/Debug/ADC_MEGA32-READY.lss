
ADC_MEGA32-READY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001a0  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000977  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000009a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000621  00000000  00000000  000009ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001cb  00000000  00000000  0000100f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000299  00000000  00000000  000011da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001474  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000144  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000189  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000017d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 bd 00 	call	0x17a	; 0x17a <main>
  64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <lcdcommand>:
#define lcd_rw 1
#define lcd_en 2

void lcdcommand(unsigned char cmd)
{
	lcd_dprt = (lcd_dprt&0x0f)|(cmd&0xf0);
  6c:	95 b3       	in	r25, 0x15	; 21
  6e:	28 2f       	mov	r18, r24
  70:	20 7f       	andi	r18, 0xF0	; 240
  72:	9f 70       	andi	r25, 0x0F	; 15
  74:	92 2b       	or	r25, r18
  76:	95 bb       	out	0x15, r25	; 21
	lcd_dprt &=~(1<<lcd_rs);
  78:	a8 98       	cbi	0x15, 0	; 21
	lcd_dprt &=~(1<<lcd_rw);
  7a:	a9 98       	cbi	0x15, 1	; 21
	lcd_dprt |=(1<<lcd_en);
  7c:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	00 00       	nop
	_delay_us(1);
	lcd_dprt &=~(1<<lcd_en);
  80:	aa 98       	cbi	0x15, 2	; 21
  82:	31 e2       	ldi	r19, 0x21	; 33
  84:	3a 95       	dec	r19
  86:	f1 f7       	brne	.-4      	; 0x84 <lcdcommand+0x18>
  88:	00 00       	nop
	_delay_us(100);
	lcd_dprt = (lcd_dprt&0x0f)|(cmd<<4);
  8a:	25 b3       	in	r18, 0x15	; 21
  8c:	30 e1       	ldi	r19, 0x10	; 16
  8e:	83 9f       	mul	r24, r19
  90:	c0 01       	movw	r24, r0
  92:	11 24       	eor	r1, r1
  94:	92 2f       	mov	r25, r18
  96:	9f 70       	andi	r25, 0x0F	; 15
  98:	89 2b       	or	r24, r25
  9a:	85 bb       	out	0x15, r24	; 21
	lcd_dprt|=(1<<lcd_en);
  9c:	aa 9a       	sbi	0x15, 2	; 21
  9e:	00 00       	nop
	_delay_us(1);
	lcd_dprt &=~(1<<lcd_en);
  a0:	aa 98       	cbi	0x15, 2	; 21
  a2:	81 e2       	ldi	r24, 0x21	; 33
  a4:	8a 95       	dec	r24
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcdcommand+0x38>
  a8:	00 00       	nop
  aa:	08 95       	ret

000000ac <lcddata>:
	_delay_us(100);
}
void lcddata(unsigned char data)
{
	lcd_dprt=(lcd_dprt&0x0f)|(data &0xf0);
  ac:	95 b3       	in	r25, 0x15	; 21
  ae:	28 2f       	mov	r18, r24
  b0:	20 7f       	andi	r18, 0xF0	; 240
  b2:	9f 70       	andi	r25, 0x0F	; 15
  b4:	92 2b       	or	r25, r18
  b6:	95 bb       	out	0x15, r25	; 21
	lcd_dprt|=(1<<lcd_rs);
  b8:	a8 9a       	sbi	0x15, 0	; 21
	lcd_dprt&=~(1<<lcd_rw);
  ba:	a9 98       	cbi	0x15, 1	; 21
	lcd_dprt|=(1<<lcd_en);
  bc:	aa 9a       	sbi	0x15, 2	; 21
  be:	00 00       	nop
	_delay_us(1);
	lcd_dprt&=~(1<<lcd_en);
  c0:	aa 98       	cbi	0x15, 2	; 21
	lcd_dprt=(lcd_dprt&0x0f)|(data<<4);
  c2:	25 b3       	in	r18, 0x15	; 21
  c4:	30 e1       	ldi	r19, 0x10	; 16
  c6:	83 9f       	mul	r24, r19
  c8:	c0 01       	movw	r24, r0
  ca:	11 24       	eor	r1, r1
  cc:	92 2f       	mov	r25, r18
  ce:	9f 70       	andi	r25, 0x0F	; 15
  d0:	89 2b       	or	r24, r25
  d2:	85 bb       	out	0x15, r24	; 21
	lcd_dprt|=(1<<lcd_en);
  d4:	aa 9a       	sbi	0x15, 2	; 21
  d6:	00 00       	nop
	_delay_us(1);
	lcd_dprt&=~(1<<lcd_en);
  d8:	aa 98       	cbi	0x15, 2	; 21
  da:	81 e2       	ldi	r24, 0x21	; 33
  dc:	8a 95       	dec	r24
  de:	f1 f7       	brne	.-4      	; 0xdc <lcddata+0x30>
  e0:	00 00       	nop
  e2:	08 95       	ret

000000e4 <lcd_init>:
	
	
}
void lcd_init()
{
	lcd_dddr=0xff;
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	84 bb       	out	0x14, r24	; 20
	lcd_dprt&=~(1<<lcd_en);
  e8:	aa 98       	cbi	0x15, 2	; 21
  ea:	83 ef       	ldi	r24, 0xF3	; 243
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <lcd_init+0xa>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <lcd_init+0x10>
  f4:	00 00       	nop
	_delay_us(2000);
	lcdcommand(0x33);
  f6:	83 e3       	ldi	r24, 0x33	; 51
  f8:	0e 94 36 00 	call	0x6c	; 0x6c <lcdcommand>
  fc:	91 e2       	ldi	r25, 0x21	; 33
  fe:	9a 95       	dec	r25
 100:	f1 f7       	brne	.-4      	; 0xfe <lcd_init+0x1a>
 102:	00 00       	nop
	_delay_us(100);
	lcdcommand(0x32);
 104:	82 e3       	ldi	r24, 0x32	; 50
 106:	0e 94 36 00 	call	0x6c	; 0x6c <lcdcommand>
 10a:	81 e2       	ldi	r24, 0x21	; 33
 10c:	8a 95       	dec	r24
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcd_init+0x28>
 110:	00 00       	nop
	_delay_us(100);
	lcdcommand(0x28);
 112:	88 e2       	ldi	r24, 0x28	; 40
 114:	0e 94 36 00 	call	0x6c	; 0x6c <lcdcommand>
 118:	91 e2       	ldi	r25, 0x21	; 33
 11a:	9a 95       	dec	r25
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_init+0x36>
 11e:	00 00       	nop
	_delay_us(100);
	lcdcommand(0x0f);
 120:	8f e0       	ldi	r24, 0x0F	; 15
 122:	0e 94 36 00 	call	0x6c	; 0x6c <lcdcommand>
 126:	81 e2       	ldi	r24, 0x21	; 33
 128:	8a 95       	dec	r24
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_init+0x44>
 12c:	00 00       	nop
	_delay_us(100);
	lcdcommand(0x01);
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 36 00 	call	0x6c	; 0x6c <lcdcommand>
 134:	83 ef       	ldi	r24, 0xF3	; 243
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_init+0x54>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_init+0x5a>
 13e:	00 00       	nop
	_delay_us(2000);
	lcdcommand(0x06);
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	0e 94 36 00 	call	0x6c	; 0x6c <lcdcommand>
 146:	91 e2       	ldi	r25, 0x21	; 33
 148:	9a 95       	dec	r25
 14a:	f1 f7       	brne	.-4      	; 0x148 <lcd_init+0x64>
 14c:	00 00       	nop
 14e:	08 95       	ret

00000150 <lcd_print>:
unsigned char firstcharadr[]={0x80,0xc0,0x94,0xd4};
lcdcommand(firstcharadr[y-1]+x-1);
_delay_us(100);
}
void lcd_print(char*str)
{
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ec 01       	movw	r28, r24
	unsigned char i=0;
	while(str[i]!=0)
 158:	88 81       	ld	r24, Y
 15a:	88 23       	and	r24, r24
 15c:	51 f0       	breq	.+20     	; 0x172 <lcd_print+0x22>
lcdcommand(firstcharadr[y-1]+x-1);
_delay_us(100);
}
void lcd_print(char*str)
{
	unsigned char i=0;
 15e:	10 e0       	ldi	r17, 0x00	; 0
	while(str[i]!=0)
	{
		lcddata(str[i]);
 160:	0e 94 56 00 	call	0xac	; 0xac <lcddata>
		i++;
 164:	1f 5f       	subi	r17, 0xFF	; 255
_delay_us(100);
}
void lcd_print(char*str)
{
	unsigned char i=0;
	while(str[i]!=0)
 166:	fe 01       	movw	r30, r28
 168:	e1 0f       	add	r30, r17
 16a:	f1 1d       	adc	r31, r1
 16c:	80 81       	ld	r24, Z
 16e:	81 11       	cpse	r24, r1
 170:	f7 cf       	rjmp	.-18     	; 0x160 <lcd_print+0x10>
	{
		lcddata(str[i]);
		i++;
	}
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	1f 91       	pop	r17
 178:	08 95       	ret

0000017a <main>:
		
}

*/
int main(void)
{lcd_init();unsigned char data=0;
 17a:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_init>
	DDRC=0xff;/*//
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	84 bb       	out	0x14, r24	; 20
	
	//ADC_select(8);*/
	
	DDRA=0;
 182:	1a ba       	out	0x1a, r1	; 26
	ADCSRA=0x87;
 184:	87 e8       	ldi	r24, 0x87	; 135
 186:	86 b9       	out	0x06, r24	; 6
	ADMUX=0xe0;
 188:	80 ee       	ldi	r24, 0xE0	; 224
 18a:	87 b9       	out	0x07, r24	; 7
    while(1)
    {
		ADCSRA|=(1<<ADSC);
 18c:	36 9a       	sbi	0x06, 6	; 6
		while((ADCSRA&(1<<ADIF))==0);
 18e:	34 9b       	sbis	0x06, 4	; 6
 190:	fe cf       	rjmp	.-4      	; 0x18e <main+0x14>
		
		data=ADCH;
 192:	85 b1       	in	r24, 0x05	; 5
		lcd_print(data);
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_print>
      lcd_print("ya rab");*/
		
		
		
		
    }
 19a:	f8 cf       	rjmp	.-16     	; 0x18c <main+0x12>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
