
timer_management_unit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000236  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  000002aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b5b  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000771  00000000  00000000  00000eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c5  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  00001b24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b9  00000000  00000000  00001c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e4  00000000  00000000  000020e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000024c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  74:	0c 94 19 01 	jmp	0x232	; 0x232 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <pin_toggle1>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	d8 9a       	sbi	0x1b, 0	; 27
  7e:	83 ec       	ldi	r24, 0xC3	; 195
  80:	99 e0       	ldi	r25, 0x09	; 9
  82:	01 97       	sbiw	r24, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <pin_toggle1+0x6>
  86:	00 c0       	rjmp	.+0      	; 0x88 <pin_toggle1+0xc>
  88:	00 00       	nop
  8a:	d8 9a       	sbi	0x1b, 0	; 27
  8c:	83 ec       	ldi	r24, 0xC3	; 195
  8e:	99 e0       	ldi	r25, 0x09	; 9
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <pin_toggle1+0x14>
  94:	00 c0       	rjmp	.+0      	; 0x96 <pin_toggle1+0x1a>
  96:	00 00       	nop
  98:	08 95       	ret

0000009a <main>:
	_delay_ms(10);
}


int main(void)
{
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	28 97       	sbiw	r28, 0x08	; 8
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	f8 94       	cli
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	cd bf       	out	0x3d, r28	; 61
	DDRA=0xff;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	8a bb       	out	0x1a, r24	; 26
	sei();
  b2:	78 94       	sei
	timer_object obj1;
	timer_object obj2;
	tmu_init(3);
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 92 00 	call	0x124	; 0x124 <tmu_init>
	tmu_start_timer(&obj1,pin_toggle1,2,periodic_en);
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	42 e0       	ldi	r20, 0x02	; 2
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	6e e3       	ldi	r22, 0x3E	; 62
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	ce 01       	movw	r24, r28
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	0e 94 9f 00 	call	0x13e	; 0x13e <tmu_start_timer>
    while (1) 
    {
		tmu_dispatch();
  ce:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <tmu_dispatch>
  d2:	fd cf       	rjmp	.-6      	; 0xce <main+0x34>

000000d4 <__vector_10>:
/*
// static ecore_u8 main_counter=0;
*/

ISR(TIMER0_COMP_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	ef 93       	push	r30
  e4:	ff 93       	push	r31
	for (int i=0;i<MAX_NO;i++)
	{
		if (arr_obj_timers[i] != NULL)
  e6:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <arr_obj_timers>
  ea:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <arr_obj_timers+0x1>
  ee:	30 97       	sbiw	r30, 0x00	; 0
  f0:	29 f0       	breq	.+10     	; 0xfc <__vector_10+0x28>
		{
			(arr_obj_timers[i]->rem_time)--;
  f2:	82 81       	ldd	r24, Z+2	; 0x02
  f4:	93 81       	ldd	r25, Z+3	; 0x03
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	93 83       	std	Z+3, r25	; 0x03
  fa:	82 83       	std	Z+2, r24	; 0x02

ISR(TIMER0_COMP_vect)
{
	for (int i=0;i<MAX_NO;i++)
	{
		if (arr_obj_timers[i] != NULL)
  fc:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <arr_obj_timers+0x2>
 100:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <arr_obj_timers+0x3>
 104:	30 97       	sbiw	r30, 0x00	; 0
 106:	29 f0       	breq	.+10     	; 0x112 <__vector_10+0x3e>
		{
			(arr_obj_timers[i]->rem_time)--;
 108:	82 81       	ldd	r24, Z+2	; 0x02
 10a:	93 81       	ldd	r25, Z+3	; 0x03
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	93 83       	std	Z+3, r25	; 0x03
 110:	82 83       	std	Z+2, r24	; 0x02
			
		}
	}
}
 112:	ff 91       	pop	r31
 114:	ef 91       	pop	r30
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <tmu_init>:

bool_t tmu_init(ecore_u16 timer_res)
{
	cli();
 124:	f8 94       	cli
	bool_t b_ret_val=E_TRUE;
	TCCR0 = 0x28;
 126:	88 e2       	ldi	r24, 0x28	; 40
 128:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= 0x02;
 12a:	83 b7       	in	r24, 0x33	; 51
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	83 bf       	out	0x33, r24	; 51
	OCR0 = 124;
 130:	8c e7       	ldi	r24, 0x7C	; 124
 132:	8c bf       	out	0x3c, r24	; 60
	TIMSK|=(1<<OCIE0);
 134:	89 b7       	in	r24, 0x39	; 57
 136:	82 60       	ori	r24, 0x02	; 2
 138:	89 bf       	out	0x39, r24	; 57
	return b_ret_val;
	sei();
}
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	08 95       	ret

0000013e <tmu_start_timer>:



bool_t tmu_start_timer(timer_object *ptr_object,void (*cb_pf)(void),ecore_u16 time,timer_type tm_type)
{
	cli();
 13e:	f8 94       	cli
	for (int i=0;i<MAX_NO;i++)
	{
		arr_obj_timers[i]=NULL;
 140:	e1 e6       	ldi	r30, 0x61	; 97
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	11 82       	std	Z+1, r1	; 0x01
 146:	10 82       	st	Z, r1
 148:	13 82       	std	Z+3, r1	; 0x03
 14a:	12 82       	std	Z+2, r1	; 0x02
	}
	
	
	bool_t b_ret_val=E_TRUE;
	if ( (ptr_object != NULL) && (cb_pf != NULL) && (time != 0) && ((tm_type == periodic_en)||(tm_type == one_shoot)))
 14c:	00 97       	sbiw	r24, 0x00	; 0
 14e:	01 f1       	breq	.+64     	; 0x190 <tmu_start_timer+0x52>
 150:	61 15       	cp	r22, r1
 152:	71 05       	cpc	r23, r1
 154:	f9 f0       	breq	.+62     	; 0x194 <tmu_start_timer+0x56>
 156:	41 15       	cp	r20, r1
 158:	51 05       	cpc	r21, r1
 15a:	f1 f0       	breq	.+60     	; 0x198 <tmu_start_timer+0x5a>
 15c:	22 30       	cpi	r18, 0x02	; 2
 15e:	f0 f4       	brcc	.+60     	; 0x19c <tmu_start_timer+0x5e>
	{
		ptr_object->given_time=time;
 160:	fc 01       	movw	r30, r24
 162:	51 83       	std	Z+1, r21	; 0x01
 164:	40 83       	st	Z, r20
		ptr_object->rem_time=time;
 166:	53 83       	std	Z+3, r21	; 0x03
 168:	42 83       	std	Z+2, r20	; 0x02
		ptr_object->pf_cb=cb_pf;
 16a:	75 83       	std	Z+5, r23	; 0x05
 16c:	64 83       	std	Z+4, r22	; 0x04
		ptr_object->t_type=tm_type;
 16e:	26 83       	std	Z+6, r18	; 0x06
		ptr_object->index=objects_counters;
 170:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
 174:	27 83       	std	Z+7, r18	; 0x07
		arr_obj_timers[objects_counters]=ptr_object;
 176:	e2 2f       	mov	r30, r18
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	ee 0f       	add	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	ef 59       	subi	r30, 0x9F	; 159
 180:	ff 4f       	sbci	r31, 0xFF	; 255
 182:	91 83       	std	Z+1, r25	; 0x01
 184:	80 83       	st	Z, r24
		objects_counters++;
 186:	2f 5f       	subi	r18, 0xFF	; 255
 188:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <_edata>
	{
		arr_obj_timers[i]=NULL;
	}
	
	
	bool_t b_ret_val=E_TRUE;
 18c:	81 e0       	ldi	r24, 0x01	; 1
		ptr_object->rem_time=time;
		ptr_object->pf_cb=cb_pf;
		ptr_object->t_type=tm_type;
		ptr_object->index=objects_counters;
		arr_obj_timers[objects_counters]=ptr_object;
		objects_counters++;
 18e:	07 c0       	rjmp	.+14     	; 0x19e <tmu_start_timer+0x60>
	} 
	else
	{
		b_ret_val=E_FALSE;
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	05 c0       	rjmp	.+10     	; 0x19e <tmu_start_timer+0x60>
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	03 c0       	rjmp	.+6      	; 0x19e <tmu_start_timer+0x60>
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	01 c0       	rjmp	.+2      	; 0x19e <tmu_start_timer+0x60>
 19c:	80 e0       	ldi	r24, 0x00	; 0
	}
	sei();
 19e:	78 94       	sei
	return b_ret_val;
}
 1a0:	08 95       	ret

000001a2 <tmu_stop_timer>:



bool_t tmu_stop_timer(timer_object *ptr_object)
{	bool_t b_ret_val=E_TRUE;
 1a2:	fc 01       	movw	r30, r24

	ptr_object->given_time=0;
 1a4:	11 82       	std	Z+1, r1	; 0x01
 1a6:	10 82       	st	Z, r1
	//
	ptr_object->pf_cb=NULL;
 1a8:	15 82       	std	Z+5, r1	; 0x05
 1aa:	14 82       	std	Z+4, r1	; 0x04
	ptr_object->t_type=no_type;
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	86 83       	std	Z+6, r24	; 0x06
	arr_obj_timers[ptr_object->index]=NULL;
 1b0:	e7 81       	ldd	r30, Z+7	; 0x07
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	ee 0f       	add	r30, r30
 1b6:	ff 1f       	adc	r31, r31
 1b8:	ef 59       	subi	r30, 0x9F	; 159
 1ba:	ff 4f       	sbci	r31, 0xFF	; 255
 1bc:	11 82       	std	Z+1, r1	; 0x01
 1be:	10 82       	st	Z, r1
		return b_ret_val;

}
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	08 95       	ret

000001c4 <tmu_dispatch>:



bool_t tmu_dispatch(void)
{
 1c4:	ef 92       	push	r14
 1c6:	ff 92       	push	r15
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	c1 e6       	ldi	r28, 0x61	; 97
 1d2:	d0 e0       	ldi	r29, 0x00	; 0
 1d4:	05 e6       	ldi	r16, 0x65	; 101
 1d6:	10 e0       	ldi	r17, 0x00	; 0
 1d8:	7e 01       	movw	r14, r28
	static ecore_s16 temp;
	bool_t b_ret_val=E_TRUE;
	for (int i=0;i<MAX_NO;i++)
	{
		if (arr_obj_timers[i] != NULL)
 1da:	e8 81       	ld	r30, Y
 1dc:	f9 81       	ldd	r31, Y+1	; 0x01
 1de:	30 97       	sbiw	r30, 0x00	; 0
 1e0:	e1 f0       	breq	.+56     	; 0x21a <tmu_dispatch+0x56>
		{
			temp=arr_obj_timers[i]->rem_time;
			if (arr_obj_timers[i]->rem_time <=0)//rewrite this================================
 1e2:	82 81       	ldd	r24, Z+2	; 0x02
 1e4:	93 81       	ldd	r25, Z+3	; 0x03
 1e6:	18 16       	cp	r1, r24
 1e8:	19 06       	cpc	r1, r25
 1ea:	bc f0       	brlt	.+46     	; 0x21a <tmu_dispatch+0x56>
			{
				arr_obj_timers[i]->pf_cb();
 1ec:	04 80       	ldd	r0, Z+4	; 0x04
 1ee:	f5 81       	ldd	r31, Z+5	; 0x05
 1f0:	e0 2d       	mov	r30, r0
 1f2:	09 95       	icall
				if(arr_obj_timers[i]->t_type == one_shoot)
 1f4:	e8 81       	ld	r30, Y
 1f6:	f9 81       	ldd	r31, Y+1	; 0x01
 1f8:	86 81       	ldd	r24, Z+6	; 0x06
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	19 f4       	brne	.+6      	; 0x204 <tmu_dispatch+0x40>
					tmu_stop_timer(arr_obj_timers[i]);
 1fe:	cf 01       	movw	r24, r30
 200:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <tmu_stop_timer>
				arr_obj_timers[i]->rem_time=( (arr_obj_timers[i]->given_time)+(arr_obj_timers[i]->rem_time) );	
 204:	d7 01       	movw	r26, r14
 206:	ed 91       	ld	r30, X+
 208:	fc 91       	ld	r31, X
 20a:	22 81       	ldd	r18, Z+2	; 0x02
 20c:	33 81       	ldd	r19, Z+3	; 0x03
 20e:	80 81       	ld	r24, Z
 210:	91 81       	ldd	r25, Z+1	; 0x01
 212:	82 0f       	add	r24, r18
 214:	93 1f       	adc	r25, r19
 216:	93 83       	std	Z+3, r25	; 0x03
 218:	82 83       	std	Z+2, r24	; 0x02
 21a:	22 96       	adiw	r28, 0x02	; 2

bool_t tmu_dispatch(void)
{
	static ecore_s16 temp;
	bool_t b_ret_val=E_TRUE;
	for (int i=0;i<MAX_NO;i++)
 21c:	c0 17       	cp	r28, r16
 21e:	d1 07       	cpc	r29, r17
 220:	d9 f6       	brne	.-74     	; 0x1d8 <tmu_dispatch+0x14>
	}
	
	
	
	return b_ret_val;
}
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	1f 91       	pop	r17
 22a:	0f 91       	pop	r16
 22c:	ff 90       	pop	r15
 22e:	ef 90       	pop	r14
 230:	08 95       	ret

00000232 <_exit>:
 232:	f8 94       	cli

00000234 <__stop_program>:
 234:	ff cf       	rjmp	.-2      	; 0x234 <__stop_program>
