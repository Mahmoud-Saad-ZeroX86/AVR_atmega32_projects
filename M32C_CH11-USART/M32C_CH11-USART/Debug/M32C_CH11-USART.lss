
M32C_CH11-USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000334  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008c  00800060  00000334  000003c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000ec  008000ec  00000454  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c96  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a4  00000000  00000000  00001206  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000633  00000000  00000000  000019aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00001fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000425  00000000  00000000  00002158  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000363  00000000  00000000  0000257d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  000028e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 40 01 	jmp	0x280	; 0x280 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3e       	cpi	r26, 0xEC	; 236
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac ee       	ldi	r26, 0xEC	; 236
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3f       	cpi	r26, 0xF1	; 241
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 93 00 	call	0x126	; 0x126 <main>
  8a:	0c 94 98 01 	jmp	0x330	; 0x330 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc_init>:
			
			char SHOWA [3];			// displaying digital output as it's sent as ascii
			itoa(COUNTA,SHOWA,10);
			usart_send_arr(SHOWA);
			
}
  92:	1a ba       	out	0x1a, r1	; 26
  94:	87 e8       	ldi	r24, 0x87	; 135
  96:	86 b9       	out	0x06, r24	; 6
  98:	80 e6       	ldi	r24, 0x60	; 96
  9a:	87 b9       	out	0x07, r24	; 7
  9c:	08 95       	ret

0000009e <adc_read>:
  9e:	97 b1       	in	r25, 0x07	; 7
  a0:	98 7f       	andi	r25, 0xF8	; 248
  a2:	97 b9       	out	0x07, r25	; 7
  a4:	97 b1       	in	r25, 0x07	; 7
  a6:	87 70       	andi	r24, 0x07	; 7
  a8:	98 2b       	or	r25, r24
  aa:	97 b9       	out	0x07, r25	; 7
  ac:	36 9a       	sbi	0x06, 6	; 6
  ae:	34 9b       	sbis	0x06, 4	; 6
  b0:	fe cf       	rjmp	.-4      	; 0xae <adc_read+0x10>
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	08 95       	ret

000000b6 <usart_init>:
  b6:	88 e1       	ldi	r24, 0x18	; 24
  b8:	8a b9       	out	0x0a, r24	; 10
  ba:	86 e8       	ldi	r24, 0x86	; 134
  bc:	80 bd       	out	0x20, r24	; 32
  be:	83 e3       	ldi	r24, 0x33	; 51
  c0:	89 b9       	out	0x09, r24	; 9
  c2:	08 95       	ret

000000c4 <usart_send>:
  c4:	5d 9b       	sbis	0x0b, 5	; 11
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <usart_send>
  c8:	8c b9       	out	0x0c, r24	; 12
  ca:	08 95       	ret

000000cc <usart_send_arr>:
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	fc 01       	movw	r30, r24
  d4:	80 81       	ld	r24, Z
  d6:	88 23       	and	r24, r24
  d8:	59 f0       	breq	.+22     	; 0xf0 <usart_send_arr+0x24>
  da:	8f 01       	movw	r16, r30
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	0e 94 62 00 	call	0xc4	; 0xc4 <usart_send>
  e2:	cf 5f       	subi	r28, 0xFF	; 255
  e4:	f8 01       	movw	r30, r16
  e6:	ec 0f       	add	r30, r28
  e8:	f1 1d       	adc	r31, r1
  ea:	80 81       	ld	r24, Z
  ec:	81 11       	cpse	r24, r1
  ee:	f7 cf       	rjmp	.-18     	; 0xde <usart_send_arr+0x12>
  f0:	cf 91       	pop	r28
  f2:	1f 91       	pop	r17
  f4:	0f 91       	pop	r16
  f6:	08 95       	ret

000000f8 <usart_recve>:
  f8:	5f 9b       	sbis	0x0b, 7	; 11
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <usart_recve>
  fc:	8c b1       	in	r24, 0x0c	; 12
  fe:	08 95       	ret

00000100 <stp>:
 100:	18 ba       	out	0x18, r1	; 24
 102:	80 ef       	ldi	r24, 0xF0	; 240
 104:	88 bb       	out	0x18, r24	; 24
 106:	08 95       	ret

00000108 <read_ultra_sonic>:
 108:	a8 9a       	sbi	0x15, 0	; 21
 10a:	88 e2       	ldi	r24, 0x28	; 40
 10c:	8a 95       	dec	r24
 10e:	f1 f7       	brne	.-4      	; 0x10c <read_ultra_sonic+0x4>
 110:	a8 98       	cbi	0x15, 0	; 21
 112:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <pulse>
 116:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <pulse+0x1>
 11a:	6a e3       	ldi	r22, 0x3A	; 58
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__divmodhi4>
 122:	86 2f       	mov	r24, r22
 124:	08 95       	ret

00000126 <main>:

int main(void)
{
	adc_init();
 126:	0e 94 49 00 	call	0x92	; 0x92 <adc_init>
	usart_init();
 12a:	0e 94 5b 00 	call	0xb6	; 0xb6 <usart_init>
	DDRA=0x00;
 12e:	1a ba       	out	0x1a, r1	; 26
	DDRB=0xff;
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	87 bb       	out	0x17, r24	; 23
	PORTB=0b11110000;
 134:	90 ef       	ldi	r25, 0xF0	; 240
 136:	98 bb       	out	0x18, r25	; 24
	DDRC=0xff;
 138:	84 bb       	out	0x14, r24	; 20
	unsigned char temp;
	//ultrasonic
	DDRD &=~(1<<2);      //setting the interrupt pin as an input
 13a:	8a 98       	cbi	0x11, 2	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	2f e7       	ldi	r18, 0x7F	; 127
 13e:	88 e3       	ldi	r24, 0x38	; 56
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x1c>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x26>
 14c:	00 00       	nop
		_delay_ms(50);
		GICR|=(1<<INT0);//|(1<<INT1);     //enabling interrupt0
 14e:	8b b7       	in	r24, 0x3b	; 59
 150:	80 64       	ori	r24, 0x40	; 64
 152:	8b bf       	out	0x3b, r24	; 59
		MCUCR|=(1<<ISC00);   //setting interrupt triggering logic change
 154:	85 b7       	in	r24, 0x35	; 53
 156:	81 60       	ori	r24, 0x01	; 1
 158:	85 bf       	out	0x35, r24	; 53
		sei();               //enabling global interrupts
 15a:	78 94       	sei
{
	PORTB=0b11010000;
}
void led3()
{
	PORTB=0b10110000;
 15c:	0f 2e       	mov	r0, r31
 15e:	f0 eb       	ldi	r31, 0xB0	; 176
 160:	cf 2e       	mov	r12, r31
 162:	f0 2d       	mov	r31, r0
{
	PORTB=0b11100000;
}
void led2()
{
	PORTB=0b11010000;
 164:	0f 2e       	mov	r0, r31
 166:	f0 ed       	ldi	r31, 0xD0	; 208
 168:	df 2e       	mov	r13, r31
 16a:	f0 2d       	mov	r31, r0
	PORTB=0b00000000;
	PORTB=0xf0;
}
void led1()
{
	PORTB=0b11100000;
 16c:	0f 2e       	mov	r0, r31
 16e:	f0 ee       	ldi	r31, 0xE0	; 224
 170:	ef 2e       	mov	r14, r31
 172:	f0 2d       	mov	r31, r0
{
	PORTB=0b10110000;
}
void Beeb()
{
	PORTB=0b01110000;
 174:	0f 2e       	mov	r0, r31
 176:	f0 e7       	ldi	r31, 0x70	; 112
 178:	ff 2e       	mov	r15, r31
 17a:	f0 2d       	mov	r31, r0
{
	PORTB=0b10001001;
}
void rit(void )
{
	PORTB=0b10000110;
 17c:	06 e8       	ldi	r16, 0x86	; 134
{
	PORTB=0b10001010;
}
void lft(void )
{
	PORTB=0b10001001;
 17e:	19 e8       	ldi	r17, 0x89	; 137
{
	PORTB=0b10000101;
}
void bkwrd(void )
{
	PORTB=0b10001010;
 180:	da e8       	ldi	r29, 0x8A	; 138
		sei();               //enabling global interrupts
		

    while (1) 
    {
	    usart_send_arr("Hi,i'm the BLACK KNIGHT :D \n");
 182:	80 e6       	ldi	r24, 0x60	; 96
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 66 00 	call	0xcc	; 0xcc <usart_send_arr>
	    usart_send_arr("please choose the mode,1=control,2=autonomous \n");
 18a:	8d e7       	ldi	r24, 0x7D	; 125
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 66 00 	call	0xcc	; 0xcc <usart_send_arr>
		temp=usart_recve();
 192:	0e 94 7c 00 	call	0xf8	; 0xf8 <usart_recve>
 196:	c8 2f       	mov	r28, r24
		
		if (temp == '1')
 198:	81 33       	cpi	r24, 0x31	; 49
 19a:	79 f5       	brne	.+94     	; 0x1fa <main+0xd4>
		{
			usart_send_arr("note...to quit send q\n");
 19c:	8d ea       	ldi	r24, 0xAD	; 173
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 66 00 	call	0xcc	; 0xcc <usart_send_arr>
}

//motors commands
void frwrd(void )
{
	PORTB=0b10000101;
 1a4:	c5 e8       	ldi	r28, 0x85	; 133
		if (temp == '1')
		{
			usart_send_arr("note...to quit send q\n");
			while(temp != 'q')
			{
				temp=usart_recve();
 1a6:	0e 94 7c 00 	call	0xf8	; 0xf8 <usart_recve>
				if(temp == 'w')
 1aa:	87 37       	cpi	r24, 0x77	; 119
 1ac:	11 f4       	brne	.+4      	; 0x1b2 <main+0x8c>
}

//motors commands
void frwrd(void )
{
	PORTB=0b10000101;
 1ae:	c8 bb       	out	0x18, r28	; 24
 1b0:	fa cf       	rjmp	.-12     	; 0x1a6 <main+0x80>
				{
					frwrd();
					//usart_send_arr("up");
					
				}
				else if (temp == 's')
 1b2:	83 37       	cpi	r24, 0x73	; 115
 1b4:	11 f4       	brne	.+4      	; 0x1ba <main+0x94>
{
	PORTB=0b10000101;
}
void bkwrd(void )
{
	PORTB=0b10001010;
 1b6:	d8 bb       	out	0x18, r29	; 24
 1b8:	f6 cf       	rjmp	.-20     	; 0x1a6 <main+0x80>
				else if (temp == 's')
				{
					bkwrd();
					//usart_send_arr("dn");
				}
				else if (temp == 'a')
 1ba:	81 36       	cpi	r24, 0x61	; 97
 1bc:	11 f4       	brne	.+4      	; 0x1c2 <main+0x9c>
{
	PORTB=0b10001010;
}
void lft(void )
{
	PORTB=0b10001001;
 1be:	18 bb       	out	0x18, r17	; 24
 1c0:	f2 cf       	rjmp	.-28     	; 0x1a6 <main+0x80>
				else if (temp == 'a')
				{
					lft();
					//usart_send_arr("lt");
				}
				else if (temp == 'd')
 1c2:	84 36       	cpi	r24, 0x64	; 100
 1c4:	11 f4       	brne	.+4      	; 0x1ca <main+0xa4>
{
	PORTB=0b10001001;
}
void rit(void )
{
	PORTB=0b10000110;
 1c6:	08 bb       	out	0x18, r16	; 24
 1c8:	ee cf       	rjmp	.-36     	; 0x1a6 <main+0x80>
				else if (temp == 'd')
				{
					rit();
					//usart_send_arr("rt");
				}
				else if (temp == 'o')
 1ca:	8f 36       	cpi	r24, 0x6F	; 111
 1cc:	19 f4       	brne	.+6      	; 0x1d4 <main+0xae>
				{
					stp();
 1ce:	0e 94 80 00 	call	0x100	; 0x100 <stp>
 1d2:	e9 cf       	rjmp	.-46     	; 0x1a6 <main+0x80>
					//usart_send_arr("off");
				}
				else if (temp == 'b')
 1d4:	82 36       	cpi	r24, 0x62	; 98
 1d6:	11 f4       	brne	.+4      	; 0x1dc <main+0xb6>
{
	PORTB=0b10110000;
}
void Beeb()
{
	PORTB=0b01110000;
 1d8:	f8 ba       	out	0x18, r15	; 24
 1da:	e5 cf       	rjmp	.-54     	; 0x1a6 <main+0x80>
				else if (temp == 'b')
				{
					Beeb();
					//usart_send_arr("beeb");
				}
				else if (temp == 'z')
 1dc:	8a 37       	cpi	r24, 0x7A	; 122
 1de:	11 f4       	brne	.+4      	; 0x1e4 <main+0xbe>
	PORTB=0b00000000;
	PORTB=0xf0;
}
void led1()
{
	PORTB=0b11100000;
 1e0:	e8 ba       	out	0x18, r14	; 24
 1e2:	e1 cf       	rjmp	.-62     	; 0x1a6 <main+0x80>
				else if (temp == 'z')
				{
					led1();
					//usart_send_arr("red led is on!");
				}
				else if (temp == 'x')
 1e4:	88 37       	cpi	r24, 0x78	; 120
 1e6:	11 f4       	brne	.+4      	; 0x1ec <main+0xc6>
{
	PORTB=0b11100000;
}
void led2()
{
	PORTB=0b11010000;
 1e8:	d8 ba       	out	0x18, r13	; 24
 1ea:	dd cf       	rjmp	.-70     	; 0x1a6 <main+0x80>
				else if (temp == 'x')
				{
					led2();
					//usart_send_arr("green led is on!");
				}
				else if (temp == 'c')
 1ec:	83 36       	cpi	r24, 0x63	; 99
 1ee:	11 f4       	brne	.+4      	; 0x1f4 <main+0xce>
{
	PORTB=0b11010000;
}
void led3()
{
	PORTB=0b10110000;
 1f0:	c8 ba       	out	0x18, r12	; 24
 1f2:	d9 cf       	rjmp	.-78     	; 0x1a6 <main+0x80>
		temp=usart_recve();
		
		if (temp == '1')
		{
			usart_send_arr("note...to quit send q\n");
			while(temp != 'q')
 1f4:	81 37       	cpi	r24, 0x71	; 113
 1f6:	b9 f6       	brne	.-82     	; 0x1a6 <main+0x80>
 1f8:	c4 cf       	rjmp	.-120    	; 0x182 <main+0x5c>
					led3();
					//usart_send_arr("blue led is on!");
				}
			}
		}
		else if(temp == '2')
 1fa:	82 33       	cpi	r24, 0x32	; 50
 1fc:	b1 f5       	brne	.+108    	; 0x26a <main+0x144>
		{
			usart_send_arr("note...to quit send q\n");
 1fe:	8d ea       	ldi	r24, 0xAD	; 173
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 66 00 	call	0xcc	; 0xcc <usart_send_arr>
{
	PORTB=0b10001001;
}
void rit(void )
{
	PORTB=0b10000110;
 206:	16 e8       	ldi	r17, 0x86	; 134
}

//motors commands
void frwrd(void )
{
	PORTB=0b10000101;
 208:	d5 e8       	ldi	r29, 0x85	; 133
			static uint8_t rit_sensor;
			static uint8_t lft_sensor;
			while(temp != 'q')
			{
				
				usonic=read_ultra_sonic();
 20a:	0e 94 84 00 	call	0x108	; 0x108 <read_ultra_sonic>
 20e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__data_end>
				usonic=read_ultra_sonic();
 212:	0e 94 84 00 	call	0x108	; 0x108 <read_ultra_sonic>
 216:	c8 2f       	mov	r28, r24
 218:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__data_end>
				rit_sensor =adc_read(0);
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 4f 00 	call	0x9e	; 0x9e <adc_read>
				lft_sensor =adc_read(1);
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 4f 00 	call	0x9e	; 0x9e <adc_read>
				if (usonic >= 15)
 228:	cf 30       	cpi	r28, 0x0F	; 15
 22a:	98 f0       	brcs	.+38     	; 0x252 <main+0x12c>
}

//motors commands
void frwrd(void )
{
	PORTB=0b10000101;
 22c:	d8 bb       	out	0x18, r29	; 24
				rit_sensor =adc_read(0);
				lft_sensor =adc_read(1);
				if (usonic >= 15)
				{
						frwrd();
						usart_send_arr("up ");
 22e:	84 ec       	ldi	r24, 0xC4	; 196
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 66 00 	call	0xcc	; 0xcc <usart_send_arr>
 236:	2f ef       	ldi	r18, 0xFF	; 255
 238:	86 e7       	ldi	r24, 0x76	; 118
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	21 50       	subi	r18, 0x01	; 1
 23e:	80 40       	sbci	r24, 0x00	; 0
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <main+0x116>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0x120>
 246:	00 00       	nop
						_delay_ms(60);
						usonic=read_ultra_sonic();
 248:	0e 94 84 00 	call	0x108	; 0x108 <read_ultra_sonic>
 24c:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__data_end>
 250:	dc cf       	rjmp	.-72     	; 0x20a <main+0xe4>
{
	PORTB=0b10001001;
}
void rit(void )
{
	PORTB=0b10000110;
 252:	18 bb       	out	0x18, r17	; 24
 254:	8f e2       	ldi	r24, 0x2F	; 47
 256:	95 e7       	ldi	r25, 0x75	; 117
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <main+0x132>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x138>
 25e:	00 00       	nop
				}
				else 
				{
					rit();
					_delay_ms(15);
					usonic=read_ultra_sonic();
 260:	0e 94 84 00 	call	0x108	; 0x108 <read_ultra_sonic>
 264:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__data_end>
 268:	d0 cf       	rjmp	.-96     	; 0x20a <main+0xe4>
				}
			
		}
		else
		{
			usart_send_arr("i said 1=control,2=autonomous not ");
 26a:	88 ec       	ldi	r24, 0xC8	; 200
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 66 00 	call	0xcc	; 0xcc <usart_send_arr>
			usart_send(temp);
 272:	8c 2f       	mov	r24, r28
 274:	0e 94 62 00 	call	0xc4	; 0xc4 <usart_send>
			usart_send(' ');
 278:	80 e2       	ldi	r24, 0x20	; 32
 27a:	0e 94 62 00 	call	0xc4	; 0xc4 <usart_send>
 27e:	81 cf       	rjmp	.-254    	; 0x182 <main+0x5c>

00000280 <__vector_1>:
	}
}


ISR(INT0_vect)//interrupt service routine when there is a change in logic level
{
 280:	1f 92       	push	r1
 282:	0f 92       	push	r0
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	0f 92       	push	r0
 288:	11 24       	eor	r1, r1
 28a:	8f 93       	push	r24
 28c:	9f 93       	push	r25

	if (i==1)//when logic from HIGH to LOW
 28e:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <i>
 292:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <i+0x1>
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	69 f4       	brne	.+26     	; 0x2b4 <__vector_1+0x34>

	{

		TCCR1B=0;//disabling counter
 29a:	1e bc       	out	0x2e, r1	; 46

		pulse=TCNT1;//count memory is updated to integer
 29c:	8c b5       	in	r24, 0x2c	; 44
 29e:	9d b5       	in	r25, 0x2d	; 45
 2a0:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <pulse+0x1>
 2a4:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <pulse>

		TCNT1=0;//resetting the counter memory
 2a8:	1d bc       	out	0x2d, r1	; 45
 2aa:	1c bc       	out	0x2c, r1	; 44

		i=0;
 2ac:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <i+0x1>
 2b0:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <i>

	}

	  if (i==0)//when logic change from LOW to HIGH
 2b4:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <i>
 2b8:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <i+0x1>
 2bc:	89 2b       	or	r24, r25
 2be:	49 f4       	brne	.+18     	; 0x2d2 <__vector_1+0x52>

	{

		TCCR1B|=(1<<CS10);//enabling counter
 2c0:	8e b5       	in	r24, 0x2e	; 46
 2c2:	81 60       	ori	r24, 0x01	; 1
 2c4:	8e bd       	out	0x2e, r24	; 46

		i=1;
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	90 93 ee 00 	sts	0x00EE, r25	; 0x8000ee <i+0x1>
 2ce:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <i>

	}

 2d2:	9f 91       	pop	r25
 2d4:	8f 91       	pop	r24
 2d6:	0f 90       	pop	r0
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	0f 90       	pop	r0
 2dc:	1f 90       	pop	r1
 2de:	18 95       	reti

000002e0 <__divmodhi4>:
 2e0:	97 fb       	bst	r25, 7
 2e2:	07 2e       	mov	r0, r23
 2e4:	16 f4       	brtc	.+4      	; 0x2ea <__divmodhi4+0xa>
 2e6:	00 94       	com	r0
 2e8:	07 d0       	rcall	.+14     	; 0x2f8 <__divmodhi4_neg1>
 2ea:	77 fd       	sbrc	r23, 7
 2ec:	09 d0       	rcall	.+18     	; 0x300 <__divmodhi4_neg2>
 2ee:	0e 94 84 01 	call	0x308	; 0x308 <__udivmodhi4>
 2f2:	07 fc       	sbrc	r0, 7
 2f4:	05 d0       	rcall	.+10     	; 0x300 <__divmodhi4_neg2>
 2f6:	3e f4       	brtc	.+14     	; 0x306 <__divmodhi4_exit>

000002f8 <__divmodhi4_neg1>:
 2f8:	90 95       	com	r25
 2fa:	81 95       	neg	r24
 2fc:	9f 4f       	sbci	r25, 0xFF	; 255
 2fe:	08 95       	ret

00000300 <__divmodhi4_neg2>:
 300:	70 95       	com	r23
 302:	61 95       	neg	r22
 304:	7f 4f       	sbci	r23, 0xFF	; 255

00000306 <__divmodhi4_exit>:
 306:	08 95       	ret

00000308 <__udivmodhi4>:
 308:	aa 1b       	sub	r26, r26
 30a:	bb 1b       	sub	r27, r27
 30c:	51 e1       	ldi	r21, 0x11	; 17
 30e:	07 c0       	rjmp	.+14     	; 0x31e <__udivmodhi4_ep>

00000310 <__udivmodhi4_loop>:
 310:	aa 1f       	adc	r26, r26
 312:	bb 1f       	adc	r27, r27
 314:	a6 17       	cp	r26, r22
 316:	b7 07       	cpc	r27, r23
 318:	10 f0       	brcs	.+4      	; 0x31e <__udivmodhi4_ep>
 31a:	a6 1b       	sub	r26, r22
 31c:	b7 0b       	sbc	r27, r23

0000031e <__udivmodhi4_ep>:
 31e:	88 1f       	adc	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	5a 95       	dec	r21
 324:	a9 f7       	brne	.-22     	; 0x310 <__udivmodhi4_loop>
 326:	80 95       	com	r24
 328:	90 95       	com	r25
 32a:	bc 01       	movw	r22, r24
 32c:	cd 01       	movw	r24, r26
 32e:	08 95       	ret

00000330 <_exit>:
 330:	f8 94       	cli

00000332 <__stop_program>:
 332:	ff cf       	rjmp	.-2      	; 0x332 <__stop_program>
